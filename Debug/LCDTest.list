
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080090ac  080090ac  0000a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  080090f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d0  2400002c  08009124  0000b02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001fc  08009124  0000b1fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000145a5  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000298f  00000000  00000000  0001f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc0  00000000  00000000  00021f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a85  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037add  00000000  00000000  000237d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001506b  00000000  00000000  0005b2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eac2  00000000  00000000  0007031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ceddf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003820  00000000  00000000  001cee24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001d2644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009094 	.word	0x08009094

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08009094 	.word	0x08009094

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ILI9341_RGB565WritePixel>:
#include <ili9341_driver.h>
#include "gfx.h"



void ILI9341_RGB565WritePixel(uint32_t i , uint8_t r, uint8_t g, uint8_t b, uint8_t* frameBuffer){
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	4608      	mov	r0, r1
 800060e:	4611      	mov	r1, r2
 8000610:	461a      	mov	r2, r3
 8000612:	4603      	mov	r3, r0
 8000614:	70fb      	strb	r3, [r7, #3]
 8000616:	460b      	mov	r3, r1
 8000618:	70bb      	strb	r3, [r7, #2]
 800061a:	4613      	mov	r3, r2
 800061c:	707b      	strb	r3, [r7, #1]
	uint16_t data = ((r>>3)<<11)|((g>>2)<<5)|(b>>3);
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	08db      	lsrs	r3, r3, #3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	b21b      	sxth	r3, r3
 8000626:	02db      	lsls	r3, r3, #11
 8000628:	b21a      	sxth	r2, r3
 800062a:	78bb      	ldrb	r3, [r7, #2]
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	b21b      	sxth	r3, r3
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21a      	sxth	r2, r3
 800063a:	787b      	ldrb	r3, [r7, #1]
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21b      	sxth	r3, r3
 8000646:	81fb      	strh	r3, [r7, #14]
	uint8_t highByte = data>>8;
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	737b      	strb	r3, [r7, #13]
	uint8_t lowByte = data&0xFF;
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	733b      	strb	r3, [r7, #12]
	frameBuffer[i*2] = highByte;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	7b7a      	ldrb	r2, [r7, #13]
 800065e:	701a      	strb	r2, [r3, #0]
	frameBuffer[(i*2)+1] = lowByte;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	3301      	adds	r3, #1
 8000666:	69ba      	ldr	r2, [r7, #24]
 8000668:	4413      	add	r3, r2
 800066a:	7b3a      	ldrb	r2, [r7, #12]
 800066c:	701a      	strb	r2, [r3, #0]



}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <ILI9341_StripeTest>:
	frameBuffer[(i*2)+1] = lowByte;


}

void ILI9341_StripeTest( uint8_t rowCounter) {
 800067c:	b580      	push	{r7, lr}
 800067e:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4602      	mov	r2, r0
 8000688:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800068c:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000690:	701a      	strb	r2, [r3, #0]

    uint8_t r255 = 255;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	4a4e      	ldr	r2, [pc, #312]	@ (80007d0 <ILI9341_StripeTest+0x154>)
 8000696:	443a      	add	r2, r7
 8000698:	7013      	strb	r3, [r2, #0]
    uint8_t g255 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	4a4d      	ldr	r2, [pc, #308]	@ (80007d4 <ILI9341_StripeTest+0x158>)
 800069e:	443a      	add	r2, r7
 80006a0:	7013      	strb	r3, [r2, #0]
    uint8_t b255 = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	4a4c      	ldr	r2, [pc, #304]	@ (80007d8 <ILI9341_StripeTest+0x15c>)
 80006a6:	443a      	add	r2, r7
 80006a8:	7013      	strb	r3, [r2, #0]
    uint8_t frameBuffer[153600];


    for(uint32_t i = 0; i < 76800; i++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	4a4b      	ldr	r2, [pc, #300]	@ (80007dc <ILI9341_StripeTest+0x160>)
 80006ae:	443a      	add	r2, r7
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e074      	b.n	800079e <ILI9341_StripeTest+0x122>
    	if(i%1920==0){
 80006b4:	4b49      	ldr	r3, [pc, #292]	@ (80007dc <ILI9341_StripeTest+0x160>)
 80006b6:	443b      	add	r3, r7
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	4b49      	ldr	r3, [pc, #292]	@ (80007e0 <ILI9341_StripeTest+0x164>)
 80006bc:	fba3 2301 	umull	r2, r3, r3, r1
 80006c0:	0a9a      	lsrs	r2, r3, #10
 80006c2:	4613      	mov	r3, r2
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	01db      	lsls	r3, r3, #7
 80006ca:	1aca      	subs	r2, r1, r3
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d149      	bne.n	8000764 <ILI9341_StripeTest+0xe8>
    		rowCounter++;
 80006d0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80006d4:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80006de:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 80006e2:	3201      	adds	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
    		switch(rowCounter%3){
 80006e6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80006ea:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <ILI9341_StripeTest+0x168>)
 80006f2:	fba3 1302 	umull	r1, r3, r3, r2
 80006f6:	0859      	lsrs	r1, r3, #1
 80006f8:	460b      	mov	r3, r1
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	440b      	add	r3, r1
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b02      	cmp	r3, #2
 8000704:	d020      	beq.n	8000748 <ILI9341_StripeTest+0xcc>
 8000706:	2b02      	cmp	r3, #2
 8000708:	dc2b      	bgt.n	8000762 <ILI9341_StripeTest+0xe6>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <ILI9341_StripeTest+0x98>
 800070e:	2b01      	cmp	r3, #1
 8000710:	d00d      	beq.n	800072e <ILI9341_StripeTest+0xb2>
    			r255 = 255;
    			g255 = 245;
    			b255 = 238;
    			break;
    		default:
    			break;
 8000712:	e026      	b.n	8000762 <ILI9341_StripeTest+0xe6>
    			r255 = 255;
 8000714:	23ff      	movs	r3, #255	@ 0xff
 8000716:	4a2e      	ldr	r2, [pc, #184]	@ (80007d0 <ILI9341_StripeTest+0x154>)
 8000718:	443a      	add	r2, r7
 800071a:	7013      	strb	r3, [r2, #0]
    			g255 = 127;
 800071c:	237f      	movs	r3, #127	@ 0x7f
 800071e:	4a2d      	ldr	r2, [pc, #180]	@ (80007d4 <ILI9341_StripeTest+0x158>)
 8000720:	443a      	add	r2, r7
 8000722:	7013      	strb	r3, [r2, #0]
    			b255 = 80;
 8000724:	2350      	movs	r3, #80	@ 0x50
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <ILI9341_StripeTest+0x15c>)
 8000728:	443a      	add	r2, r7
 800072a:	7013      	strb	r3, [r2, #0]
    			break;
 800072c:	e01a      	b.n	8000764 <ILI9341_StripeTest+0xe8>
    			r255 = 46;
 800072e:	232e      	movs	r3, #46	@ 0x2e
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <ILI9341_StripeTest+0x154>)
 8000732:	443a      	add	r2, r7
 8000734:	7013      	strb	r3, [r2, #0]
    			g255 = 139;
 8000736:	238b      	movs	r3, #139	@ 0x8b
 8000738:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <ILI9341_StripeTest+0x158>)
 800073a:	443a      	add	r2, r7
 800073c:	7013      	strb	r3, [r2, #0]
    			b255 = 87;
 800073e:	2357      	movs	r3, #87	@ 0x57
 8000740:	4a25      	ldr	r2, [pc, #148]	@ (80007d8 <ILI9341_StripeTest+0x15c>)
 8000742:	443a      	add	r2, r7
 8000744:	7013      	strb	r3, [r2, #0]
    			break;
 8000746:	e00d      	b.n	8000764 <ILI9341_StripeTest+0xe8>
    			r255 = 255;
 8000748:	23ff      	movs	r3, #255	@ 0xff
 800074a:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <ILI9341_StripeTest+0x154>)
 800074c:	443a      	add	r2, r7
 800074e:	7013      	strb	r3, [r2, #0]
    			g255 = 245;
 8000750:	23f5      	movs	r3, #245	@ 0xf5
 8000752:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <ILI9341_StripeTest+0x158>)
 8000754:	443a      	add	r2, r7
 8000756:	7013      	strb	r3, [r2, #0]
    			b255 = 238;
 8000758:	23ee      	movs	r3, #238	@ 0xee
 800075a:	4a1f      	ldr	r2, [pc, #124]	@ (80007d8 <ILI9341_StripeTest+0x15c>)
 800075c:	443a      	add	r2, r7
 800075e:	7013      	strb	r3, [r2, #0]
    			break;
 8000760:	e000      	b.n	8000764 <ILI9341_StripeTest+0xe8>
    			break;
 8000762:	bf00      	nop
    		}

    	}
    	//ILI9341_WriteData16(color);
        ILI9341_RGB565WritePixel(i, r255,g255,b255, frameBuffer);
 8000764:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <ILI9341_StripeTest+0x15c>)
 8000766:	443b      	add	r3, r7
 8000768:	7818      	ldrb	r0, [r3, #0]
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <ILI9341_StripeTest+0x158>)
 800076c:	443b      	add	r3, r7
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <ILI9341_StripeTest+0x154>)
 8000772:	443b      	add	r3, r7
 8000774:	7819      	ldrb	r1, [r3, #0]
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <ILI9341_StripeTest+0x16c>)
 8000778:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800077c:	f103 0310 	add.w	r3, r3, #16
 8000780:	443b      	add	r3, r7
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4603      	mov	r3, r0
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <ILI9341_StripeTest+0x160>)
 8000788:	4438      	add	r0, r7
 800078a:	6800      	ldr	r0, [r0, #0]
 800078c:	f7ff ff3a 	bl	8000604 <ILI9341_RGB565WritePixel>
    for(uint32_t i = 0; i < 76800; i++) {
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <ILI9341_StripeTest+0x160>)
 8000792:	443b      	add	r3, r7
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <ILI9341_StripeTest+0x160>)
 800079a:	443a      	add	r2, r7
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <ILI9341_StripeTest+0x160>)
 80007a0:	443b      	add	r3, r7
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80007a8:	d384      	bcc.n	80006b4 <ILI9341_StripeTest+0x38>

    }// 240 * 320 pixels
    TransmitFrame(239, 319,&frameBuffer);
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <ILI9341_StripeTest+0x16c>)
 80007ac:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007b0:	f103 0310 	add.w	r3, r3, #16
 80007b4:	443b      	add	r3, r7
 80007b6:	461a      	mov	r2, r3
 80007b8:	f240 113f 	movw	r1, #319	@ 0x13f
 80007bc:	20ef      	movs	r0, #239	@ 0xef
 80007be:	f000 f8d7 	bl	8000970 <TransmitFrame>

}
 80007c2:	bf00      	nop
 80007c4:	f507 3716 	add.w	r7, r7, #153600	@ 0x25800
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	0002580f 	.word	0x0002580f
 80007d4:	0002580e 	.word	0x0002580e
 80007d8:	0002580d 	.word	0x0002580d
 80007dc:	00025808 	.word	0x00025808
 80007e0:	88888889 	.word	0x88888889
 80007e4:	aaaaaaab 	.word	0xaaaaaaab
 80007e8:	fffda7f8 	.word	0xfffda7f8

080007ec <ILI9341_Test>:
	TransmitFrame(239,319,&frameBuffer);


}

void ILI9341_Test(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	//ILI9341_RGB565FillScreen(COLOR_RED);
	//ILI9341_RGB565FillScreen(COLOR_GREEN);
	//ILI9341_RGB565FillScreen(COLOR_BLUE);
	//ILI9341_RGB565FillScreen(COLOR_BLACK);
	//ILI9341_RGB565FillScreen(COLOR_WHITE);
	uint8_t i = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
	while (i<10){
 80007f6:	e006      	b.n	8000806 <ILI9341_Test+0x1a>
		ILI9341_StripeTest(i);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff3e 	bl	800067c <ILI9341_StripeTest>
		i++;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3301      	adds	r3, #1
 8000804:	71fb      	strb	r3, [r7, #7]
	while (i<10){
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b09      	cmp	r3, #9
 800080a:	d9f5      	bls.n	80007f8 <ILI9341_Test+0xc>
	}



}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <ILI9341_WriteCommand>:
#include <stdbool.h>

extern SPI_HandleTypeDef hspi1;
volatile bool DMA_Transfer_Complete = false;

void ILI9341_WriteCommand(uint8_t cmd) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 8000822:	f000 f903 	bl	8000a2c <ILI9341_CS_Low>
    ILI9341_DC_Low();  // Command mode
 8000826:	f000 f919 	bl	8000a5c <ILI9341_DC_Low>
    HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 ff94 	bl	8001758 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000830:	1df9      	adds	r1, r7, #7
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2201      	movs	r2, #1
 8000838:	4805      	ldr	r0, [pc, #20]	@ (8000850 <ILI9341_WriteCommand+0x38>)
 800083a:	f006 fd95 	bl	8007368 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 ff8a 	bl	8001758 <HAL_Delay>
    ILI9341_CS_High();
 8000844:	f000 f8fe 	bl	8000a44 <ILI9341_CS_High>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2400005c 	.word	0x2400005c

08000854 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 800085e:	f000 f8e5 	bl	8000a2c <ILI9341_CS_Low>
    ILI9341_DC_High(); // Data mode
 8000862:	f000 f907 	bl	8000a74 <ILI9341_DC_High>
    HAL_Delay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f000 ff76 	bl	8001758 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800086c:	1df9      	adds	r1, r7, #7
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <ILI9341_WriteData+0x38>)
 8000876:	f006 fd77 	bl	8007368 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 ff6c 	bl	8001758 <HAL_Delay>
    ILI9341_CS_High();
 8000880:	f000 f8e0 	bl	8000a44 <ILI9341_CS_High>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2400005c 	.word	0x2400005c

08000890 <ILI9341_WriteData16>:

void ILI9341_WriteData16(uint16_t data) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;    // High byte
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;  // Low byte
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	737b      	strb	r3, [r7, #13]
    ILI9341_CS_Low();
 80008aa:	f000 f8bf 	bl	8000a2c <ILI9341_CS_Low>
    ILI9341_DC_High();
 80008ae:	f000 f8e1 	bl	8000a74 <ILI9341_DC_High>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 80008b2:	f107 010c 	add.w	r1, r7, #12
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2202      	movs	r2, #2
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <ILI9341_WriteData16+0x3c>)
 80008be:	f006 fd53 	bl	8007368 <HAL_SPI_Transmit>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2400005c 	.word	0x2400005c

080008d0 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4604      	mov	r4, r0
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	4623      	mov	r3, r4
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	4603      	mov	r3, r0
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	803b      	strh	r3, [r7, #0]
    // Column address
    ILI9341_WriteCommand(ILI9341_CASET);
 80008ee:	202a      	movs	r0, #42	@ 0x2a
 80008f0:	f7ff ff92 	bl	8000818 <ILI9341_WriteCommand>
    ILI9341_WriteData16(x0);
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffca 	bl	8000890 <ILI9341_WriteData16>
    ILI9341_WriteData16(x1);
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffc6 	bl	8000890 <ILI9341_WriteData16>

    // Page address
    ILI9341_WriteCommand(ILI9341_PASET);
 8000904:	202b      	movs	r0, #43	@ 0x2b
 8000906:	f7ff ff87 	bl	8000818 <ILI9341_WriteCommand>
    ILI9341_WriteData16(y0);
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffbf 	bl	8000890 <ILI9341_WriteData16>
    ILI9341_WriteData16(y1);
 8000912:	883b      	ldrh	r3, [r7, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffbb 	bl	8000890 <ILI9341_WriteData16>

    // Memory write 2 frameBuffer
    ILI9341_WriteCommand(ILI9341_RAMWR);
 800091a:	202c      	movs	r0, #44	@ 0x2c
 800091c:	f7ff ff7c 	bl	8000818 <ILI9341_WriteCommand>
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <ILI9341_Init>:

void ILI9341_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 800092c:	f000 f8ae 	bl	8000a8c <ILI9341_Reset>

    // Software reset
    ILI9341_WriteCommand(ILI9341_SWRESET);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff ff71 	bl	8000818 <ILI9341_WriteCommand>
    HAL_Delay(150);
 8000936:	2096      	movs	r0, #150	@ 0x96
 8000938:	f000 ff0e 	bl	8001758 <HAL_Delay>

    // Sleep out
    ILI9341_WriteCommand(ILI9341_SLPOUT);
 800093c:	2011      	movs	r0, #17
 800093e:	f7ff ff6b 	bl	8000818 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000942:	2078      	movs	r0, #120	@ 0x78
 8000944:	f000 ff08 	bl	8001758 <HAL_Delay>
    ILI9341_WriteCommand(ILI9341_PXLFRMT);
 8000948:	203a      	movs	r0, #58	@ 0x3a
 800094a:	f7ff ff65 	bl	8000818 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);
 800094e:	2055      	movs	r0, #85	@ 0x55
 8000950:	f7ff ff80 	bl	8000854 <ILI9341_WriteData>
    ILI9341_WriteCommand(ILI9341_RGBORDER);
 8000954:	2036      	movs	r0, #54	@ 0x36
 8000956:	f7ff ff5f 	bl	8000818 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 800095a:	2008      	movs	r0, #8
 800095c:	f7ff ff7a 	bl	8000854 <ILI9341_WriteData>

    // Display on
    ILI9341_WriteCommand(ILI9341_DISPON);
 8000960:	2029      	movs	r0, #41	@ 0x29
 8000962:	f7ff ff59 	bl	8000818 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000966:	2078      	movs	r0, #120	@ 0x78
 8000968:	f000 fef6 	bl	8001758 <HAL_Delay>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <TransmitFrame>:



void TransmitFrame(uint16_t height, uint16_t width, uint8_t* frameBuffer){
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	460b      	mov	r3, r1
 800097e:	80bb      	strh	r3, [r7, #4]
    int section = 51200;
 8000980:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8000984:	613b      	str	r3, [r7, #16]
    int sectionCount = 153600/section;
 8000986:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	60fb      	str	r3, [r7, #12]
    ILI9341_SetWindow(0, 0,height, width);
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	2100      	movs	r1, #0
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff99 	bl	80008d0 <ILI9341_SetWindow>
	ILI9341_CS_Low();
 800099e:	f000 f845 	bl	8000a2c <ILI9341_CS_Low>
	ILI9341_DC_High();
 80009a2:	f000 f867 	bl	8000a74 <ILI9341_DC_High>
    for (int i = 0; i <sectionCount;i++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e01b      	b.n	80009e4 <TransmitFrame+0x74>

    	HAL_SPI_Transmit_DMA(&hspi1, &frameBuffer[i*section], section);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	461a      	mov	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	b292      	uxth	r2, r2
 80009be:	4619      	mov	r1, r3
 80009c0:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <TransmitFrame+0x88>)
 80009c2:	f006 febf 	bl	8007744 <HAL_SPI_Transmit_DMA>
        while(!DMA_Transfer_Complete);
 80009c6:	bf00      	nop
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <TransmitFrame+0x8c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f7      	bne.n	80009c8 <TransmitFrame+0x58>
        DMA_Transfer_Complete = false;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <TransmitFrame+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <sectionCount;i++){
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbdf      	blt.n	80009ac <TransmitFrame+0x3c>
    }

	ILI9341_CS_High();
 80009ec:	f000 f82a 	bl	8000a44 <ILI9341_CS_High>


}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400005c 	.word	0x2400005c
 80009fc:	24000048 	.word	0x24000048

08000a00 <HAL_SPI_TxCpltCallback>:
        HAL_SPI_Transmit(&hspi1, &test_data, 1, HAL_MAX_DELAY);
        ILI9341_CS_High();
        HAL_Delay(200);
    }
}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <HAL_SPI_TxCpltCallback+0x24>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d102      	bne.n	8000a18 <HAL_SPI_TxCpltCallback+0x18>
    	DMA_Transfer_Complete = true;
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_SPI_TxCpltCallback+0x28>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
    }
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40013000 	.word	0x40013000
 8000a28:	24000048 	.word	0x24000048

08000a2c <ILI9341_CS_Low>:
 */
#include "ili9341_config.h"
#include "ili9341_hal.h"
#include "stm32h7xx_hal.h"

void ILI9341_CS_Low(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a36:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <ILI9341_CS_Low+0x14>)
 8000a38:	f003 fd0c 	bl	8004454 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58021800 	.word	0x58021800

08000a44 <ILI9341_CS_High>:

void ILI9341_CS_High(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a4e:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <ILI9341_CS_High+0x14>)
 8000a50:	f003 fd00 	bl	8004454 <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58021800 	.word	0x58021800

08000a5c <ILI9341_DC_Low>:

void ILI9341_DC_Low(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2102      	movs	r1, #2
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <ILI9341_DC_Low+0x14>)
 8000a66:	f003 fcf5 	bl	8004454 <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58021800 	.word	0x58021800

08000a74 <ILI9341_DC_High>:

void ILI9341_DC_High(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <ILI9341_DC_High+0x14>)
 8000a7e:	f003 fce9 	bl	8004454 <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	58021800 	.word	0x58021800

08000a8c <ILI9341_Reset>:

void ILI9341_Reset(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a96:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <ILI9341_Reset+0x2c>)
 8000a98:	f003 fcdc 	bl	8004454 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f000 fe5b 	bl	8001758 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <ILI9341_Reset+0x2c>)
 8000aaa:	f003 fcd3 	bl	8004454 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000aae:	2078      	movs	r0, #120	@ 0x78
 8000ab0:	f000 fe52 	bl	8001758 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58021800 	.word	0x58021800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fdb8 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f836 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f92e 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000acc:	f000 f90c 	bl	8000ce8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ad0:	f000 f8ac 	bl	8000c2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // First test raw SPI data transmission


  // Initialize display
  ILI9341_Init();
 8000ad4:	f7ff ff28 	bl	8000928 <ILI9341_Init>
  ///ILI9341_Test();



  // Run test pattern
  ILI9341_Test();
 8000ad8:	f7ff fe88 	bl	80007ec <ILI9341_Test>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fbe1 	bl	80012a4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fbde 	bl	80012a4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f000 fbdb 	bl	80012a4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000aee:	2101      	movs	r1, #1
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fc4d 	bl	8001390 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <main+0x74>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000afc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <main+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <main+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <main+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <main+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b16:	4906      	ldr	r1, [pc, #24]	@ (8000b30 <main+0x74>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 fcc9 	bl	80014b0 <BSP_COM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <main+0x6e>
  {
    Error_Handler();
 8000b24:	f000 f99c 	bl	8000e60 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <main+0x6e>
 8000b2e:	bf00      	nop
 8000b30:	2400004c 	.word	0x2400004c

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	@ 0x70
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	224c      	movs	r2, #76	@ 0x4c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fa7a 	bl	800903c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 fa74 	bl	800903c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f003 fc97 	bl	8004488 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b62:	4a30      	ldr	r2, [pc, #192]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <SystemClock_Config+0xf0>)
 8000b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b90:	bf00      	nop
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <SystemClock_Config+0xf4>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b9e:	d1f8      	bne.n	8000b92 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bb6:	2348      	movs	r3, #72	@ 0x48
 8000bb8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fc90 	bl	80044fc <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000be2:	f000 f93d 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	233f      	movs	r3, #63	@ 0x3f
 8000be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bea:	2303      	movs	r3, #3
 8000bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 f8d0 	bl	8004db0 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000c16:	f000 f923 	bl	8000e60 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3770      	adds	r7, #112	@ 0x70
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58000400 	.word	0x58000400
 8000c28:	58024800 	.word	0x58024800

08000c2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce4 <MX_SPI1_Init+0xb8>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c5a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cbe:	f006 fa2f 	bl	8007120 <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000cc8:	f000 f8ca 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <MX_SPI1_Init+0xb4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2400005c 	.word	0x2400005c
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_DMA_Init+0x3c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <MX_DMA_Init+0x3c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_DMA_Init+0x3c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200b      	movs	r0, #11
 8000d12:	f000 fe2c 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f000 fe43 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58024400 	.word	0x58024400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b45      	ldr	r3, [pc, #276]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	4a43      	ldr	r2, [pc, #268]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4e:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	4a3c      	ldr	r2, [pc, #240]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6c:	4b39      	ldr	r3, [pc, #228]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	4a34      	ldr	r2, [pc, #208]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8a:	4b32      	ldr	r3, [pc, #200]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a25      	ldr	r2, [pc, #148]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2102      	movs	r1, #2
 8000df6:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <MX_GPIO_Init+0x130>)
 8000df8:	f003 fb2c 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ILI9341_RST_Pin|ILI9341_CS_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000e02:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0x130>)
 8000e04:	f003 fb26 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <MX_GPIO_Init+0x134>)
 8000e0e:	f003 fb21 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RST_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RST_Pin|ILI9341_CS_Pin;
 8000e12:	f249 0302 	movw	r3, #36866	@ 0x9002
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <MX_GPIO_Init+0x130>)
 8000e2c:	f003 f962 	bl	80040f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_GPIO_Init+0x134>)
 8000e48:	f003 f954 	bl	80040f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	@ 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58021800 	.word	0x58021800
 8000e5c:	58021000 	.word	0x58021000

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_MspInit+0x30>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_MspInit+0x30>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_MspInit+0x30>)
 8000e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0bc      	sub	sp, #240	@ 0xf0
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	22c0      	movs	r2, #192	@ 0xc0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 f8bb 	bl	800903c <memset>
  if(hspi->Instance==SPI1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a58      	ldr	r2, [pc, #352]	@ (800102c <HAL_SPI_MspInit+0x18c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	f040 80a8 	bne.w	8001022 <HAL_SPI_MspInit+0x182>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ed2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 faee 	bl	80054c8 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000ef2:	f7ff ffb5 	bl	8000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000efc:	4a4c      	ldr	r2, [pc, #304]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000efe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f06:	4b4a      	ldr	r3, [pc, #296]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b46      	ldr	r3, [pc, #280]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a45      	ldr	r2, [pc, #276]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f32:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a3d      	ldr	r2, [pc, #244]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <HAL_SPI_MspInit+0x190>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f50:	2320      	movs	r3, #32
 8000f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f72:	4619      	mov	r1, r3
 8000f74:	482f      	ldr	r0, [pc, #188]	@ (8001034 <HAL_SPI_MspInit+0x194>)
 8000f76:	f003 f8bd 	bl	80040f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f92:	2305      	movs	r3, #5
 8000f94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4826      	ldr	r0, [pc, #152]	@ (8001038 <HAL_SPI_MspInit+0x198>)
 8000fa0:	f003 f8a8 	bl	80040f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fa6:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_SPI_MspInit+0x1a0>)
 8000fa8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fac:	2226      	movs	r2, #38	@ 0x26
 8000fae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fb2:	2240      	movs	r2, #64	@ 0x40
 8000fb4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fdc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ff6:	4811      	ldr	r0, [pc, #68]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 8000ff8:	f000 fcee 	bl	80019d8 <HAL_DMA_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8001002:	f7ff ff2d 	bl	8000e60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a0c      	ldr	r2, [pc, #48]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 800100a:	679a      	str	r2, [r3, #120]	@ 0x78
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <HAL_SPI_MspInit+0x19c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2023      	movs	r0, #35	@ 0x23
 8001018:	f000 fca9 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800101c:	2023      	movs	r0, #35	@ 0x23
 800101e:	f000 fcc0 	bl	80019a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001022:	bf00      	nop
 8001024:	37f0      	adds	r7, #240	@ 0xf0
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020000 	.word	0x58020000
 8001038:	58020c00 	.word	0x58020c00
 800103c:	240000e4 	.word	0x240000e4
 8001040:	40020010 	.word	0x40020010

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 fb3d 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA1_Stream0_IRQHandler+0x10>)
 80010aa:	f001 fca1 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	240000e4 	.word	0x240000e4

080010b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <SPI1_IRQHandler+0x10>)
 80010be:	f006 fc83 	bl	80079c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2400005c 	.word	0x2400005c

080010cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 f9cf 	bl	8001474 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010e0:	4b43      	ldr	r3, [pc, #268]	@ (80011f0 <SystemInit+0x114>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a42      	ldr	r2, [pc, #264]	@ (80011f0 <SystemInit+0x114>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010f0:	4b40      	ldr	r3, [pc, #256]	@ (80011f4 <SystemInit+0x118>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	2b06      	cmp	r3, #6
 80010fa:	d807      	bhi.n	800110c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010fc:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <SystemInit+0x118>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 030f 	bic.w	r3, r3, #15
 8001104:	4a3b      	ldr	r2, [pc, #236]	@ (80011f4 <SystemInit+0x118>)
 8001106:	f043 0307 	orr.w	r3, r3, #7
 800110a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800110c:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <SystemInit+0x11c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a39      	ldr	r2, [pc, #228]	@ (80011f8 <SystemInit+0x11c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001118:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <SystemInit+0x11c>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800111e:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <SystemInit+0x11c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4935      	ldr	r1, [pc, #212]	@ (80011f8 <SystemInit+0x11c>)
 8001124:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <SystemInit+0x120>)
 8001126:	4013      	ands	r3, r2
 8001128:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800112a:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <SystemInit+0x118>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <SystemInit+0x118>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 030f 	bic.w	r3, r3, #15
 800113e:	4a2d      	ldr	r2, [pc, #180]	@ (80011f4 <SystemInit+0x118>)
 8001140:	f043 0307 	orr.w	r3, r3, #7
 8001144:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001146:	4b2c      	ldr	r3, [pc, #176]	@ (80011f8 <SystemInit+0x11c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800114c:	4b2a      	ldr	r3, [pc, #168]	@ (80011f8 <SystemInit+0x11c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <SystemInit+0x11c>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001158:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <SystemInit+0x11c>)
 800115a:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <SystemInit+0x124>)
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <SystemInit+0x11c>)
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <SystemInit+0x128>)
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <SystemInit+0x11c>)
 8001166:	4a28      	ldr	r2, [pc, #160]	@ (8001208 <SystemInit+0x12c>)
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <SystemInit+0x11c>)
 800116c:	2200      	movs	r2, #0
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <SystemInit+0x11c>)
 8001172:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <SystemInit+0x12c>)
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <SystemInit+0x11c>)
 8001178:	2200      	movs	r2, #0
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800117c:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <SystemInit+0x11c>)
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <SystemInit+0x12c>)
 8001180:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <SystemInit+0x11c>)
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <SystemInit+0x11c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1a      	ldr	r2, [pc, #104]	@ (80011f8 <SystemInit+0x11c>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001194:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <SystemInit+0x11c>)
 8001196:	2200      	movs	r2, #0
 8001198:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <SystemInit+0x130>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <SystemInit+0x134>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011a6:	d202      	bcs.n	80011ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <SystemInit+0x138>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <SystemInit+0x11c>)
 80011b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d113      	bne.n	80011e4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <SystemInit+0x11c>)
 80011be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011c2:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <SystemInit+0x11c>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <SystemInit+0x13c>)
 80011ce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011d2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <SystemInit+0x11c>)
 80011d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011da:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <SystemInit+0x11c>)
 80011dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	52002000 	.word	0x52002000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001200:	02020200 	.word	0x02020200
 8001204:	01ff0000 	.word	0x01ff0000
 8001208:	01010280 	.word	0x01010280
 800120c:	5c001000 	.word	0x5c001000
 8001210:	ffff0000 	.word	0xffff0000
 8001214:	51008108 	.word	0x51008108
 8001218:	52004000 	.word	0x52004000

0800121c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <ExitRun0Mode+0x2c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <ExitRun0Mode+0x2c>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800122c:	bf00      	nop
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <ExitRun0Mode+0x2c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f9      	beq.n	800122e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	58024800 	.word	0x58024800

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001288 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001250:	f7ff ffe4 	bl	800121c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff ff42 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
   ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f007 fee5 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fc1b 	bl	8000abc <main>
  bx  lr
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800128c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001290:	2400002c 	.word	0x2400002c
   ldr r2, =_sidata
 8001294:	080090f8 	.word	0x080090f8
  ldr r2, =_sbss
 8001298:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 800129c:	240001fc 	.word	0x240001fc

080012a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC3_IRQHandler>
	...

080012a4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d009      	beq.n	80012cc <BSP_LED_Init+0x28>
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d006      	beq.n	80012cc <BSP_LED_Init+0x28>
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d003      	beq.n	80012cc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012c4:	f06f 0301 	mvn.w	r3, #1
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ca:	e055      	b.n	8001378 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <BSP_LED_Init+0xe0>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <BSP_LED_Init+0xe0>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <BSP_LED_Init+0xe0>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	e021      	b.n	8001336 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10f      	bne.n	8001318 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <BSP_LED_Init+0xe0>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <BSP_LED_Init+0xe0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <BSP_LED_Init+0xe0>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	e00e      	b.n	8001336 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <BSP_LED_Init+0xe0>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <BSP_LED_Init+0xe0>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <BSP_LED_Init+0xe0>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <BSP_LED_Init+0xe4>)
 800133a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <BSP_LED_Init+0xe8>)
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	f107 0218 	add.w	r2, r7, #24
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f002 feca 	bl	80040f4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <BSP_LED_Init+0xe8>)
 8001364:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <BSP_LED_Init+0xe4>)
 800136c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	f003 f86e 	bl	8004454 <HAL_GPIO_WritePin>
  }

  return ret;
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800137a:	4618      	mov	r0, r3
 800137c:	3730      	adds	r7, #48	@ 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	58024400 	.word	0x58024400
 8001388:	080090bc 	.word	0x080090bc
 800138c:	2400000c 	.word	0x2400000c

08001390 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013a0:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <BSP_PB_Init+0xcc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a2d      	ldr	r2, [pc, #180]	@ (800145c <BSP_PB_Init+0xcc>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <BSP_PB_Init+0xcc>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <BSP_PB_Init+0xd0>)
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fe85 	bl	80040f4 <HAL_GPIO_Init>
 80013ea:	e031      	b.n	8001450 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80013ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001460 <BSP_PB_Init+0xd0>)
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fe77 	bl	80040f4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <BSP_PB_Init+0xd4>)
 800140c:	441a      	add	r2, r3
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4915      	ldr	r1, [pc, #84]	@ (8001468 <BSP_PB_Init+0xd8>)
 8001412:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f002 fe26 	bl	800406a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <BSP_PB_Init+0xd4>)
 8001424:	1898      	adds	r0, r3, r2
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a10      	ldr	r2, [pc, #64]	@ (800146c <BSP_PB_Init+0xdc>)
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	461a      	mov	r2, r3
 8001430:	2100      	movs	r1, #0
 8001432:	f002 fdfb 	bl	800402c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <BSP_PB_Init+0xe0>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	f000 fa93 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001448:	2328      	movs	r3, #40	@ 0x28
 800144a:	4618      	mov	r0, r3
 800144c:	f000 faa9 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	58024400 	.word	0x58024400
 8001460:	24000018 	.word	0x24000018
 8001464:	2400015c 	.word	0x2400015c
 8001468:	080090c4 	.word	0x080090c4
 800146c:	2400001c 	.word	0x2400001c
 8001470:	24000020 	.word	0x24000020

08001474 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <BSP_PB_IRQHandler+0x20>)
 8001484:	4413      	add	r3, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fe04 	bl	8004094 <HAL_EXTI_IRQHandler>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400015c 	.word	0x2400015c

08001498 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014c6:	f06f 0301 	mvn.w	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e018      	b.n	8001500 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2294      	movs	r2, #148	@ 0x94
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <BSP_COM_Init+0x5c>)
 80014d8:	4413      	add	r3, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f852 	bl	8001584 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2294      	movs	r2, #148	@ 0x94
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	4a08      	ldr	r2, [pc, #32]	@ (800150c <BSP_COM_Init+0x5c>)
 80014ea:	4413      	add	r3, r2
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f80e 	bl	8001510 <MX_USART3_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014fa:	f06f 0303 	mvn.w	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001500:	68fb      	ldr	r3, [r7, #12]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000164 	.word	0x24000164

08001510 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_USART3_Init+0x60>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	895b      	ldrh	r3, [r3, #10]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	899b      	ldrh	r3, [r3, #12]
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800155c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f006 fd89 	bl	8008076 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000008 	.word	0x24000008

08001574 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff8d 	bl	8001498 <BSP_PB_Callback>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <COM1_MspInit+0xa8>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <COM1_MspInit+0xa8>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <COM1_MspInit+0xa8>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <COM1_MspInit+0xa8>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <COM1_MspInit+0xa8>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <COM1_MspInit+0xa8>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <COM1_MspInit+0xa8>)
 80015ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <COM1_MspInit+0xa8>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <COM1_MspInit+0xa8>)
 80015da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80015e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015f8:	2307      	movs	r3, #7
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	@ (8001630 <COM1_MspInit+0xac>)
 8001604:	f002 fd76 	bl	80040f4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800160c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001612:	2307      	movs	r3, #7
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <COM1_MspInit+0xac>)
 800161e:	f002 fd69 	bl	80040f4 <HAL_GPIO_Init>
}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	58024400 	.word	0x58024400
 8001630:	58020c00 	.word	0x58020c00

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f98c 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001640:	f003 fd6c 	bl	800511c <HAL_RCC_GetSysClockFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_Init+0x68>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	4913      	ldr	r1, [pc, #76]	@ (80016a0 <HAL_Init+0x6c>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <HAL_Init+0x6c>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_Init+0x70>)
 8001676:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_Init+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f814 	bl	80016ac <HAL_InitTick>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e002      	b.n	8001694 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fbed 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58024400 	.word	0x58024400
 80016a0:	080090ac 	.word	0x080090ac
 80016a4:	24000004 	.word	0x24000004
 80016a8:	24000000 	.word	0x24000000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e021      	b.n	8001704 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_InitTick+0x64>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_InitTick+0x60>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f971 	bl	80019be <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f93b 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x68>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	24000028 	.word	0x24000028
 8001710:	24000000 	.word	0x24000000
 8001714:	24000024 	.word	0x24000024

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	24000028 	.word	0x24000028
 800173c:	240001f8 	.word	0x240001f8

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	240001f8 	.word	0x240001f8

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000028 	.word	0x24000028

080017a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetREVID+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0c1b      	lsrs	r3, r3, #16
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	5c001000 	.word	0x5c001000

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff feae 	bl	8001740 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e316      	b.n	800201e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a66      	ldr	r2, [pc, #408]	@ (8001b90 <HAL_DMA_Init+0x1b8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04a      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a65      	ldr	r2, [pc, #404]	@ (8001b94 <HAL_DMA_Init+0x1bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d045      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a63      	ldr	r2, [pc, #396]	@ (8001b98 <HAL_DMA_Init+0x1c0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a62      	ldr	r2, [pc, #392]	@ (8001b9c <HAL_DMA_Init+0x1c4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d03b      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5f      	ldr	r2, [pc, #380]	@ (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02c      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bac <HAL_DMA_Init+0x1d4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d027      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a59      	ldr	r2, [pc, #356]	@ (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01d      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a57      	ldr	r2, [pc, #348]	@ (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_DMA_Init+0x1e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	@ (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a53      	ldr	r2, [pc, #332]	@ (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_DMA_Init+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Init+0xbc>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_Init+0xbe>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 813b 	beq.w	8001d12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a37      	ldr	r2, [pc, #220]	@ (8001b90 <HAL_DMA_Init+0x1b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <HAL_DMA_Init+0x1bc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d045      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a34      	ldr	r2, [pc, #208]	@ (8001b98 <HAL_DMA_Init+0x1c0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a33      	ldr	r2, [pc, #204]	@ (8001b9c <HAL_DMA_Init+0x1c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d03b      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	@ (8001ba0 <HAL_DMA_Init+0x1c8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d036      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a30      	ldr	r2, [pc, #192]	@ (8001ba4 <HAL_DMA_Init+0x1cc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba8 <HAL_DMA_Init+0x1d0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02c      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	@ (8001bac <HAL_DMA_Init+0x1d4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d027      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <HAL_DMA_Init+0x1d8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb4 <HAL_DMA_Init+0x1dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d01d      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a28      	ldr	r2, [pc, #160]	@ (8001bb8 <HAL_DMA_Init+0x1e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a27      	ldr	r2, [pc, #156]	@ (8001bbc <HAL_DMA_Init+0x1e4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a25      	ldr	r2, [pc, #148]	@ (8001bc0 <HAL_DMA_Init+0x1e8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a24      	ldr	r2, [pc, #144]	@ (8001bc4 <HAL_DMA_Init+0x1ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	@ (8001bc8 <HAL_DMA_Init+0x1f0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <HAL_DMA_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <HAL_DMA_Init+0x186>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e007      	b.n	8001b6e <HAL_DMA_Init+0x196>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b6e:	e02f      	b.n	8001bd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b70:	f7ff fde6 	bl	8001740 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d928      	bls.n	8001bd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e246      	b.n	800201e <HAL_DMA_Init+0x646>
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1c8      	bne.n	8001b70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <HAL_DMA_Init+0x420>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c34:	4b71      	ldr	r3, [pc, #452]	@ (8001dfc <HAL_DMA_Init+0x424>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b71      	ldr	r3, [pc, #452]	@ (8001e00 <HAL_DMA_Init+0x428>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c40:	d328      	bcc.n	8001c94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b28      	cmp	r3, #40	@ 0x28
 8001c48:	d903      	bls.n	8001c52 <HAL_DMA_Init+0x27a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c50:	d917      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c58:	d903      	bls.n	8001c62 <HAL_DMA_Init+0x28a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b42      	cmp	r3, #66	@ 0x42
 8001c60:	d90f      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b46      	cmp	r3, #70	@ 0x46
 8001c68:	d903      	bls.n	8001c72 <HAL_DMA_Init+0x29a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b48      	cmp	r3, #72	@ 0x48
 8001c70:	d907      	bls.n	8001c82 <HAL_DMA_Init+0x2aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c78:	d905      	bls.n	8001c86 <HAL_DMA_Init+0x2ae>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b52      	cmp	r3, #82	@ 0x52
 8001c80:	d801      	bhi.n	8001c86 <HAL_DMA_Init+0x2ae>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_DMA_Init+0x2b0>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f023 0307 	bic.w	r3, r3, #7
 8001caa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d117      	bne.n	8001cee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f002 f821 	bl	8003d18 <DMA_CheckFifoParam>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	@ 0x40
 8001ce0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e197      	b.n	800201e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 ff5c 	bl	8003bb4 <DMA_CalcBaseAndBitshift>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	223f      	movs	r2, #63	@ 0x3f
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e0cd      	b.n	8001eae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	@ (8001e04 <HAL_DMA_Init+0x42c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d022      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a39      	ldr	r2, [pc, #228]	@ (8001e08 <HAL_DMA_Init+0x430>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01d      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a38      	ldr	r2, [pc, #224]	@ (8001e0c <HAL_DMA_Init+0x434>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d018      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a36      	ldr	r2, [pc, #216]	@ (8001e10 <HAL_DMA_Init+0x438>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a35      	ldr	r2, [pc, #212]	@ (8001e14 <HAL_DMA_Init+0x43c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00e      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a33      	ldr	r2, [pc, #204]	@ (8001e18 <HAL_DMA_Init+0x440>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a32      	ldr	r2, [pc, #200]	@ (8001e1c <HAL_DMA_Init+0x444>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d004      	beq.n	8001d62 <HAL_DMA_Init+0x38a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a30      	ldr	r2, [pc, #192]	@ (8001e20 <HAL_DMA_Init+0x448>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Init+0x38e>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_DMA_Init+0x390>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8097 	beq.w	8001e9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <HAL_DMA_Init+0x42c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d021      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	@ (8001e08 <HAL_DMA_Init+0x430>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01c      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <HAL_DMA_Init+0x434>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d017      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <HAL_DMA_Init+0x438>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d012      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e14 <HAL_DMA_Init+0x43c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e18 <HAL_DMA_Init+0x440>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	@ (8001e1c <HAL_DMA_Init+0x444>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_Init+0x3e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_DMA_Init+0x448>)
 8001dba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_DMA_Init+0x44c>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b40      	cmp	r3, #64	@ 0x40
 8001de2:	d021      	beq.n	8001e28 <HAL_DMA_Init+0x450>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b80      	cmp	r3, #128	@ 0x80
 8001dea:	d102      	bne.n	8001df2 <HAL_DMA_Init+0x41a>
 8001dec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001df0:	e01b      	b.n	8001e2a <HAL_DMA_Init+0x452>
 8001df2:	2300      	movs	r3, #0
 8001df4:	e019      	b.n	8001e2a <HAL_DMA_Init+0x452>
 8001df6:	bf00      	nop
 8001df8:	fe10803f 	.word	0xfe10803f
 8001dfc:	5c001000 	.word	0x5c001000
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	58025408 	.word	0x58025408
 8001e08:	5802541c 	.word	0x5802541c
 8001e0c:	58025430 	.word	0x58025430
 8001e10:	58025444 	.word	0x58025444
 8001e14:	58025458 	.word	0x58025458
 8001e18:	5802546c 	.word	0x5802546c
 8001e1c:	58025480 	.word	0x58025480
 8001e20:	58025494 	.word	0x58025494
 8001e24:	fffe000f 	.word	0xfffe000f
 8001e28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002028 <HAL_DMA_Init+0x650>)
 8001e70:	4413      	add	r3, r2
 8001e72:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_DMA_Init+0x654>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f001 fe97 	bl	8003bb4 <DMA_CalcBaseAndBitshift>
 8001e86:	4603      	mov	r3, r0
 8001e88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e008      	b.n	8001eae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0b7      	b.n	800201e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5f      	ldr	r2, [pc, #380]	@ (8002030 <HAL_DMA_Init+0x658>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d072      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8002034 <HAL_DMA_Init+0x65c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d06d      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	@ (8002038 <HAL_DMA_Init+0x660>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d068      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	@ (800203c <HAL_DMA_Init+0x664>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d063      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a59      	ldr	r2, [pc, #356]	@ (8002040 <HAL_DMA_Init+0x668>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d05e      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	@ (8002044 <HAL_DMA_Init+0x66c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d059      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a56      	ldr	r2, [pc, #344]	@ (8002048 <HAL_DMA_Init+0x670>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d054      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	@ (800204c <HAL_DMA_Init+0x674>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04f      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a53      	ldr	r2, [pc, #332]	@ (8002050 <HAL_DMA_Init+0x678>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d04a      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	@ (8002054 <HAL_DMA_Init+0x67c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d045      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a50      	ldr	r2, [pc, #320]	@ (8002058 <HAL_DMA_Init+0x680>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d040      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4e      	ldr	r2, [pc, #312]	@ (800205c <HAL_DMA_Init+0x684>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d03b      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002060 <HAL_DMA_Init+0x688>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d036      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_DMA_Init+0x68c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d031      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_DMA_Init+0x690>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d02c      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a48      	ldr	r2, [pc, #288]	@ (800206c <HAL_DMA_Init+0x694>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_DMA_Init+0x698>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d022      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	@ (8002074 <HAL_DMA_Init+0x69c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a44      	ldr	r2, [pc, #272]	@ (8002078 <HAL_DMA_Init+0x6a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d018      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a42      	ldr	r2, [pc, #264]	@ (800207c <HAL_DMA_Init+0x6a4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a41      	ldr	r2, [pc, #260]	@ (8002080 <HAL_DMA_Init+0x6a8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00e      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3f      	ldr	r2, [pc, #252]	@ (8002084 <HAL_DMA_Init+0x6ac>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d009      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002088 <HAL_DMA_Init+0x6b0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_DMA_Init+0x5c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3c      	ldr	r2, [pc, #240]	@ (800208c <HAL_DMA_Init+0x6b4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_DMA_Init+0x5ca>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_DMA_Init+0x5cc>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d032      	beq.n	800200e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 ff31 	bl	8003e10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b80      	cmp	r3, #128	@ 0x80
 8001fb4:	d102      	bne.n	8001fbc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_DMA_Init+0x624>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d80c      	bhi.n	8001ffc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f001 ffae 	bl	8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e008      	b.n	800200e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	a7fdabf8 	.word	0xa7fdabf8
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	40020010 	.word	0x40020010
 8002034:	40020028 	.word	0x40020028
 8002038:	40020040 	.word	0x40020040
 800203c:	40020058 	.word	0x40020058
 8002040:	40020070 	.word	0x40020070
 8002044:	40020088 	.word	0x40020088
 8002048:	400200a0 	.word	0x400200a0
 800204c:	400200b8 	.word	0x400200b8
 8002050:	40020410 	.word	0x40020410
 8002054:	40020428 	.word	0x40020428
 8002058:	40020440 	.word	0x40020440
 800205c:	40020458 	.word	0x40020458
 8002060:	40020470 	.word	0x40020470
 8002064:	40020488 	.word	0x40020488
 8002068:	400204a0 	.word	0x400204a0
 800206c:	400204b8 	.word	0x400204b8
 8002070:	58025408 	.word	0x58025408
 8002074:	5802541c 	.word	0x5802541c
 8002078:	58025430 	.word	0x58025430
 800207c:	58025444 	.word	0x58025444
 8002080:	58025458 	.word	0x58025458
 8002084:	5802546c 	.word	0x5802546c
 8002088:	58025480 	.word	0x58025480
 800208c:	58025494 	.word	0x58025494

08002090 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e226      	b.n	80024fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_DMA_Start_IT+0x2a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e21f      	b.n	80024fa <HAL_DMA_Start_IT+0x46a>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	f040 820a 	bne.w	80024e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a68      	ldr	r2, [pc, #416]	@ (8002284 <HAL_DMA_Start_IT+0x1f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04a      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	@ (8002288 <HAL_DMA_Start_IT+0x1f8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d045      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_DMA_Start_IT+0x1fc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d040      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a63      	ldr	r2, [pc, #396]	@ (8002290 <HAL_DMA_Start_IT+0x200>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d03b      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a62      	ldr	r2, [pc, #392]	@ (8002294 <HAL_DMA_Start_IT+0x204>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d036      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a60      	ldr	r2, [pc, #384]	@ (8002298 <HAL_DMA_Start_IT+0x208>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d031      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5f      	ldr	r2, [pc, #380]	@ (800229c <HAL_DMA_Start_IT+0x20c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d02c      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5d      	ldr	r2, [pc, #372]	@ (80022a0 <HAL_DMA_Start_IT+0x210>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d027      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5c      	ldr	r2, [pc, #368]	@ (80022a4 <HAL_DMA_Start_IT+0x214>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5a      	ldr	r2, [pc, #360]	@ (80022a8 <HAL_DMA_Start_IT+0x218>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01d      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a59      	ldr	r2, [pc, #356]	@ (80022ac <HAL_DMA_Start_IT+0x21c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <HAL_DMA_Start_IT+0x220>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a56      	ldr	r2, [pc, #344]	@ (80022b4 <HAL_DMA_Start_IT+0x224>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a54      	ldr	r2, [pc, #336]	@ (80022b8 <HAL_DMA_Start_IT+0x228>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a53      	ldr	r2, [pc, #332]	@ (80022bc <HAL_DMA_Start_IT+0x22c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_DMA_Start_IT+0xee>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a51      	ldr	r2, [pc, #324]	@ (80022c0 <HAL_DMA_Start_IT+0x230>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <HAL_DMA_Start_IT+0x100>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e007      	b.n	80021a0 <HAL_DMA_Start_IT+0x110>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f001 fb58 	bl	800385c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a34      	ldr	r2, [pc, #208]	@ (8002284 <HAL_DMA_Start_IT+0x1f4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04a      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <HAL_DMA_Start_IT+0x1f8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d045      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_DMA_Start_IT+0x1fc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d040      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <HAL_DMA_Start_IT+0x200>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d03b      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002294 <HAL_DMA_Start_IT+0x204>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d036      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <HAL_DMA_Start_IT+0x208>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d031      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <HAL_DMA_Start_IT+0x20c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02c      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <HAL_DMA_Start_IT+0x210>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d027      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_DMA_Start_IT+0x214>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d022      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_DMA_Start_IT+0x218>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d01d      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a25      	ldr	r2, [pc, #148]	@ (80022ac <HAL_DMA_Start_IT+0x21c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d018      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <HAL_DMA_Start_IT+0x220>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d013      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_DMA_Start_IT+0x224>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00e      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <HAL_DMA_Start_IT+0x228>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <HAL_DMA_Start_IT+0x22c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Start_IT+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_DMA_Start_IT+0x230>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_DMA_Start_IT+0x1c0>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_DMA_Start_IT+0x1c2>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d036      	beq.n	80022c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 021e 	bic.w	r2, r3, #30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0216 	orr.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03e      	beq.n	80022f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e035      	b.n	80022f0 <HAL_DMA_Start_IT+0x260>
 8002284:	40020010 	.word	0x40020010
 8002288:	40020028 	.word	0x40020028
 800228c:	40020040 	.word	0x40020040
 8002290:	40020058 	.word	0x40020058
 8002294:	40020070 	.word	0x40020070
 8002298:	40020088 	.word	0x40020088
 800229c:	400200a0 	.word	0x400200a0
 80022a0:	400200b8 	.word	0x400200b8
 80022a4:	40020410 	.word	0x40020410
 80022a8:	40020428 	.word	0x40020428
 80022ac:	40020440 	.word	0x40020440
 80022b0:	40020458 	.word	0x40020458
 80022b4:	40020470 	.word	0x40020470
 80022b8:	40020488 	.word	0x40020488
 80022bc:	400204a0 	.word	0x400204a0
 80022c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020e 	bic.w	r2, r3, #14
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 020a 	orr.w	r2, r2, #10
 80022d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0204 	orr.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a83      	ldr	r2, [pc, #524]	@ (8002504 <HAL_DMA_Start_IT+0x474>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d072      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a82      	ldr	r2, [pc, #520]	@ (8002508 <HAL_DMA_Start_IT+0x478>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d06d      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a80      	ldr	r2, [pc, #512]	@ (800250c <HAL_DMA_Start_IT+0x47c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d068      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7f      	ldr	r2, [pc, #508]	@ (8002510 <HAL_DMA_Start_IT+0x480>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d063      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7d      	ldr	r2, [pc, #500]	@ (8002514 <HAL_DMA_Start_IT+0x484>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d05e      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7c      	ldr	r2, [pc, #496]	@ (8002518 <HAL_DMA_Start_IT+0x488>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d059      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7a      	ldr	r2, [pc, #488]	@ (800251c <HAL_DMA_Start_IT+0x48c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d054      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a79      	ldr	r2, [pc, #484]	@ (8002520 <HAL_DMA_Start_IT+0x490>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04f      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a77      	ldr	r2, [pc, #476]	@ (8002524 <HAL_DMA_Start_IT+0x494>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a76      	ldr	r2, [pc, #472]	@ (8002528 <HAL_DMA_Start_IT+0x498>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a74      	ldr	r2, [pc, #464]	@ (800252c <HAL_DMA_Start_IT+0x49c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a73      	ldr	r2, [pc, #460]	@ (8002530 <HAL_DMA_Start_IT+0x4a0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a71      	ldr	r2, [pc, #452]	@ (8002534 <HAL_DMA_Start_IT+0x4a4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a70      	ldr	r2, [pc, #448]	@ (8002538 <HAL_DMA_Start_IT+0x4a8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6e      	ldr	r2, [pc, #440]	@ (800253c <HAL_DMA_Start_IT+0x4ac>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6d      	ldr	r2, [pc, #436]	@ (8002540 <HAL_DMA_Start_IT+0x4b0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6b      	ldr	r2, [pc, #428]	@ (8002544 <HAL_DMA_Start_IT+0x4b4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6a      	ldr	r2, [pc, #424]	@ (8002548 <HAL_DMA_Start_IT+0x4b8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a68      	ldr	r2, [pc, #416]	@ (800254c <HAL_DMA_Start_IT+0x4bc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a67      	ldr	r2, [pc, #412]	@ (8002550 <HAL_DMA_Start_IT+0x4c0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a65      	ldr	r2, [pc, #404]	@ (8002554 <HAL_DMA_Start_IT+0x4c4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a64      	ldr	r2, [pc, #400]	@ (8002558 <HAL_DMA_Start_IT+0x4c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a62      	ldr	r2, [pc, #392]	@ (800255c <HAL_DMA_Start_IT+0x4cc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a61      	ldr	r2, [pc, #388]	@ (8002560 <HAL_DMA_Start_IT+0x4d0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Start_IT+0x354>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_Start_IT+0x356>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002406:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800241e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a37      	ldr	r2, [pc, #220]	@ (8002504 <HAL_DMA_Start_IT+0x474>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d04a      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a36      	ldr	r2, [pc, #216]	@ (8002508 <HAL_DMA_Start_IT+0x478>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d045      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_DMA_Start_IT+0x47c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d040      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a33      	ldr	r2, [pc, #204]	@ (8002510 <HAL_DMA_Start_IT+0x480>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d03b      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <HAL_DMA_Start_IT+0x484>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d036      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a30      	ldr	r2, [pc, #192]	@ (8002518 <HAL_DMA_Start_IT+0x488>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d031      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_DMA_Start_IT+0x48c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02c      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2d      	ldr	r2, [pc, #180]	@ (8002520 <HAL_DMA_Start_IT+0x490>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d027      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <HAL_DMA_Start_IT+0x494>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d022      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2a      	ldr	r2, [pc, #168]	@ (8002528 <HAL_DMA_Start_IT+0x498>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d01d      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a28      	ldr	r2, [pc, #160]	@ (800252c <HAL_DMA_Start_IT+0x49c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d018      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <HAL_DMA_Start_IT+0x4a0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <HAL_DMA_Start_IT+0x4a4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00e      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_DMA_Start_IT+0x4a8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_DMA_Start_IT+0x4ac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Start_IT+0x430>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <HAL_DMA_Start_IT+0x4b0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d108      	bne.n	80024d2 <HAL_DMA_Start_IT+0x442>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e012      	b.n	80024f8 <HAL_DMA_Start_IT+0x468>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e009      	b.n	80024f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40020010 	.word	0x40020010
 8002508:	40020028 	.word	0x40020028
 800250c:	40020040 	.word	0x40020040
 8002510:	40020058 	.word	0x40020058
 8002514:	40020070 	.word	0x40020070
 8002518:	40020088 	.word	0x40020088
 800251c:	400200a0 	.word	0x400200a0
 8002520:	400200b8 	.word	0x400200b8
 8002524:	40020410 	.word	0x40020410
 8002528:	40020428 	.word	0x40020428
 800252c:	40020440 	.word	0x40020440
 8002530:	40020458 	.word	0x40020458
 8002534:	40020470 	.word	0x40020470
 8002538:	40020488 	.word	0x40020488
 800253c:	400204a0 	.word	0x400204a0
 8002540:	400204b8 	.word	0x400204b8
 8002544:	58025408 	.word	0x58025408
 8002548:	5802541c 	.word	0x5802541c
 800254c:	58025430 	.word	0x58025430
 8002550:	58025444 	.word	0x58025444
 8002554:	58025458 	.word	0x58025458
 8002558:	5802546c 	.word	0x5802546c
 800255c:	58025480 	.word	0x58025480
 8002560:	58025494 	.word	0x58025494

08002564 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e237      	b.n	80029e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d004      	beq.n	800258c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2280      	movs	r2, #128	@ 0x80
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e22c      	b.n	80029e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_DMA_Abort_IT+0x1a0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_DMA_Abort_IT+0x1a4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d045      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a59      	ldr	r2, [pc, #356]	@ (800270c <HAL_DMA_Abort_IT+0x1a8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d040      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_DMA_Abort_IT+0x1ac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d03b      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_DMA_Abort_IT+0x1b0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d036      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a55      	ldr	r2, [pc, #340]	@ (8002718 <HAL_DMA_Abort_IT+0x1b4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d031      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a53      	ldr	r2, [pc, #332]	@ (800271c <HAL_DMA_Abort_IT+0x1b8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02c      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_DMA_Abort_IT+0x1bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d027      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_DMA_Abort_IT+0x1c0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d022      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <HAL_DMA_Abort_IT+0x1c4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d01d      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_DMA_Abort_IT+0x1c8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d018      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_DMA_Abort_IT+0x1cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4a      	ldr	r2, [pc, #296]	@ (8002734 <HAL_DMA_Abort_IT+0x1d0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a49      	ldr	r2, [pc, #292]	@ (8002738 <HAL_DMA_Abort_IT+0x1d4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a47      	ldr	r2, [pc, #284]	@ (800273c <HAL_DMA_Abort_IT+0x1d8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_DMA_Abort_IT+0xc8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a46      	ldr	r2, [pc, #280]	@ (8002740 <HAL_DMA_Abort_IT+0x1dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Abort_IT+0xcc>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_DMA_Abort_IT+0xce>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8086 	beq.w	8002744 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2f      	ldr	r2, [pc, #188]	@ (8002704 <HAL_DMA_Abort_IT+0x1a0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d04a      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2e      	ldr	r2, [pc, #184]	@ (8002708 <HAL_DMA_Abort_IT+0x1a4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d045      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <HAL_DMA_Abort_IT+0x1a8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d040      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <HAL_DMA_Abort_IT+0x1ac>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d03b      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a29      	ldr	r2, [pc, #164]	@ (8002714 <HAL_DMA_Abort_IT+0x1b0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d036      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a28      	ldr	r2, [pc, #160]	@ (8002718 <HAL_DMA_Abort_IT+0x1b4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d031      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a26      	ldr	r2, [pc, #152]	@ (800271c <HAL_DMA_Abort_IT+0x1b8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02c      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a25      	ldr	r2, [pc, #148]	@ (8002720 <HAL_DMA_Abort_IT+0x1bc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d027      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a23      	ldr	r2, [pc, #140]	@ (8002724 <HAL_DMA_Abort_IT+0x1c0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d022      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <HAL_DMA_Abort_IT+0x1c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d01d      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a20      	ldr	r2, [pc, #128]	@ (800272c <HAL_DMA_Abort_IT+0x1c8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d018      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002730 <HAL_DMA_Abort_IT+0x1cc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <HAL_DMA_Abort_IT+0x1d0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00e      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <HAL_DMA_Abort_IT+0x1d4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d009      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1a      	ldr	r2, [pc, #104]	@ (800273c <HAL_DMA_Abort_IT+0x1d8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x17c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a19      	ldr	r2, [pc, #100]	@ (8002740 <HAL_DMA_Abort_IT+0x1dc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d108      	bne.n	80026f2 <HAL_DMA_Abort_IT+0x18e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e178      	b.n	80029e4 <HAL_DMA_Abort_IT+0x480>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e16f      	b.n	80029e4 <HAL_DMA_Abort_IT+0x480>
 8002704:	40020010 	.word	0x40020010
 8002708:	40020028 	.word	0x40020028
 800270c:	40020040 	.word	0x40020040
 8002710:	40020058 	.word	0x40020058
 8002714:	40020070 	.word	0x40020070
 8002718:	40020088 	.word	0x40020088
 800271c:	400200a0 	.word	0x400200a0
 8002720:	400200b8 	.word	0x400200b8
 8002724:	40020410 	.word	0x40020410
 8002728:	40020428 	.word	0x40020428
 800272c:	40020440 	.word	0x40020440
 8002730:	40020458 	.word	0x40020458
 8002734:	40020470 	.word	0x40020470
 8002738:	40020488 	.word	0x40020488
 800273c:	400204a0 	.word	0x400204a0
 8002740:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020e 	bic.w	r2, r2, #14
 8002752:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6c      	ldr	r2, [pc, #432]	@ (800290c <HAL_DMA_Abort_IT+0x3a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d04a      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6b      	ldr	r2, [pc, #428]	@ (8002910 <HAL_DMA_Abort_IT+0x3ac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d045      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_DMA_Abort_IT+0x3b0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d040      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a68      	ldr	r2, [pc, #416]	@ (8002918 <HAL_DMA_Abort_IT+0x3b4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d03b      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a66      	ldr	r2, [pc, #408]	@ (800291c <HAL_DMA_Abort_IT+0x3b8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d036      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_DMA_Abort_IT+0x3bc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d031      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a63      	ldr	r2, [pc, #396]	@ (8002924 <HAL_DMA_Abort_IT+0x3c0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02c      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a62      	ldr	r2, [pc, #392]	@ (8002928 <HAL_DMA_Abort_IT+0x3c4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d027      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a60      	ldr	r2, [pc, #384]	@ (800292c <HAL_DMA_Abort_IT+0x3c8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002930 <HAL_DMA_Abort_IT+0x3cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01d      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_DMA_Abort_IT+0x3d0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d018      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002938 <HAL_DMA_Abort_IT+0x3d4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5a      	ldr	r2, [pc, #360]	@ (800293c <HAL_DMA_Abort_IT+0x3d8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00e      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a59      	ldr	r2, [pc, #356]	@ (8002940 <HAL_DMA_Abort_IT+0x3dc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a57      	ldr	r2, [pc, #348]	@ (8002944 <HAL_DMA_Abort_IT+0x3e0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x290>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a56      	ldr	r2, [pc, #344]	@ (8002948 <HAL_DMA_Abort_IT+0x3e4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d108      	bne.n	8002806 <HAL_DMA_Abort_IT+0x2a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e007      	b.n	8002816 <HAL_DMA_Abort_IT+0x2b2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3c      	ldr	r2, [pc, #240]	@ (800290c <HAL_DMA_Abort_IT+0x3a8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d072      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	@ (8002910 <HAL_DMA_Abort_IT+0x3ac>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d06d      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a39      	ldr	r2, [pc, #228]	@ (8002914 <HAL_DMA_Abort_IT+0x3b0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d068      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a37      	ldr	r2, [pc, #220]	@ (8002918 <HAL_DMA_Abort_IT+0x3b4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d063      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a36      	ldr	r2, [pc, #216]	@ (800291c <HAL_DMA_Abort_IT+0x3b8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a34      	ldr	r2, [pc, #208]	@ (8002920 <HAL_DMA_Abort_IT+0x3bc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d059      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a33      	ldr	r2, [pc, #204]	@ (8002924 <HAL_DMA_Abort_IT+0x3c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d054      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a31      	ldr	r2, [pc, #196]	@ (8002928 <HAL_DMA_Abort_IT+0x3c4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d04f      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a30      	ldr	r2, [pc, #192]	@ (800292c <HAL_DMA_Abort_IT+0x3c8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2e      	ldr	r2, [pc, #184]	@ (8002930 <HAL_DMA_Abort_IT+0x3cc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2d      	ldr	r2, [pc, #180]	@ (8002934 <HAL_DMA_Abort_IT+0x3d0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2b      	ldr	r2, [pc, #172]	@ (8002938 <HAL_DMA_Abort_IT+0x3d4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <HAL_DMA_Abort_IT+0x3d8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a28      	ldr	r2, [pc, #160]	@ (8002940 <HAL_DMA_Abort_IT+0x3dc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a27      	ldr	r2, [pc, #156]	@ (8002944 <HAL_DMA_Abort_IT+0x3e0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	@ (8002948 <HAL_DMA_Abort_IT+0x3e4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a24      	ldr	r2, [pc, #144]	@ (800294c <HAL_DMA_Abort_IT+0x3e8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a22      	ldr	r2, [pc, #136]	@ (8002950 <HAL_DMA_Abort_IT+0x3ec>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <HAL_DMA_Abort_IT+0x3f0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <HAL_DMA_Abort_IT+0x3f4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1e      	ldr	r2, [pc, #120]	@ (800295c <HAL_DMA_Abort_IT+0x3f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002960 <HAL_DMA_Abort_IT+0x3fc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <HAL_DMA_Abort_IT+0x400>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_DMA_Abort_IT+0x404>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d132      	bne.n	800296c <HAL_DMA_Abort_IT+0x408>
 8002906:	2301      	movs	r3, #1
 8002908:	e031      	b.n	800296e <HAL_DMA_Abort_IT+0x40a>
 800290a:	bf00      	nop
 800290c:	40020010 	.word	0x40020010
 8002910:	40020028 	.word	0x40020028
 8002914:	40020040 	.word	0x40020040
 8002918:	40020058 	.word	0x40020058
 800291c:	40020070 	.word	0x40020070
 8002920:	40020088 	.word	0x40020088
 8002924:	400200a0 	.word	0x400200a0
 8002928:	400200b8 	.word	0x400200b8
 800292c:	40020410 	.word	0x40020410
 8002930:	40020428 	.word	0x40020428
 8002934:	40020440 	.word	0x40020440
 8002938:	40020458 	.word	0x40020458
 800293c:	40020470 	.word	0x40020470
 8002940:	40020488 	.word	0x40020488
 8002944:	400204a0 	.word	0x400204a0
 8002948:	400204b8 	.word	0x400204b8
 800294c:	58025408 	.word	0x58025408
 8002950:	5802541c 	.word	0x5802541c
 8002954:	58025430 	.word	0x58025430
 8002958:	58025444 	.word	0x58025444
 800295c:	58025458 	.word	0x58025458
 8002960:	5802546c 	.word	0x5802546c
 8002964:	58025480 	.word	0x58025480
 8002968:	58025494 	.word	0x58025494
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002980:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2201      	movs	r2, #1
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop

080029f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	@ 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029fc:	4b67      	ldr	r3, [pc, #412]	@ (8002b9c <HAL_DMA_IRQHandler+0x1ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a67      	ldr	r2, [pc, #412]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1b0>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	0a9b      	lsrs	r3, r3, #10
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1b4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1b8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bac <HAL_DMA_IRQHandler+0x1bc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1c0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a59      	ldr	r2, [pc, #356]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1c4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a57      	ldr	r2, [pc, #348]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1c8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a56      	ldr	r2, [pc, #344]	@ (8002bbc <HAL_DMA_IRQHandler+0x1cc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a54      	ldr	r2, [pc, #336]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1d0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a53      	ldr	r2, [pc, #332]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1d4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a51      	ldr	r2, [pc, #324]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_DMA_IRQHandler+0x1dc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_DMA_IRQHandler+0x1ec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xd2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a48      	ldr	r2, [pc, #288]	@ (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0xd6>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_DMA_IRQHandler+0xd8>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 842b 	beq.w	8003324 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a2 	beq.w	8002c28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1b4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d04a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1b8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d045      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2b      	ldr	r2, [pc, #172]	@ (8002bac <HAL_DMA_IRQHandler+0x1bc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d040      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1c0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d03b      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a28      	ldr	r2, [pc, #160]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1c4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d036      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1c8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a25      	ldr	r2, [pc, #148]	@ (8002bbc <HAL_DMA_IRQHandler+0x1cc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02c      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1d0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d027      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a22      	ldr	r2, [pc, #136]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1d4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d022      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01d      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_DMA_IRQHandler+0x1dc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d018      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00e      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	@ (8002bdc <HAL_DMA_IRQHandler+0x1ec>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d12f      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x1f4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e02e      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x208>
 8002b9a:	bf00      	nop
 8002b9c:	24000000 	.word	0x24000000
 8002ba0:	1b4e81b5 	.word	0x1b4e81b5
 8002ba4:	40020010 	.word	0x40020010
 8002ba8:	40020028 	.word	0x40020028
 8002bac:	40020040 	.word	0x40020040
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	40020070 	.word	0x40020070
 8002bb8:	40020088 	.word	0x40020088
 8002bbc:	400200a0 	.word	0x400200a0
 8002bc0:	400200b8 	.word	0x400200b8
 8002bc4:	40020410 	.word	0x40020410
 8002bc8:	40020428 	.word	0x40020428
 8002bcc:	40020440 	.word	0x40020440
 8002bd0:	40020458 	.word	0x40020458
 8002bd4:	40020470 	.word	0x40020470
 8002bd8:	40020488 	.word	0x40020488
 8002bdc:	400204a0 	.word	0x400204a0
 8002be0:	400204b8 	.word	0x400204b8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d015      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2208      	movs	r2, #8
 8002c16:	409a      	lsls	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06e      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a69      	ldr	r2, [pc, #420]	@ (8002de8 <HAL_DMA_IRQHandler+0x3f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a67      	ldr	r2, [pc, #412]	@ (8002dec <HAL_DMA_IRQHandler+0x3fc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <HAL_DMA_IRQHandler+0x400>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a64      	ldr	r2, [pc, #400]	@ (8002df4 <HAL_DMA_IRQHandler+0x404>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a63      	ldr	r2, [pc, #396]	@ (8002df8 <HAL_DMA_IRQHandler+0x408>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a61      	ldr	r2, [pc, #388]	@ (8002dfc <HAL_DMA_IRQHandler+0x40c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_DMA_IRQHandler+0x410>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5e      	ldr	r2, [pc, #376]	@ (8002e04 <HAL_DMA_IRQHandler+0x414>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_DMA_IRQHandler+0x418>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5b      	ldr	r2, [pc, #364]	@ (8002e0c <HAL_DMA_IRQHandler+0x41c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e10 <HAL_DMA_IRQHandler+0x420>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	@ (8002e14 <HAL_DMA_IRQHandler+0x424>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a57      	ldr	r2, [pc, #348]	@ (8002e18 <HAL_DMA_IRQHandler+0x428>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a55      	ldr	r2, [pc, #340]	@ (8002e1c <HAL_DMA_IRQHandler+0x42c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a54      	ldr	r2, [pc, #336]	@ (8002e20 <HAL_DMA_IRQHandler+0x430>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_IRQHandler+0x2ee>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a52      	ldr	r2, [pc, #328]	@ (8002e24 <HAL_DMA_IRQHandler+0x434>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x304>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e003      	b.n	8002cfc <HAL_DMA_IRQHandler+0x30c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f043 0202 	orr.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2204      	movs	r2, #4
 8002d26:	409a      	lsls	r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 808f 	beq.w	8002e50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <HAL_DMA_IRQHandler+0x3f8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d04a      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2a      	ldr	r2, [pc, #168]	@ (8002dec <HAL_DMA_IRQHandler+0x3fc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d045      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a29      	ldr	r2, [pc, #164]	@ (8002df0 <HAL_DMA_IRQHandler+0x400>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d040      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a27      	ldr	r2, [pc, #156]	@ (8002df4 <HAL_DMA_IRQHandler+0x404>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03b      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a26      	ldr	r2, [pc, #152]	@ (8002df8 <HAL_DMA_IRQHandler+0x408>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_DMA_IRQHandler+0x40c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <HAL_DMA_IRQHandler+0x410>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02c      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <HAL_DMA_IRQHandler+0x414>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d027      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a20      	ldr	r2, [pc, #128]	@ (8002e08 <HAL_DMA_IRQHandler+0x418>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_DMA_IRQHandler+0x41c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e10 <HAL_DMA_IRQHandler+0x420>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_DMA_IRQHandler+0x424>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <HAL_DMA_IRQHandler+0x428>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a18      	ldr	r2, [pc, #96]	@ (8002e1c <HAL_DMA_IRQHandler+0x42c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <HAL_DMA_IRQHandler+0x430>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x3e2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <HAL_DMA_IRQHandler+0x434>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12a      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x438>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e023      	b.n	8002e30 <HAL_DMA_IRQHandler+0x440>
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2210      	movs	r2, #16
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a6 	beq.w	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a85      	ldr	r2, [pc, #532]	@ (8003080 <HAL_DMA_IRQHandler+0x690>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04a      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a83      	ldr	r2, [pc, #524]	@ (8003084 <HAL_DMA_IRQHandler+0x694>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d045      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a82      	ldr	r2, [pc, #520]	@ (8003088 <HAL_DMA_IRQHandler+0x698>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a80      	ldr	r2, [pc, #512]	@ (800308c <HAL_DMA_IRQHandler+0x69c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d03b      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <HAL_DMA_IRQHandler+0x6a0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d036      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003094 <HAL_DMA_IRQHandler+0x6a4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8003098 <HAL_DMA_IRQHandler+0x6a8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02c      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800309c <HAL_DMA_IRQHandler+0x6ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d027      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a79      	ldr	r2, [pc, #484]	@ (80030a0 <HAL_DMA_IRQHandler+0x6b0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a77      	ldr	r2, [pc, #476]	@ (80030a4 <HAL_DMA_IRQHandler+0x6b4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a76      	ldr	r2, [pc, #472]	@ (80030a8 <HAL_DMA_IRQHandler+0x6b8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a74      	ldr	r2, [pc, #464]	@ (80030ac <HAL_DMA_IRQHandler+0x6bc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a73      	ldr	r2, [pc, #460]	@ (80030b0 <HAL_DMA_IRQHandler+0x6c0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a71      	ldr	r2, [pc, #452]	@ (80030b4 <HAL_DMA_IRQHandler+0x6c4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a70      	ldr	r2, [pc, #448]	@ (80030b8 <HAL_DMA_IRQHandler+0x6c8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x516>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_DMA_IRQHandler+0x6cc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10a      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x52c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e009      	b.n	8002f30 <HAL_DMA_IRQHandler+0x540>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d03e      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d024      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e01f      	b.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01b      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	e016      	b.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0208 	bic.w	r2, r2, #8
 8002fa0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2220      	movs	r2, #32
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8110 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8003080 <HAL_DMA_IRQHandler+0x690>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_DMA_IRQHandler+0x694>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <HAL_DMA_IRQHandler+0x698>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_DMA_IRQHandler+0x69c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <HAL_DMA_IRQHandler+0x6a0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_DMA_IRQHandler+0x6a4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d031      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <HAL_DMA_IRQHandler+0x6a8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_IRQHandler+0x6ac>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a20      	ldr	r2, [pc, #128]	@ (80030a0 <HAL_DMA_IRQHandler+0x6b0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d022      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_DMA_IRQHandler+0x6b4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01d      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <HAL_DMA_IRQHandler+0x6b8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_DMA_IRQHandler+0x6bc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_DMA_IRQHandler+0x6c0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_DMA_IRQHandler+0x6c4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_DMA_IRQHandler+0x6c8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_IRQHandler+0x678>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <HAL_DMA_IRQHandler+0x6cc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d12b      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x6d0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e02a      	b.n	80030d4 <HAL_DMA_IRQHandler+0x6e4>
 800307e:	bf00      	nop
 8003080:	40020010 	.word	0x40020010
 8003084:	40020028 	.word	0x40020028
 8003088:	40020040 	.word	0x40020040
 800308c:	40020058 	.word	0x40020058
 8003090:	40020070 	.word	0x40020070
 8003094:	40020088 	.word	0x40020088
 8003098:	400200a0 	.word	0x400200a0
 800309c:	400200b8 	.word	0x400200b8
 80030a0:	40020410 	.word	0x40020410
 80030a4:	40020428 	.word	0x40020428
 80030a8:	40020440 	.word	0x40020440
 80030ac:	40020458 	.word	0x40020458
 80030b0:	40020470 	.word	0x40020470
 80030b4:	40020488 	.word	0x40020488
 80030b8:	400204a0 	.word	0x400204a0
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8087 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2220      	movs	r2, #32
 80030e4:	409a      	lsls	r2, r3
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d139      	bne.n	800316a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0216 	bic.w	r2, r2, #22
 8003104:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003114:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_DMA_IRQHandler+0x736>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	223f      	movs	r2, #63	@ 0x3f
 8003140:	409a      	lsls	r2, r3
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 834a 	beq.w	80037f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
          }
          return;
 8003168:	e344      	b.n	80037f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d018      	beq.n	80031aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02c      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
 8003196:	e027      	b.n	80031e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	e01e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8306 	beq.w	80037fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8088 	beq.w	8003310 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7a      	ldr	r2, [pc, #488]	@ (80033f8 <HAL_DMA_IRQHandler+0xa08>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d04a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a79      	ldr	r2, [pc, #484]	@ (80033fc <HAL_DMA_IRQHandler+0xa0c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d045      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a77      	ldr	r2, [pc, #476]	@ (8003400 <HAL_DMA_IRQHandler+0xa10>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d040      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a76      	ldr	r2, [pc, #472]	@ (8003404 <HAL_DMA_IRQHandler+0xa14>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d03b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a74      	ldr	r2, [pc, #464]	@ (8003408 <HAL_DMA_IRQHandler+0xa18>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d036      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a73      	ldr	r2, [pc, #460]	@ (800340c <HAL_DMA_IRQHandler+0xa1c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d031      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a71      	ldr	r2, [pc, #452]	@ (8003410 <HAL_DMA_IRQHandler+0xa20>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02c      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a70      	ldr	r2, [pc, #448]	@ (8003414 <HAL_DMA_IRQHandler+0xa24>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d027      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	@ (8003418 <HAL_DMA_IRQHandler+0xa28>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6d      	ldr	r2, [pc, #436]	@ (800341c <HAL_DMA_IRQHandler+0xa2c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d01d      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6b      	ldr	r2, [pc, #428]	@ (8003420 <HAL_DMA_IRQHandler+0xa30>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6a      	ldr	r2, [pc, #424]	@ (8003424 <HAL_DMA_IRQHandler+0xa34>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a68      	ldr	r2, [pc, #416]	@ (8003428 <HAL_DMA_IRQHandler+0xa38>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a67      	ldr	r2, [pc, #412]	@ (800342c <HAL_DMA_IRQHandler+0xa3c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a65      	ldr	r2, [pc, #404]	@ (8003430 <HAL_DMA_IRQHandler+0xa40>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x8b8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a64      	ldr	r2, [pc, #400]	@ (8003434 <HAL_DMA_IRQHandler+0xa44>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <HAL_DMA_IRQHandler+0x8ca>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e007      	b.n	80032ca <HAL_DMA_IRQHandler+0x8da>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d307      	bcc.n	80032e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f2      	bne.n	80032ca <HAL_DMA_IRQHandler+0x8da>
 80032e4:	e000      	b.n	80032e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032fe:	e003      	b.n	8003308 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8272 	beq.w	80037fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	e26c      	b.n	80037fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a43      	ldr	r2, [pc, #268]	@ (8003438 <HAL_DMA_IRQHandler+0xa48>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a42      	ldr	r2, [pc, #264]	@ (800343c <HAL_DMA_IRQHandler+0xa4c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a40      	ldr	r2, [pc, #256]	@ (8003440 <HAL_DMA_IRQHandler+0xa50>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3f      	ldr	r2, [pc, #252]	@ (8003444 <HAL_DMA_IRQHandler+0xa54>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3d      	ldr	r2, [pc, #244]	@ (8003448 <HAL_DMA_IRQHandler+0xa58>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a3c      	ldr	r2, [pc, #240]	@ (800344c <HAL_DMA_IRQHandler+0xa5c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3a      	ldr	r2, [pc, #232]	@ (8003450 <HAL_DMA_IRQHandler+0xa60>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_IRQHandler+0x984>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a39      	ldr	r2, [pc, #228]	@ (8003454 <HAL_DMA_IRQHandler+0xa64>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_DMA_IRQHandler+0x988>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_DMA_IRQHandler+0x98a>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 823f 	beq.w	80037fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80cd 	beq.w	8003538 <HAL_DMA_IRQHandler+0xb48>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80c7 	beq.w	8003538 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2204      	movs	r2, #4
 80033b4:	409a      	lsls	r2, r3
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d049      	beq.n	8003458 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8210 	beq.w	80037f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e0:	e20a      	b.n	80037f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8206 	beq.w	80037f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033f4:	e200      	b.n	80037f8 <HAL_DMA_IRQHandler+0xe08>
 80033f6:	bf00      	nop
 80033f8:	40020010 	.word	0x40020010
 80033fc:	40020028 	.word	0x40020028
 8003400:	40020040 	.word	0x40020040
 8003404:	40020058 	.word	0x40020058
 8003408:	40020070 	.word	0x40020070
 800340c:	40020088 	.word	0x40020088
 8003410:	400200a0 	.word	0x400200a0
 8003414:	400200b8 	.word	0x400200b8
 8003418:	40020410 	.word	0x40020410
 800341c:	40020428 	.word	0x40020428
 8003420:	40020440 	.word	0x40020440
 8003424:	40020458 	.word	0x40020458
 8003428:	40020470 	.word	0x40020470
 800342c:	40020488 	.word	0x40020488
 8003430:	400204a0 	.word	0x400204a0
 8003434:	400204b8 	.word	0x400204b8
 8003438:	58025408 	.word	0x58025408
 800343c:	5802541c 	.word	0x5802541c
 8003440:	58025430 	.word	0x58025430
 8003444:	58025444 	.word	0x58025444
 8003448:	58025458 	.word	0x58025458
 800344c:	5802546c 	.word	0x5802546c
 8003450:	58025480 	.word	0x58025480
 8003454:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d160      	bne.n	8003524 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7f      	ldr	r2, [pc, #508]	@ (8003664 <HAL_DMA_IRQHandler+0xc74>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	@ (8003668 <HAL_DMA_IRQHandler+0xc78>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7c      	ldr	r2, [pc, #496]	@ (800366c <HAL_DMA_IRQHandler+0xc7c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7a      	ldr	r2, [pc, #488]	@ (8003670 <HAL_DMA_IRQHandler+0xc80>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a79      	ldr	r2, [pc, #484]	@ (8003674 <HAL_DMA_IRQHandler+0xc84>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a77      	ldr	r2, [pc, #476]	@ (8003678 <HAL_DMA_IRQHandler+0xc88>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a76      	ldr	r2, [pc, #472]	@ (800367c <HAL_DMA_IRQHandler+0xc8c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a74      	ldr	r2, [pc, #464]	@ (8003680 <HAL_DMA_IRQHandler+0xc90>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	@ (8003684 <HAL_DMA_IRQHandler+0xc94>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a71      	ldr	r2, [pc, #452]	@ (8003688 <HAL_DMA_IRQHandler+0xc98>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a70      	ldr	r2, [pc, #448]	@ (800368c <HAL_DMA_IRQHandler+0xc9c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003690 <HAL_DMA_IRQHandler+0xca0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6d      	ldr	r2, [pc, #436]	@ (8003694 <HAL_DMA_IRQHandler+0xca4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003698 <HAL_DMA_IRQHandler+0xca8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6a      	ldr	r2, [pc, #424]	@ (800369c <HAL_DMA_IRQHandler+0xcac>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_IRQHandler+0xb12>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a68      	ldr	r2, [pc, #416]	@ (80036a0 <HAL_DMA_IRQHandler+0xcb0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d108      	bne.n	8003514 <HAL_DMA_IRQHandler+0xb24>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <HAL_DMA_IRQHandler+0xb34>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8165 	beq.w	80037f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003536:	e15f      	b.n	80037f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2202      	movs	r2, #2
 8003542:	409a      	lsls	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80c5 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xce8>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80bf 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2202      	movs	r2, #2
 8003564:	409a      	lsls	r2, r3
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 813a 	beq.w	80037fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003590:	e134      	b.n	80037fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8130 	beq.w	80037fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035a4:	e12a      	b.n	80037fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 8089 	bne.w	80036c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003664 <HAL_DMA_IRQHandler+0xc74>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04a      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a29      	ldr	r2, [pc, #164]	@ (8003668 <HAL_DMA_IRQHandler+0xc78>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d045      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a28      	ldr	r2, [pc, #160]	@ (800366c <HAL_DMA_IRQHandler+0xc7c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d040      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a26      	ldr	r2, [pc, #152]	@ (8003670 <HAL_DMA_IRQHandler+0xc80>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d03b      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <HAL_DMA_IRQHandler+0xc84>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d036      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a23      	ldr	r2, [pc, #140]	@ (8003678 <HAL_DMA_IRQHandler+0xc88>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d031      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a22      	ldr	r2, [pc, #136]	@ (800367c <HAL_DMA_IRQHandler+0xc8c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d02c      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a20      	ldr	r2, [pc, #128]	@ (8003680 <HAL_DMA_IRQHandler+0xc90>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d027      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1f      	ldr	r2, [pc, #124]	@ (8003684 <HAL_DMA_IRQHandler+0xc94>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1d      	ldr	r2, [pc, #116]	@ (8003688 <HAL_DMA_IRQHandler+0xc98>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1c      	ldr	r2, [pc, #112]	@ (800368c <HAL_DMA_IRQHandler+0xc9c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <HAL_DMA_IRQHandler+0xca0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a19      	ldr	r2, [pc, #100]	@ (8003694 <HAL_DMA_IRQHandler+0xca4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <HAL_DMA_IRQHandler+0xca8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_DMA_IRQHandler+0xcac>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_IRQHandler+0xc62>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <HAL_DMA_IRQHandler+0xcb0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d128      	bne.n	80036a4 <HAL_DMA_IRQHandler+0xcb4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0214 	bic.w	r2, r2, #20
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e027      	b.n	80036b4 <HAL_DMA_IRQHandler+0xcc4>
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 020a 	bic.w	r2, r2, #10
 80036b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8097 	beq.w	80037fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d6:	e091      	b.n	80037fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8088 	beq.w	80037fe <HAL_DMA_IRQHandler+0xe0e>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8082 	beq.w	80037fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a41      	ldr	r2, [pc, #260]	@ (8003804 <HAL_DMA_IRQHandler+0xe14>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d04a      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a3f      	ldr	r2, [pc, #252]	@ (8003808 <HAL_DMA_IRQHandler+0xe18>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d045      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3e      	ldr	r2, [pc, #248]	@ (800380c <HAL_DMA_IRQHandler+0xe1c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d040      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3c      	ldr	r2, [pc, #240]	@ (8003810 <HAL_DMA_IRQHandler+0xe20>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d03b      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3b      	ldr	r2, [pc, #236]	@ (8003814 <HAL_DMA_IRQHandler+0xe24>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d036      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a39      	ldr	r2, [pc, #228]	@ (8003818 <HAL_DMA_IRQHandler+0xe28>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d031      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a38      	ldr	r2, [pc, #224]	@ (800381c <HAL_DMA_IRQHandler+0xe2c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d02c      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a36      	ldr	r2, [pc, #216]	@ (8003820 <HAL_DMA_IRQHandler+0xe30>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a35      	ldr	r2, [pc, #212]	@ (8003824 <HAL_DMA_IRQHandler+0xe34>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a33      	ldr	r2, [pc, #204]	@ (8003828 <HAL_DMA_IRQHandler+0xe38>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01d      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a32      	ldr	r2, [pc, #200]	@ (800382c <HAL_DMA_IRQHandler+0xe3c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a30      	ldr	r2, [pc, #192]	@ (8003830 <HAL_DMA_IRQHandler+0xe40>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2f      	ldr	r2, [pc, #188]	@ (8003834 <HAL_DMA_IRQHandler+0xe44>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2d      	ldr	r2, [pc, #180]	@ (8003838 <HAL_DMA_IRQHandler+0xe48>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2c      	ldr	r2, [pc, #176]	@ (800383c <HAL_DMA_IRQHandler+0xe4c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_DMA_IRQHandler+0xdaa>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <HAL_DMA_IRQHandler+0xe50>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <HAL_DMA_IRQHandler+0xdbc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 021c 	bic.w	r2, r2, #28
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e007      	b.n	80037bc <HAL_DMA_IRQHandler+0xdcc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 020e 	bic.w	r2, r2, #14
 80037ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e004      	b.n	80037fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037f4:	bf00      	nop
 80037f6:	e002      	b.n	80037fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037fe:	3728      	adds	r7, #40	@ 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8

08003844 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a78 <DMA_SetConfig+0x21c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d072      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7d      	ldr	r2, [pc, #500]	@ (8003a7c <DMA_SetConfig+0x220>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d06d      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a80 <DMA_SetConfig+0x224>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d068      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7a      	ldr	r2, [pc, #488]	@ (8003a84 <DMA_SetConfig+0x228>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d063      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <DMA_SetConfig+0x22c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d05e      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a77      	ldr	r2, [pc, #476]	@ (8003a8c <DMA_SetConfig+0x230>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d059      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a76      	ldr	r2, [pc, #472]	@ (8003a90 <DMA_SetConfig+0x234>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d054      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a74      	ldr	r2, [pc, #464]	@ (8003a94 <DMA_SetConfig+0x238>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d04f      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	@ (8003a98 <DMA_SetConfig+0x23c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d04a      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a71      	ldr	r2, [pc, #452]	@ (8003a9c <DMA_SetConfig+0x240>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d045      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a70      	ldr	r2, [pc, #448]	@ (8003aa0 <DMA_SetConfig+0x244>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d040      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa4 <DMA_SetConfig+0x248>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d03b      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa8 <DMA_SetConfig+0x24c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d036      	beq.n	8003966 <DMA_SetConfig+0x10a>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	@ (8003aac <DMA_SetConfig+0x250>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d031      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab0 <DMA_SetConfig+0x254>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d02c      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	@ (8003ab4 <DMA_SetConfig+0x258>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d027      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a67      	ldr	r2, [pc, #412]	@ (8003ab8 <DMA_SetConfig+0x25c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d022      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a65      	ldr	r2, [pc, #404]	@ (8003abc <DMA_SetConfig+0x260>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01d      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a64      	ldr	r2, [pc, #400]	@ (8003ac0 <DMA_SetConfig+0x264>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d018      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a62      	ldr	r2, [pc, #392]	@ (8003ac4 <DMA_SetConfig+0x268>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a61      	ldr	r2, [pc, #388]	@ (8003ac8 <DMA_SetConfig+0x26c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00e      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5f      	ldr	r2, [pc, #380]	@ (8003acc <DMA_SetConfig+0x270>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d009      	beq.n	8003966 <DMA_SetConfig+0x10a>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5e      	ldr	r2, [pc, #376]	@ (8003ad0 <DMA_SetConfig+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <DMA_SetConfig+0x10a>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad4 <DMA_SetConfig+0x278>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <DMA_SetConfig+0x10e>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <DMA_SetConfig+0x110>
 800396a:	2300      	movs	r3, #0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003978:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800398a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a39      	ldr	r2, [pc, #228]	@ (8003a78 <DMA_SetConfig+0x21c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a38      	ldr	r2, [pc, #224]	@ (8003a7c <DMA_SetConfig+0x220>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a36      	ldr	r2, [pc, #216]	@ (8003a80 <DMA_SetConfig+0x224>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a35      	ldr	r2, [pc, #212]	@ (8003a84 <DMA_SetConfig+0x228>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a33      	ldr	r2, [pc, #204]	@ (8003a88 <DMA_SetConfig+0x22c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a32      	ldr	r2, [pc, #200]	@ (8003a8c <DMA_SetConfig+0x230>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a30      	ldr	r2, [pc, #192]	@ (8003a90 <DMA_SetConfig+0x234>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a94 <DMA_SetConfig+0x238>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a98 <DMA_SetConfig+0x23c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2c      	ldr	r2, [pc, #176]	@ (8003a9c <DMA_SetConfig+0x240>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa0 <DMA_SetConfig+0x244>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a29      	ldr	r2, [pc, #164]	@ (8003aa4 <DMA_SetConfig+0x248>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a27      	ldr	r2, [pc, #156]	@ (8003aa8 <DMA_SetConfig+0x24c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <DMA_SetConfig+0x250>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a24      	ldr	r2, [pc, #144]	@ (8003ab0 <DMA_SetConfig+0x254>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <DMA_SetConfig+0x1d0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a23      	ldr	r2, [pc, #140]	@ (8003ab4 <DMA_SetConfig+0x258>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <DMA_SetConfig+0x1d4>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <DMA_SetConfig+0x1d6>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d059      	beq.n	8003aea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	223f      	movs	r2, #63	@ 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	d138      	bne.n	8003ad8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a76:	e086      	b.n	8003b86 <DMA_SetConfig+0x32a>
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]
}
 8003ae8:	e04d      	b.n	8003b86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <DMA_SetConfig+0x338>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d022      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <DMA_SetConfig+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01d      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <DMA_SetConfig+0x340>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d018      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ba0 <DMA_SetConfig+0x344>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a23      	ldr	r2, [pc, #140]	@ (8003ba4 <DMA_SetConfig+0x348>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <DMA_SetConfig+0x34c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d009      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <DMA_SetConfig+0x350>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <DMA_SetConfig+0x2de>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb0 <DMA_SetConfig+0x354>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <DMA_SetConfig+0x2e2>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <DMA_SetConfig+0x2e4>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d108      	bne.n	8003b76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	60da      	str	r2, [r3, #12]
}
 8003b74:	e007      	b.n	8003b86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	58025408 	.word	0x58025408
 8003b98:	5802541c 	.word	0x5802541c
 8003b9c:	58025430 	.word	0x58025430
 8003ba0:	58025444 	.word	0x58025444
 8003ba4:	58025458 	.word	0x58025458
 8003ba8:	5802546c 	.word	0x5802546c
 8003bac:	58025480 	.word	0x58025480
 8003bb0:	58025494 	.word	0x58025494

08003bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a42      	ldr	r2, [pc, #264]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x118>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a41      	ldr	r2, [pc, #260]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x128>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x134>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a36      	ldr	r2, [pc, #216]	@ (8003cec <DMA_CalcBaseAndBitshift+0x138>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a35      	ldr	r2, [pc, #212]	@ (8003cf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x140>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <DMA_CalcBaseAndBitshift+0x144>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <DMA_CalcBaseAndBitshift+0x148>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2f      	ldr	r2, [pc, #188]	@ (8003d00 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <DMA_CalcBaseAndBitshift+0x150>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <DMA_CalcBaseAndBitshift+0x154>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <DMA_CalcBaseAndBitshift+0xac>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <DMA_CalcBaseAndBitshift+0xae>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d024      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3b10      	subs	r3, #16
 8003c6e:	4a27      	ldr	r2, [pc, #156]	@ (8003d0c <DMA_CalcBaseAndBitshift+0x158>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	4a24      	ldr	r2, [pc, #144]	@ (8003d10 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	461a      	mov	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d908      	bls.n	8003ca0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b1f      	ldr	r3, [pc, #124]	@ (8003d14 <DMA_CalcBaseAndBitshift+0x160>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c9e:	e00d      	b.n	8003cbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <DMA_CalcBaseAndBitshift+0x160>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cae:	e005      	b.n	8003cbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
 8003d0c:	aaaaaaab 	.word	0xaaaaaaab
 8003d10:	080090c8 	.word	0x080090c8
 8003d14:	fffffc00 	.word	0xfffffc00

08003d18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d120      	bne.n	8003d6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d858      	bhi.n	8003de6 <DMA_CheckFifoParam+0xce>
 8003d34:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <DMA_CheckFifoParam+0x24>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d5f 	.word	0x08003d5f
 8003d44:	08003d4d 	.word	0x08003d4d
 8003d48:	08003de7 	.word	0x08003de7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d048      	beq.n	8003dea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5c:	e045      	b.n	8003dea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d66:	d142      	bne.n	8003dee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d6c:	e03f      	b.n	8003dee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d76:	d123      	bne.n	8003dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d838      	bhi.n	8003df2 <DMA_CheckFifoParam+0xda>
 8003d80:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <DMA_CheckFifoParam+0x70>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003d9f 	.word	0x08003d9f
 8003d90:	08003d99 	.word	0x08003d99
 8003d94:	08003db1 	.word	0x08003db1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9c:	e030      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dae:	e022      	b.n	8003df6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dbe:	e01c      	b.n	8003dfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d902      	bls.n	8003dce <DMA_CheckFifoParam+0xb6>
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d003      	beq.n	8003dd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dcc:	e018      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003dd2:	e015      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
    break;
 8003de4:	e00b      	b.n	8003dfe <DMA_CheckFifoParam+0xe6>
        break;
 8003de6:	bf00      	nop
 8003de8:	e00a      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dea:	bf00      	nop
 8003dec:	e008      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dee:	bf00      	nop
 8003df0:	e006      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
    break;
 8003dfe:	bf00      	nop
    }
  }

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a36      	ldr	r2, [pc, #216]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a35      	ldr	r2, [pc, #212]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a33      	ldr	r2, [pc, #204]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01a      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3b08      	subs	r3, #8
 8003e80:	4a28      	ldr	r2, [pc, #160]	@ (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4b26      	ldr	r3, [pc, #152]	@ (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003eac:	e024      	b.n	8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3b10      	subs	r3, #16
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d806      	bhi.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	@ (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ee8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	58025408 	.word	0x58025408
 8003f08:	5802541c 	.word	0x5802541c
 8003f0c:	58025430 	.word	0x58025430
 8003f10:	58025444 	.word	0x58025444
 8003f14:	58025458 	.word	0x58025458
 8003f18:	5802546c 	.word	0x5802546c
 8003f1c:	58025480 	.word	0x58025480
 8003f20:	58025494 	.word	0x58025494
 8003f24:	cccccccd 	.word	0xcccccccd
 8003f28:	16009600 	.word	0x16009600
 8003f2c:	58025880 	.word	0x58025880
 8003f30:	aaaaaaab 	.word	0xaaaaaaab
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	4002040f 	.word	0x4002040f
 8003f3c:	10008200 	.word	0x10008200
 8003f40:	40020880 	.word	0x40020880

08003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d04a      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d847      	bhi.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a24      	ldr	r2, [pc, #144]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4b17      	ldr	r3, [pc, #92]	@ (800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fce:	e009      	b.n	8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	@ (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fe2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	58025408 	.word	0x58025408
 8004000:	5802541c 	.word	0x5802541c
 8004004:	58025430 	.word	0x58025430
 8004008:	58025444 	.word	0x58025444
 800400c:	58025458 	.word	0x58025458
 8004010:	5802546c 	.word	0x5802546c
 8004014:	58025480 	.word	0x58025480
 8004018:	58025494 	.word	0x58025494
 800401c:	1600963f 	.word	0x1600963f
 8004020:	58025940 	.word	0x58025940
 8004024:	1000823f 	.word	0x1000823f
 8004028:	40020940 	.word	0x40020940

0800402c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	460b      	mov	r3, r1
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e00a      	b.n	800405e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004048:	7afb      	ldrb	r3, [r7, #11]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]
      break;
 8004054:	e002      	b.n	800405c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
      break;
 800405a:	bf00      	nop
  }

  return status;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
}
 800405e:	4618      	mov	r0, r3
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e003      	b.n	8004086 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2201      	movs	r2, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	011a      	lsls	r2, r3, #4
 80040bc:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <HAL_EXTI_IRQHandler+0x5c>)
 80040be:	4413      	add	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4798      	blx	r3
    }
  }
}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	58000088 	.word	0x58000088

080040f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	@ 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004102:	4b89      	ldr	r3, [pc, #548]	@ (8004328 <HAL_GPIO_Init+0x234>)
 8004104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004106:	e194      	b.n	8004432 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8186 	beq.w	800442c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d005      	beq.n	8004138 <HAL_GPIO_Init+0x44>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d130      	bne.n	800419a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800416e:	2201      	movs	r2, #1
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0201 	and.w	r2, r3, #1
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d017      	beq.n	80041d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d123      	bne.n	800422a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80e0 	beq.w	800442c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426c:	4b2f      	ldr	r3, [pc, #188]	@ (800432c <HAL_GPIO_Init+0x238>)
 800426e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004272:	4a2e      	ldr	r2, [pc, #184]	@ (800432c <HAL_GPIO_Init+0x238>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800427c:	4b2b      	ldr	r3, [pc, #172]	@ (800432c <HAL_GPIO_Init+0x238>)
 800427e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428a:	4a29      	ldr	r2, [pc, #164]	@ (8004330 <HAL_GPIO_Init+0x23c>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a20      	ldr	r2, [pc, #128]	@ (8004334 <HAL_GPIO_Init+0x240>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d052      	beq.n	800435c <HAL_GPIO_Init+0x268>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004338 <HAL_GPIO_Init+0x244>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_GPIO_Init+0x22e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_GPIO_Init+0x248>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d02b      	beq.n	800431e <HAL_GPIO_Init+0x22a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <HAL_GPIO_Init+0x24c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d025      	beq.n	800431a <HAL_GPIO_Init+0x226>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004344 <HAL_GPIO_Init+0x250>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <HAL_GPIO_Init+0x222>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004348 <HAL_GPIO_Init+0x254>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x21e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	@ (800434c <HAL_GPIO_Init+0x258>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x21a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <HAL_GPIO_Init+0x25c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x216>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <HAL_GPIO_Init+0x260>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x212>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a17      	ldr	r2, [pc, #92]	@ (8004358 <HAL_GPIO_Init+0x264>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x20e>
 80042fe:	2309      	movs	r3, #9
 8004300:	e02d      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004302:	230a      	movs	r3, #10
 8004304:	e02b      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004306:	2308      	movs	r3, #8
 8004308:	e029      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800430a:	2307      	movs	r3, #7
 800430c:	e027      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800430e:	2306      	movs	r3, #6
 8004310:	e025      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004312:	2305      	movs	r3, #5
 8004314:	e023      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004316:	2304      	movs	r3, #4
 8004318:	e021      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800431a:	2303      	movs	r3, #3
 800431c:	e01f      	b.n	800435e <HAL_GPIO_Init+0x26a>
 800431e:	2302      	movs	r3, #2
 8004320:	e01d      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004322:	2301      	movs	r3, #1
 8004324:	e01b      	b.n	800435e <HAL_GPIO_Init+0x26a>
 8004326:	bf00      	nop
 8004328:	58000080 	.word	0x58000080
 800432c:	58024400 	.word	0x58024400
 8004330:	58000400 	.word	0x58000400
 8004334:	58020000 	.word	0x58020000
 8004338:	58020400 	.word	0x58020400
 800433c:	58020800 	.word	0x58020800
 8004340:	58020c00 	.word	0x58020c00
 8004344:	58021000 	.word	0x58021000
 8004348:	58021400 	.word	0x58021400
 800434c:	58021800 	.word	0x58021800
 8004350:	58021c00 	.word	0x58021c00
 8004354:	58022000 	.word	0x58022000
 8004358:	58022400 	.word	0x58022400
 800435c:	2300      	movs	r3, #0
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	f002 0203 	and.w	r2, r2, #3
 8004364:	0092      	lsls	r2, r2, #2
 8004366:	4093      	lsls	r3, r2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800436e:	4938      	ldr	r1, [pc, #224]	@ (8004450 <HAL_GPIO_Init+0x35c>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3301      	adds	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f ae63 	bne.w	8004108 <HAL_GPIO_Init+0x14>
  }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3724      	adds	r7, #36	@ 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	58000400 	.word	0x58000400

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004470:	e003      	b.n	800447a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	041a      	lsls	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_PWREx_ConfigSupply+0x70>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d00a      	beq.n	80044b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800449c:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <HAL_PWREx_ConfigSupply+0x70>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e01f      	b.n	80044ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e01d      	b.n	80044ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044b2:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <HAL_PWREx_ConfigSupply+0x70>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	490f      	ldr	r1, [pc, #60]	@ (80044f8 <HAL_PWREx_ConfigSupply+0x70>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044c2:	f7fd f93d 	bl	8001740 <HAL_GetTick>
 80044c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044c8:	e009      	b.n	80044de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044ca:	f7fd f939 	bl	8001740 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044d8:	d901      	bls.n	80044de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e007      	b.n	80044ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_PWREx_ConfigSupply+0x70>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ea:	d1ee      	bne.n	80044ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	58024800 	.word	0x58024800

080044fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08c      	sub	sp, #48	@ 0x30
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f000 bc48 	b.w	8004da0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8088 	beq.w	800462e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b99      	ldr	r3, [pc, #612]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004528:	4b96      	ldr	r3, [pc, #600]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	2b10      	cmp	r3, #16
 8004532:	d007      	beq.n	8004544 <HAL_RCC_OscConfig+0x48>
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	2b18      	cmp	r3, #24
 8004538:	d111      	bne.n	800455e <HAL_RCC_OscConfig+0x62>
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b8f      	ldr	r3, [pc, #572]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d06d      	beq.n	800462c <HAL_RCC_OscConfig+0x130>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d169      	bne.n	800462c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f000 bc21 	b.w	8004da0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x7a>
 8004568:	4b86      	ldr	r3, [pc, #536]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a85      	ldr	r2, [pc, #532]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800456e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e02e      	b.n	80045d4 <HAL_RCC_OscConfig+0xd8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x9c>
 800457e:	4b81      	ldr	r3, [pc, #516]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a80      	ldr	r2, [pc, #512]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b7e      	ldr	r3, [pc, #504]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7d      	ldr	r2, [pc, #500]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01d      	b.n	80045d4 <HAL_RCC_OscConfig+0xd8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0xc0>
 80045a2:	4b78      	ldr	r3, [pc, #480]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a77      	ldr	r2, [pc, #476]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b75      	ldr	r3, [pc, #468]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a74      	ldr	r2, [pc, #464]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0xd8>
 80045bc:	4b71      	ldr	r3, [pc, #452]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a70      	ldr	r2, [pc, #448]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a6d      	ldr	r2, [pc, #436]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd f8b0 	bl	8001740 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd f8ac 	bl	8001740 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	@ 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e3d4      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045f6:	4b63      	ldr	r3, [pc, #396]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0xe8>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd f89c 	bl	8001740 <HAL_GetTick>
 8004608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd f898 	bl	8001740 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	@ 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e3c0      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800461e:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x110>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80ca 	beq.w	80047d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463c:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004644:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004646:	4b4f      	ldr	r3, [pc, #316]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_RCC_OscConfig+0x166>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b18      	cmp	r3, #24
 8004656:	d156      	bne.n	8004706 <HAL_RCC_OscConfig+0x20a>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d151      	bne.n	8004706 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004662:	4b48      	ldr	r3, [pc, #288]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x17e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e392      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800467a:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 0219 	bic.w	r2, r3, #25
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	493f      	ldr	r1, [pc, #252]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd f858 	bl	8001740 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fd f854 	bl	8001740 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e37c      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046a6:	4b37      	ldr	r3, [pc, #220]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	f7fd f875 	bl	80017a0 <HAL_GetREVID>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046bc:	4293      	cmp	r3, r2
 80046be:	d817      	bhi.n	80046f0 <HAL_RCC_OscConfig+0x1f4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d108      	bne.n	80046da <HAL_RCC_OscConfig+0x1de>
 80046c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d8:	e07a      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	031b      	lsls	r3, r3, #12
 80046e8:	4926      	ldr	r1, [pc, #152]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ee:	e06f      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	4921      	ldr	r1, [pc, #132]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004704:	e064      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d047      	beq.n	800479e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800470e:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 0219 	bic.w	r2, r3, #25
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	491a      	ldr	r1, [pc, #104]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd f80e 	bl	8001740 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004728:	f7fd f80a 	bl	8001740 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e332      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800473a:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004746:	f7fd f82b 	bl	80017a0 <HAL_GetREVID>
 800474a:	4603      	mov	r3, r0
 800474c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004750:	4293      	cmp	r3, r2
 8004752:	d819      	bhi.n	8004788 <HAL_RCC_OscConfig+0x28c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d108      	bne.n	800476e <HAL_RCC_OscConfig+0x272>
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004764:	4a07      	ldr	r2, [pc, #28]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476a:	6053      	str	r3, [r2, #4]
 800476c:	e030      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
 800476e:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	031b      	lsls	r3, r3, #12
 800477c:	4901      	ldr	r1, [pc, #4]	@ (8004784 <HAL_RCC_OscConfig+0x288>)
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
 8004782:	e025      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
 8004784:	58024400 	.word	0x58024400
 8004788:	4b9a      	ldr	r3, [pc, #616]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4997      	ldr	r1, [pc, #604]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	e018      	b.n	80047d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b95      	ldr	r3, [pc, #596]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a94      	ldr	r2, [pc, #592]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc ffc9 	bl	8001740 <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fc ffc5 	bl	8001740 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e2ed      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047c4:	4b8b      	ldr	r3, [pc, #556]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80a9 	beq.w	8004930 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b85      	ldr	r3, [pc, #532]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047e8:	4b82      	ldr	r3, [pc, #520]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d007      	beq.n	8004804 <HAL_RCC_OscConfig+0x308>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b18      	cmp	r3, #24
 80047f8:	d13a      	bne.n	8004870 <HAL_RCC_OscConfig+0x374>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d135      	bne.n	8004870 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004804:	4b7b      	ldr	r3, [pc, #492]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x320>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	2b80      	cmp	r3, #128	@ 0x80
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e2c1      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800481c:	f7fc ffc0 	bl	80017a0 <HAL_GetREVID>
 8004820:	4603      	mov	r3, r0
 8004822:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004826:	4293      	cmp	r3, r2
 8004828:	d817      	bhi.n	800485a <HAL_RCC_OscConfig+0x35e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	2b20      	cmp	r3, #32
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x348>
 8004832:	4b70      	ldr	r3, [pc, #448]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800483a:	4a6e      	ldr	r2, [pc, #440]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004840:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004842:	e075      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004844:	4b6b      	ldr	r3, [pc, #428]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	069b      	lsls	r3, r3, #26
 8004852:	4968      	ldr	r1, [pc, #416]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004858:	e06a      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800485a:	4b66      	ldr	r3, [pc, #408]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	4962      	ldr	r1, [pc, #392]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	4313      	orrs	r3, r2
 800486c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800486e:	e05f      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d042      	beq.n	80048fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004878:	4b5e      	ldr	r3, [pc, #376]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5d      	ldr	r2, [pc, #372]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800487e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fc ff5c 	bl	8001740 <HAL_GetTick>
 8004888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800488c:	f7fc ff58 	bl	8001740 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e280      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800489e:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048aa:	f7fc ff79 	bl	80017a0 <HAL_GetREVID>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d817      	bhi.n	80048e8 <HAL_RCC_OscConfig+0x3ec>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d108      	bne.n	80048d2 <HAL_RCC_OscConfig+0x3d6>
 80048c0:	4b4c      	ldr	r3, [pc, #304]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048c8:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ce:	6053      	str	r3, [r2, #4]
 80048d0:	e02e      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
 80048d2:	4b48      	ldr	r3, [pc, #288]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	069b      	lsls	r3, r3, #26
 80048e0:	4944      	ldr	r1, [pc, #272]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
 80048e6:	e023      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
 80048e8:	4b42      	ldr	r3, [pc, #264]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	493f      	ldr	r1, [pc, #252]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60cb      	str	r3, [r1, #12]
 80048fc:	e018      	b.n	8004930 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048fe:	4b3d      	ldr	r3, [pc, #244]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3c      	ldr	r2, [pc, #240]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fc ff19 	bl	8001740 <HAL_GetTick>
 800490e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004912:	f7fc ff15 	bl	8001740 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e23d      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004924:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d036      	beq.n	80049aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 8004946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004948:	4a2a      	ldr	r2, [pc, #168]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fef6 	bl	8001740 <HAL_GetTick>
 8004954:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004958:	f7fc fef2 	bl	8001740 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e21a      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800496a:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x45c>
 8004976:	e018      	b.n	80049aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4b1e      	ldr	r3, [pc, #120]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497c:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fc fedc 	bl	8001740 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498c:	f7fc fed8 	bl	8001740 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e200      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800499e:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d039      	beq.n	8004a2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049ca:	f7fc feb9 	bl	8001740 <HAL_GetTick>
 80049ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049d2:	f7fc feb5 	bl	8001740 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1dd      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049e4:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x4d6>
 80049f0:	e01b      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 80049fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a04:	f7fc fe9c 	bl	8001740 <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a0c:	f7fc fe98 	bl	8001740 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e1c0      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a1e:	4b92      	ldr	r3, [pc, #584]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8081 	beq.w	8004b3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a38:	4b8c      	ldr	r3, [pc, #560]	@ (8004c6c <HAL_RCC_OscConfig+0x770>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a8b      	ldr	r2, [pc, #556]	@ (8004c6c <HAL_RCC_OscConfig+0x770>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a44:	f7fc fe7c 	bl	8001740 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fc fe78 	bl	8001740 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	@ 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1a0      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a5e:	4b83      	ldr	r3, [pc, #524]	@ (8004c6c <HAL_RCC_OscConfig+0x770>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x584>
 8004a72:	4b7d      	ldr	r3, [pc, #500]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	4a7c      	ldr	r2, [pc, #496]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7e:	e02d      	b.n	8004adc <HAL_RCC_OscConfig+0x5e0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x5a6>
 8004a88:	4b77      	ldr	r3, [pc, #476]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8c:	4a76      	ldr	r2, [pc, #472]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a8e:	f023 0301 	bic.w	r3, r3, #1
 8004a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a94:	4b74      	ldr	r3, [pc, #464]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a98:	4a73      	ldr	r2, [pc, #460]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	f023 0304 	bic.w	r3, r3, #4
 8004a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa0:	e01c      	b.n	8004adc <HAL_RCC_OscConfig+0x5e0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c8>
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aae:	4a6e      	ldr	r2, [pc, #440]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aba:	4a6b      	ldr	r2, [pc, #428]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_OscConfig+0x5e0>
 8004ac4:	4b68      	ldr	r3, [pc, #416]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac8:	4a67      	ldr	r2, [pc, #412]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad0:	4b65      	ldr	r3, [pc, #404]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad4:	4a64      	ldr	r2, [pc, #400]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fc fe2c 	bl	8001740 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fc fe28 	bl	8001740 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e14e      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b02:	4b59      	ldr	r3, [pc, #356]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <HAL_RCC_OscConfig+0x5f0>
 8004b0e:	e014      	b.n	8004b3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fe16 	bl	8001740 <HAL_GetTick>
 8004b14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fc fe12 	bl	8001740 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e138      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ee      	bne.n	8004b18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 812d 	beq.w	8004d9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b44:	4b48      	ldr	r3, [pc, #288]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b4c:	2b18      	cmp	r3, #24
 8004b4e:	f000 80bd 	beq.w	8004ccc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	f040 809e 	bne.w	8004c98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b42      	ldr	r3, [pc, #264]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a41      	ldr	r2, [pc, #260]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fdea 	bl	8001740 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fc fde6 	bl	8001740 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e10e      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b82:	4b39      	ldr	r3, [pc, #228]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8e:	4b36      	ldr	r3, [pc, #216]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <HAL_RCC_OscConfig+0x774>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4931      	ldr	r1, [pc, #196]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	3b01      	subs	r3, #1
 8004bae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bd8:	4923      	ldr	r1, [pc, #140]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bde:	4b22      	ldr	r3, [pc, #136]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bee:	4b21      	ldr	r3, [pc, #132]	@ (8004c74 <HAL_RCC_OscConfig+0x778>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bf6:	00d2      	lsls	r2, r2, #3
 8004bf8:	491b      	ldr	r1, [pc, #108]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	4917      	ldr	r1, [pc, #92]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	f023 0202 	bic.w	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1c:	4912      	ldr	r1, [pc, #72]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c22:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a10      	ldr	r2, [pc, #64]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a0d      	ldr	r2, [pc, #52]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c46:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	4a07      	ldr	r2, [pc, #28]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c52:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a04      	ldr	r2, [pc, #16]	@ (8004c68 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fc fd6f 	bl	8001740 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c64:	e011      	b.n	8004c8a <HAL_RCC_OscConfig+0x78e>
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	58024800 	.word	0x58024800
 8004c70:	fffffc0c 	.word	0xfffffc0c
 8004c74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fc fd62 	bl	8001740 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e08a      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8a:	4b47      	ldr	r3, [pc, #284]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x77c>
 8004c96:	e082      	b.n	8004d9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b43      	ldr	r3, [pc, #268]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a42      	ldr	r2, [pc, #264]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fc fd4c 	bl	8001740 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fc fd48 	bl	8001740 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e070      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x7b0>
 8004cca:	e068      	b.n	8004d9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cd2:	4b35      	ldr	r3, [pc, #212]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d031      	beq.n	8004d44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d12a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d122      	bne.n	8004d44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11a      	bne.n	8004d44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	0a5b      	lsrs	r3, r3, #9
 8004d12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d111      	bne.n	8004d44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d108      	bne.n	8004d44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e02b      	b.n	8004da0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d48:	4b17      	ldr	r3, [pc, #92]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4c:	08db      	lsrs	r3, r3, #3
 8004d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d01f      	beq.n	8004d9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d6a:	f7fc fce9 	bl	8001740 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d70:	bf00      	nop
 8004d72:	f7fc fce5 	bl	8001740 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d0f9      	beq.n	8004d72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_OscConfig+0x8b0>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d8a:	00d2      	lsls	r2, r2, #3
 8004d8c:	4906      	ldr	r1, [pc, #24]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d92:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <HAL_RCC_OscConfig+0x8ac>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3730      	adds	r7, #48	@ 0x30
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	58024400 	.word	0x58024400
 8004dac:	ffff0007 	.word	0xffff0007

08004db0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e19c      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b87      	ldr	r3, [pc, #540]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 020f 	bic.w	r2, r3, #15
 8004dda:	4985      	ldr	r1, [pc, #532]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b83      	ldr	r3, [pc, #524]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e184      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d908      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e10:	4b78      	ldr	r3, [pc, #480]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4975      	ldr	r1, [pc, #468]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d010      	beq.n	8004e50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	4b70      	ldr	r3, [pc, #448]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d908      	bls.n	8004e50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	496a      	ldr	r1, [pc, #424]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d010      	beq.n	8004e7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	4b64      	ldr	r3, [pc, #400]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d908      	bls.n	8004e7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e6c:	4b61      	ldr	r3, [pc, #388]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	495e      	ldr	r1, [pc, #376]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	4b59      	ldr	r3, [pc, #356]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d908      	bls.n	8004eac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e9a:	4b56      	ldr	r3, [pc, #344]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	4953      	ldr	r1, [pc, #332]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d908      	bls.n	8004eda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f023 020f 	bic.w	r2, r3, #15
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4947      	ldr	r1, [pc, #284]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d055      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ee6:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	4940      	ldr	r1, [pc, #256]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f00:	4b3c      	ldr	r3, [pc, #240]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d121      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0f6      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f18:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d115      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0ea      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f30:	4b30      	ldr	r3, [pc, #192]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0de      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f40:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0d6      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f50:	4b28      	ldr	r3, [pc, #160]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f023 0207 	bic.w	r2, r3, #7
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4925      	ldr	r1, [pc, #148]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f62:	f7fc fbed 	bl	8001740 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f68:	e00a      	b.n	8004f80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6a:	f7fc fbe9 	bl	8001740 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0be      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d1eb      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d208      	bcs.n	8004fc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fae:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f023 020f 	bic.w	r2, r3, #15
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	490e      	ldr	r1, [pc, #56]	@ (8004ff4 <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d214      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 020f 	bic.w	r2, r3, #15
 8004fd6:	4906      	ldr	r1, [pc, #24]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <HAL_RCC_ClockConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e086      	b.n	80050fe <HAL_RCC_ClockConfig+0x34e>
 8004ff0:	52002000 	.word	0x52002000
 8004ff4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	4b3f      	ldr	r3, [pc, #252]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005010:	429a      	cmp	r2, r3
 8005012:	d208      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005014:	4b3c      	ldr	r3, [pc, #240]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	4939      	ldr	r1, [pc, #228]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005022:	4313      	orrs	r3, r2
 8005024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d010      	beq.n	8005054 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800503e:	429a      	cmp	r2, r3
 8005040:	d208      	bcs.n	8005054 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005042:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	492e      	ldr	r1, [pc, #184]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005050:	4313      	orrs	r3, r2
 8005052:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	4b28      	ldr	r3, [pc, #160]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800506c:	429a      	cmp	r2, r3
 800506e:	d208      	bcs.n	8005082 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005070:	4b25      	ldr	r3, [pc, #148]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	4922      	ldr	r1, [pc, #136]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 800507e:	4313      	orrs	r3, r2
 8005080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509a:	429a      	cmp	r2, r3
 800509c:	d208      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800509e:	4b1a      	ldr	r3, [pc, #104]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	4917      	ldr	r1, [pc, #92]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050b0:	f000 f834 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	4912      	ldr	r1, [pc, #72]	@ (800510c <HAL_RCC_ClockConfig+0x35c>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005108 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a0d      	ldr	r2, [pc, #52]	@ (800510c <HAL_RCC_ClockConfig+0x35c>)
 80050d8:	5cd3      	ldrb	r3, [r2, r3]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
 80050e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_RCC_ClockConfig+0x360>)
 80050e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005114 <HAL_RCC_ClockConfig+0x364>)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <HAL_RCC_ClockConfig+0x368>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc fada 	bl	80016ac <HAL_InitTick>
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	58024400 	.word	0x58024400
 800510c:	080090ac 	.word	0x080090ac
 8005110:	24000004 	.word	0x24000004
 8005114:	24000000 	.word	0x24000000
 8005118:	24000024 	.word	0x24000024

0800511c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	b480      	push	{r7}
 800511e:	b089      	sub	sp, #36	@ 0x24
 8005120:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005122:	4bb3      	ldr	r3, [pc, #716]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800512a:	2b18      	cmp	r3, #24
 800512c:	f200 8155 	bhi.w	80053da <HAL_RCC_GetSysClockFreq+0x2be>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800519d 	.word	0x0800519d
 800513c:	080053db 	.word	0x080053db
 8005140:	080053db 	.word	0x080053db
 8005144:	080053db 	.word	0x080053db
 8005148:	080053db 	.word	0x080053db
 800514c:	080053db 	.word	0x080053db
 8005150:	080053db 	.word	0x080053db
 8005154:	080053db 	.word	0x080053db
 8005158:	080051c3 	.word	0x080051c3
 800515c:	080053db 	.word	0x080053db
 8005160:	080053db 	.word	0x080053db
 8005164:	080053db 	.word	0x080053db
 8005168:	080053db 	.word	0x080053db
 800516c:	080053db 	.word	0x080053db
 8005170:	080053db 	.word	0x080053db
 8005174:	080053db 	.word	0x080053db
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080053db 	.word	0x080053db
 8005180:	080053db 	.word	0x080053db
 8005184:	080053db 	.word	0x080053db
 8005188:	080053db 	.word	0x080053db
 800518c:	080053db 	.word	0x080053db
 8005190:	080053db 	.word	0x080053db
 8005194:	080053db 	.word	0x080053db
 8005198:	080051cf 	.word	0x080051cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800519c:	4b94      	ldr	r3, [pc, #592]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051a8:	4b91      	ldr	r3, [pc, #580]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	08db      	lsrs	r3, r3, #3
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	4a90      	ldr	r2, [pc, #576]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
 80051b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051ba:	e111      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051bc:	4b8d      	ldr	r3, [pc, #564]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051be:	61bb      	str	r3, [r7, #24]
      break;
 80051c0:	e10e      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051c2:	4b8d      	ldr	r3, [pc, #564]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051c4:	61bb      	str	r3, [r7, #24]
      break;
 80051c6:	e10b      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051c8:	4b8c      	ldr	r3, [pc, #560]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051ca:	61bb      	str	r3, [r7, #24]
      break;
 80051cc:	e108      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ce:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051e4:	4b82      	ldr	r3, [pc, #520]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051ee:	4b80      	ldr	r3, [pc, #512]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80e1 	beq.w	80053d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b02      	cmp	r3, #2
 8005216:	f000 8083 	beq.w	8005320 <HAL_RCC_GetSysClockFreq+0x204>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b02      	cmp	r3, #2
 800521e:	f200 80a1 	bhi.w	8005364 <HAL_RCC_GetSysClockFreq+0x248>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x114>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d056      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800522e:	e099      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005230:	4b6f      	ldr	r3, [pc, #444]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02d      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800523c:	4b6c      	ldr	r3, [pc, #432]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	08db      	lsrs	r3, r3, #3
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	4a6b      	ldr	r2, [pc, #428]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b62      	ldr	r3, [pc, #392]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a02 	vldr	s12, [r7, #8]
 800527a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005296:	e087      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005404 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052aa:	4b51      	ldr	r3, [pc, #324]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80052be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052da:	e065      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ee:	4b40      	ldr	r3, [pc, #256]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005302:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800531e:	e043      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800540c <HAL_RCC_GetSysClockFreq+0x2f0>
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b2f      	ldr	r3, [pc, #188]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005342:	ed97 6a02 	vldr	s12, [r7, #8]
 8005346:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005362:	e021      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005408 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a02 	vldr	s12, [r7, #8]
 800538a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005400 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053a8:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	0a5b      	lsrs	r3, r3, #9
 80053ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b2:	3301      	adds	r3, #1
 80053b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053cc:	ee17 3a90 	vmov	r3, s15
 80053d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053d2:	e005      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
      break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053da:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053dc:	61bb      	str	r3, [r7, #24]
      break;
 80053de:	bf00      	nop
  }

  return sysclockfreq;
 80053e0:	69bb      	ldr	r3, [r7, #24]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	003d0900 	.word	0x003d0900
 80053fc:	007a1200 	.word	0x007a1200
 8005400:	46000000 	.word	0x46000000
 8005404:	4c742400 	.word	0x4c742400
 8005408:	4a742400 	.word	0x4a742400
 800540c:	4af42400 	.word	0x4af42400

08005410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005416:	f7ff fe81 	bl	800511c <HAL_RCC_GetSysClockFreq>
 800541a:	4602      	mov	r2, r0
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x50>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	490f      	ldr	r1, [pc, #60]	@ (8005464 <HAL_RCC_GetHCLKFreq+0x54>)
 8005428:	5ccb      	ldrb	r3, [r1, r3]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005434:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x50>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	4a09      	ldr	r2, [pc, #36]	@ (8005464 <HAL_RCC_GetHCLKFreq+0x54>)
 800543e:	5cd3      	ldrb	r3, [r2, r3]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a07      	ldr	r2, [pc, #28]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x58>)
 800544c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800544e:	4a07      	ldr	r2, [pc, #28]	@ (800546c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005454:	4b04      	ldr	r3, [pc, #16]	@ (8005468 <HAL_RCC_GetHCLKFreq+0x58>)
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	58024400 	.word	0x58024400
 8005464:	080090ac 	.word	0x080090ac
 8005468:	24000004 	.word	0x24000004
 800546c:	24000000 	.word	0x24000000

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005474:	f7ff ffcc 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x24>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4904      	ldr	r1, [pc, #16]	@ (8005498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	58024400 	.word	0x58024400
 8005498:	080090ac 	.word	0x080090ac

0800549c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054a0:	f7ff ffb6 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	58024400 	.word	0x58024400
 80054c4:	080090ac 	.word	0x080090ac

080054c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054cc:	b0ca      	sub	sp, #296	@ 0x128
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054da:	2300      	movs	r3, #0
 80054dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054ec:	2500      	movs	r5, #0
 80054ee:	ea54 0305 	orrs.w	r3, r4, r5
 80054f2:	d049      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054fe:	d02f      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005500:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005504:	d828      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800550a:	d01a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800550c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005510:	d822      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800551a:	d007      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800551c:	e01c      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551e:	4bb8      	ldr	r3, [pc, #736]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	4ab7      	ldr	r2, [pc, #732]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005528:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800552a:	e01a      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005530:	3308      	adds	r3, #8
 8005532:	2102      	movs	r1, #2
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fc8f 	bl	8006e58 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005540:	e00f      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	3328      	adds	r3, #40	@ 0x28
 8005548:	2102      	movs	r1, #2
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fd36 	bl	8006fbc <RCCEx_PLL3_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005556:	e004      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800556a:	4ba5      	ldr	r3, [pc, #660]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800556c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005578:	4aa1      	ldr	r2, [pc, #644]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557a:	430b      	orrs	r3, r1
 800557c:	6513      	str	r3, [r2, #80]	@ 0x50
 800557e:	e003      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005594:	f04f 0900 	mov.w	r9, #0
 8005598:	ea58 0309 	orrs.w	r3, r8, r9
 800559c:	d047      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d82a      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c5 	.word	0x080055c5
 80055b4:	080055d3 	.word	0x080055d3
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	08005607 	.word	0x08005607
 80055c0:	08005607 	.word	0x08005607
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a8d      	ldr	r2, [pc, #564]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d0:	e01a      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	3308      	adds	r3, #8
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fc3c 	bl	8006e58 <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e6:	e00f      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	3328      	adds	r3, #40	@ 0x28
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fce3 	bl	8006fbc <RCCEx_PLL3_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055fc:	e004      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005604:	e000      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005610:	4b7b      	ldr	r3, [pc, #492]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005614:	f023 0107 	bic.w	r1, r3, #7
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	4a78      	ldr	r2, [pc, #480]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005620:	430b      	orrs	r3, r1
 8005622:	6513      	str	r3, [r2, #80]	@ 0x50
 8005624:	e003      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800563a:	f04f 0b00 	mov.w	fp, #0
 800563e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005642:	d04c      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564e:	d030      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005654:	d829      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005656:	2bc0      	cmp	r3, #192	@ 0xc0
 8005658:	d02d      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800565a:	2bc0      	cmp	r3, #192	@ 0xc0
 800565c:	d825      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d018      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d821      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800566a:	2b40      	cmp	r3, #64	@ 0x40
 800566c:	d007      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800566e:	e01c      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005670:	4b63      	ldr	r3, [pc, #396]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	4a62      	ldr	r2, [pc, #392]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800567a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800567c:	e01c      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	3308      	adds	r3, #8
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f001 fbe6 	bl	8006e58 <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005692:	e011      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	3328      	adds	r3, #40	@ 0x28
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f001 fc8d 	bl	8006fbc <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056a8:	e006      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056b0:	e002      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d053      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800570a:	d035      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800570c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005710:	d82e      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005712:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005716:	d031      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005718:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800571c:	d828      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800571e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005722:	d01a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005728:	d822      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800572e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005732:	d007      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005734:	e01c      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005736:	4b32      	ldr	r3, [pc, #200]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	4a31      	ldr	r2, [pc, #196]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005742:	e01c      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	3308      	adds	r3, #8
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f001 fb83 	bl	8006e58 <RCCEx_PLL2_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005758:	e011      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	3328      	adds	r3, #40	@ 0x28
 8005760:	2100      	movs	r1, #0
 8005762:	4618      	mov	r0, r3
 8005764:	f001 fc2a 	bl	8006fbc <RCCEx_PLL3_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800576e:	e006      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005776:	e002      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005786:	4b1e      	ldr	r3, [pc, #120]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005796:	4a1a      	ldr	r2, [pc, #104]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6593      	str	r3, [r2, #88]	@ 0x58
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80057bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d056      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057d2:	d038      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057d8:	d831      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057de:	d034      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057e4:	d82b      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ea:	d01d      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057f0:	d825      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d006      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057fc:	e01f      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057fe:	bf00      	nop
 8005800:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4ba2      	ldr	r3, [pc, #648]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4aa1      	ldr	r2, [pc, #644]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005810:	e01c      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005816:	3308      	adds	r3, #8
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fb1c 	bl	8006e58 <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005826:	e011      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	3328      	adds	r3, #40	@ 0x28
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fbc3 	bl	8006fbc <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005854:	4b8e      	ldr	r3, [pc, #568]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005860:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005864:	4a8a      	ldr	r2, [pc, #552]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005866:	430b      	orrs	r3, r1
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005880:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005884:	2300      	movs	r3, #0
 8005886:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800588a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d03a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589a:	2b30      	cmp	r3, #48	@ 0x30
 800589c:	d01f      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800589e:	2b30      	cmp	r3, #48	@ 0x30
 80058a0:	d819      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d00c      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d815      	bhi.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d019      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d111      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b2:	4b77      	ldr	r3, [pc, #476]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b6:	4a76      	ldr	r2, [pc, #472]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058be:	e011      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c4:	3308      	adds	r3, #8
 80058c6:	2102      	movs	r1, #2
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fac5 	bl	8006e58 <RCCEx_PLL2_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058ec:	4b68      	ldr	r3, [pc, #416]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fa:	4a65      	ldr	r2, [pc, #404]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005900:	e003      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005920:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d051      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005934:	d035      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800593a:	d82e      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800593c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005940:	d031      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005946:	d828      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594c:	d01a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800594e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005952:	d822      	bhi.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595c:	d007      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800595e:	e01c      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4b4b      	ldr	r3, [pc, #300]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4a4a      	ldr	r2, [pc, #296]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800596c:	e01c      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	3308      	adds	r3, #8
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fa6e 	bl	8006e58 <RCCEx_PLL2_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005982:	e011      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	3328      	adds	r3, #40	@ 0x28
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fb15 	bl	8006fbc <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a0:	e002      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059b0:	4b37      	ldr	r3, [pc, #220]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059be:	4a34      	ldr	r2, [pc, #208]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d056      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059f8:	d033      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059fe:	d82c      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a04:	d02f      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a0a:	d826      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a10:	d02b      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a16:	d820      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a1c:	d012      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a22:	d81a      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d022      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d115      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	3308      	adds	r3, #8
 8005a34:	2101      	movs	r1, #1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 fa0e 	bl	8006e58 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a42:	e015      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	3328      	adds	r3, #40	@ 0x28
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fab5 	bl	8006fbc <RCCEx_PLL3_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a58:	e00a      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a60:	e006      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a62:	bf00      	nop
 8005a64:	e004      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a86:	4a02      	ldr	r2, [pc, #8]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8c:	e006      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d055      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac8:	d033      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ace:	d82c      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad4:	d02f      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ada:	d826      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae0:	d02b      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ae6:	d820      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aec:	d012      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af2:	d81a      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d022      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005afc:	d115      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3308      	adds	r3, #8
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f9a6 	bl	8006e58 <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b12:	e015      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	3328      	adds	r3, #40	@ 0x28
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fa4d 	bl	8006fbc <RCCEx_PLL3_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b28:	e00a      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b30:	e006      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b32:	bf00      	nop
 8005b34:	e004      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b48:	4ba3      	ldr	r3, [pc, #652]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b58:	4a9f      	ldr	r2, [pc, #636]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5e:	e003      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d037      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b92:	d00e      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b98:	d816      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	4a8b      	ldr	r2, [pc, #556]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bb0:	e00f      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	2101      	movs	r1, #1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 f94c 	bl	8006e58 <RCCEx_PLL2_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bc6:	e004      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bda:	4b7f      	ldr	r3, [pc, #508]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a7b      	ldr	r2, [pc, #492]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bea:	430b      	orrs	r3, r1
 8005bec:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d039      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d81c      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c22:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c65 	.word	0x08005c65
 8005c2c:	08005c39 	.word	0x08005c39
 8005c30:	08005c47 	.word	0x08005c47
 8005c34:	08005c65 	.word	0x08005c65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c38:	4b67      	ldr	r3, [pc, #412]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	4a66      	ldr	r2, [pc, #408]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c44:	e00f      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f902 	bl	8006e58 <RCCEx_PLL2_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c5a:	e004      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c62:	e000      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c72:	f023 0103 	bic.w	r1, r3, #3
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7c:	4a56      	ldr	r2, [pc, #344]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f000 809f 	beq.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cae:	4b4b      	ldr	r3, [pc, #300]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cba:	f7fb fd41 	bl	8001740 <HAL_GetTick>
 8005cbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc2:	e00b      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc4:	f7fb fd3c 	bl	8001740 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	@ 0x64
 8005cd2:	d903      	bls.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cda:	e005      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0ed      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d179      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cf0:	4b39      	ldr	r3, [pc, #228]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cfc:	4053      	eors	r3, r2
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d015      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d06:	4b34      	ldr	r3, [pc, #208]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d12:	4b31      	ldr	r3, [pc, #196]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a30      	ldr	r2, [pc, #192]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d3e:	d118      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb fcfe 	bl	8001740 <HAL_GetTick>
 8005d44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d48:	e00d      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4a:	f7fb fcf9 	bl	8001740 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d903      	bls.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d64:	e005      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d66:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0eb      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d129      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d8a:	d10e      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d8c:	4b12      	ldr	r3, [pc, #72]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d9c:	091a      	lsrs	r2, r3, #4
 8005d9e:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6113      	str	r3, [r2, #16]
 8005da8:	e005      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005db4:	6113      	str	r3, [r2, #16]
 8005db6:	4b08      	ldr	r3, [pc, #32]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc6:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dcc:	e00e      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005dd6:	e009      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	58024800 	.word	0x58024800
 8005de0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f002 0301 	and.w	r3, r2, #1
 8005df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f000 8089 	beq.w	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e14:	2b28      	cmp	r3, #40	@ 0x28
 8005e16:	d86b      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e18:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005ef9 	.word	0x08005ef9
 8005e24:	08005ef1 	.word	0x08005ef1
 8005e28:	08005ef1 	.word	0x08005ef1
 8005e2c:	08005ef1 	.word	0x08005ef1
 8005e30:	08005ef1 	.word	0x08005ef1
 8005e34:	08005ef1 	.word	0x08005ef1
 8005e38:	08005ef1 	.word	0x08005ef1
 8005e3c:	08005ef1 	.word	0x08005ef1
 8005e40:	08005ec5 	.word	0x08005ec5
 8005e44:	08005ef1 	.word	0x08005ef1
 8005e48:	08005ef1 	.word	0x08005ef1
 8005e4c:	08005ef1 	.word	0x08005ef1
 8005e50:	08005ef1 	.word	0x08005ef1
 8005e54:	08005ef1 	.word	0x08005ef1
 8005e58:	08005ef1 	.word	0x08005ef1
 8005e5c:	08005ef1 	.word	0x08005ef1
 8005e60:	08005edb 	.word	0x08005edb
 8005e64:	08005ef1 	.word	0x08005ef1
 8005e68:	08005ef1 	.word	0x08005ef1
 8005e6c:	08005ef1 	.word	0x08005ef1
 8005e70:	08005ef1 	.word	0x08005ef1
 8005e74:	08005ef1 	.word	0x08005ef1
 8005e78:	08005ef1 	.word	0x08005ef1
 8005e7c:	08005ef1 	.word	0x08005ef1
 8005e80:	08005ef9 	.word	0x08005ef9
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005ef1 	.word	0x08005ef1
 8005e94:	08005ef1 	.word	0x08005ef1
 8005e98:	08005ef1 	.word	0x08005ef1
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005ef1 	.word	0x08005ef1
 8005eb0:	08005ef1 	.word	0x08005ef1
 8005eb4:	08005ef1 	.word	0x08005ef1
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005ef9 	.word	0x08005ef9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	3308      	adds	r3, #8
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 ffc3 	bl	8006e58 <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e00f      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ede:	3328      	adds	r3, #40	@ 0x28
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f86a 	bl	8006fbc <RCCEx_PLL3_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f02:	4bbf      	ldr	r3, [pc, #764]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f10:	4abb      	ldr	r2, [pc, #748]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f12:	430b      	orrs	r3, r1
 8005f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f16:	e003      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f002 0302 	and.w	r3, r2, #2
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f30:	2300      	movs	r3, #0
 8005f32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	d041      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d824      	bhi.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f9d 	.word	0x08005f9d
 8005f54:	08005f69 	.word	0x08005f69
 8005f58:	08005f7f 	.word	0x08005f7f
 8005f5c:	08005f9d 	.word	0x08005f9d
 8005f60:	08005f9d 	.word	0x08005f9d
 8005f64:	08005f9d 	.word	0x08005f9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 ff71 	bl	8006e58 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f7c:	e00f      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	3328      	adds	r3, #40	@ 0x28
 8005f84:	2101      	movs	r1, #1
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f818 	bl	8006fbc <RCCEx_PLL3_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f92:	e004      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fa6:	4b96      	ldr	r3, [pc, #600]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f023 0107 	bic.w	r1, r3, #7
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fb4:	4a92      	ldr	r2, [pc, #584]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f002 0304 	and.w	r3, r2, #4
 8005fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	d044      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d825      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	08006011 	.word	0x08006011
 8006000:	08006027 	.word	0x08006027
 8006004:	08006045 	.word	0x08006045
 8006008:	08006045 	.word	0x08006045
 800600c:	08006045 	.word	0x08006045
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	3308      	adds	r3, #8
 8006016:	2101      	movs	r1, #1
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ff1d 	bl	8006e58 <RCCEx_PLL2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006024:	e00f      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	3328      	adds	r3, #40	@ 0x28
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ffc4 	bl	8006fbc <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800604e:	4b6c      	ldr	r3, [pc, #432]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006052:	f023 0107 	bic.w	r1, r3, #7
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800605e:	4a68      	ldr	r2, [pc, #416]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006060:	430b      	orrs	r3, r1
 8006062:	6593      	str	r3, [r2, #88]	@ 0x58
 8006064:	e003      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f002 0320 	and.w	r3, r2, #32
 800607a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d055      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800609a:	d033      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a0:	d82c      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a6:	d02f      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ac:	d826      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b2:	d02b      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80060b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b8:	d820      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060be:	d012      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c4:	d81a      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ce:	d115      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d4:	3308      	adds	r3, #8
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 febd 	bl	8006e58 <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060e4:	e015      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	3328      	adds	r3, #40	@ 0x28
 80060ec:	2102      	movs	r1, #2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 ff64 	bl	8006fbc <RCCEx_PLL3_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060fa:	e00a      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006102:	e006      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006104:	bf00      	nop
 8006106:	e004      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006108:	bf00      	nop
 800610a:	e002      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800611a:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006130:	e003      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800614a:	2300      	movs	r3, #0
 800614c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006150:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006154:	460b      	mov	r3, r1
 8006156:	4313      	orrs	r3, r2
 8006158:	d058      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006162:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006166:	d033      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006168:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800616c:	d82c      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006172:	d02f      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006178:	d826      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800617a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800617e:	d02b      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006184:	d820      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800618a:	d012      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800618c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006190:	d81a      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d022      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619a:	d115      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	3308      	adds	r3, #8
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fe57 	bl	8006e58 <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061b0:	e015      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	3328      	adds	r3, #40	@ 0x28
 80061b8:	2102      	movs	r1, #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fefe 	bl	8006fbc <RCCEx_PLL3_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061c6:	e00a      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ce:	e006      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061d0:	bf00      	nop
 80061d2:	e004      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10e      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061f6:	4a02      	ldr	r2, [pc, #8]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80061fc:	e006      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006222:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d055      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006234:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006238:	d033      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800623a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800623e:	d82c      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006244:	d02f      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624a:	d826      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800624c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006250:	d02b      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006252:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006256:	d820      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625c:	d012      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800625e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006262:	d81a      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d022      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626c:	d115      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	3308      	adds	r3, #8
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fdee 	bl	8006e58 <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006282:	e015      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2102      	movs	r1, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fe95 	bl	8006fbc <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006298:	e00a      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062c8:	4a9d      	ldr	r2, [pc, #628]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ca:	430b      	orrs	r3, r1
 80062cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ce:	e003      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f002 0308 	and.w	r3, r2, #8
 80062e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062f2:	460b      	mov	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	d01e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3328      	adds	r3, #40	@ 0x28
 800630c:	2102      	movs	r1, #2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fe54 	bl	8006fbc <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006320:	4b87      	ldr	r3, [pc, #540]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006330:	4a83      	ldr	r2, [pc, #524]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006332:	430b      	orrs	r3, r1
 8006334:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f002 0310 	and.w	r3, r2, #16
 8006342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006346:	2300      	movs	r3, #0
 8006348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800634c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d01e      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006362:	d10c      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	3328      	adds	r3, #40	@ 0x28
 800636a:	2102      	movs	r1, #2
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fe25 	bl	8006fbc <RCCEx_PLL3_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800637e:	4b70      	ldr	r3, [pc, #448]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800638e:	4a6c      	ldr	r2, [pc, #432]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006390:	430b      	orrs	r3, r1
 8006392:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d03e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c0:	d022      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80063c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063c6:	d81b      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d0:	d00b      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063d2:	e015      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d8:	3308      	adds	r3, #8
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fd3b 	bl	8006e58 <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063e8:	e00f      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	3328      	adds	r3, #40	@ 0x28
 80063f0:	2102      	movs	r1, #2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fde2 	bl	8006fbc <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006412:	4b4b      	ldr	r3, [pc, #300]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006416:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006422:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006424:	430b      	orrs	r3, r1
 8006426:	6593      	str	r3, [r2, #88]	@ 0x58
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800643e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006440:	2300      	movs	r3, #0
 8006442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006444:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d03b      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006456:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800645a:	d01f      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800645c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006460:	d818      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006466:	d003      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006468:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800646c:	d007      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800646e:	e011      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006470:	4b33      	ldr	r3, [pc, #204]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	4a32      	ldr	r2, [pc, #200]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800647a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800647c:	e00f      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	3328      	adds	r3, #40	@ 0x28
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fd98 	bl	8006fbc <RCCEx_PLL3_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006492:	e004      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800649c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064a6:	4b26      	ldr	r3, [pc, #152]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d4:	2300      	movs	r3, #0
 80064d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80064d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064dc:	460b      	mov	r3, r1
 80064de:	4313      	orrs	r3, r2
 80064e0:	d034      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f0:	d007      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064f2:	e011      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4b12      	ldr	r3, [pc, #72]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a11      	ldr	r2, [pc, #68]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006500:	e00e      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	3308      	adds	r3, #8
 8006508:	2102      	movs	r1, #2
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fca4 	bl	8006e58 <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800652a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006536:	4a02      	ldr	r2, [pc, #8]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006538:	430b      	orrs	r3, r1
 800653a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800653c:	e006      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800655a:	2300      	movs	r3, #0
 800655c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800655e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d00c      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	3328      	adds	r3, #40	@ 0x28
 800656e:	2102      	movs	r1, #2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fd23 	bl	8006fbc <RCCEx_PLL3_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800658e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006590:	2300      	movs	r3, #0
 8006592:	667b      	str	r3, [r7, #100]	@ 0x64
 8006594:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006598:	460b      	mov	r3, r1
 800659a:	4313      	orrs	r3, r2
 800659c:	d038      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065aa:	d018      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80065ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b0:	d811      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b6:	d014      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80065b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065bc:	d80b      	bhi.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d011      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80065c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c6:	d106      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c8:	4bc3      	ldr	r3, [pc, #780]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	4ac2      	ldr	r2, [pc, #776]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065d4:	e008      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065dc:	e004      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065f0:	4bb9      	ldr	r3, [pc, #740]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006600:	4ab5      	ldr	r2, [pc, #724]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006602:	430b      	orrs	r3, r1
 8006604:	6553      	str	r3, [r2, #84]	@ 0x54
 8006606:	e003      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800661c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800661e:	2300      	movs	r3, #0
 8006620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006622:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d009      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800662c:	4baa      	ldr	r3, [pc, #680]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800662e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663a:	4aa7      	ldr	r2, [pc, #668]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800663c:	430b      	orrs	r3, r1
 800663e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800664c:	653b      	str	r3, [r7, #80]	@ 0x50
 800664e:	2300      	movs	r3, #0
 8006650:	657b      	str	r3, [r7, #84]	@ 0x54
 8006652:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d00a      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800665c:	4b9e      	ldr	r3, [pc, #632]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006668:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800666c:	4a9a      	ldr	r2, [pc, #616]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666e:	430b      	orrs	r3, r1
 8006670:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800667e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006680:	2300      	movs	r3, #0
 8006682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006684:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006688:	460b      	mov	r3, r1
 800668a:	4313      	orrs	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800668e:	4b92      	ldr	r3, [pc, #584]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006692:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800669c:	4a8e      	ldr	r2, [pc, #568]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669e:	430b      	orrs	r3, r1
 80066a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b0:	2300      	movs	r3, #0
 80066b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066be:	4b86      	ldr	r3, [pc, #536]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	4a85      	ldr	r2, [pc, #532]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066c8:	6113      	str	r3, [r2, #16]
 80066ca:	4b83      	ldr	r3, [pc, #524]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066cc:	6919      	ldr	r1, [r3, #16]
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066d6:	4a80      	ldr	r2, [pc, #512]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066f8:	4b77      	ldr	r3, [pc, #476]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006706:	4a74      	ldr	r2, [pc, #464]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006708:	430b      	orrs	r3, r1
 800670a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006718:	633b      	str	r3, [r7, #48]	@ 0x30
 800671a:	2300      	movs	r3, #0
 800671c:	637b      	str	r3, [r7, #52]	@ 0x34
 800671e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006722:	460b      	mov	r3, r1
 8006724:	4313      	orrs	r3, r2
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006728:	4b6b      	ldr	r3, [pc, #428]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006738:	4a67      	ldr	r2, [pc, #412]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	2100      	movs	r1, #0
 8006748:	62b9      	str	r1, [r7, #40]	@ 0x28
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006750:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d011      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	3308      	adds	r3, #8
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fb78 	bl	8006e58 <RCCEx_PLL2_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800676e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	2100      	movs	r1, #0
 8006788:	6239      	str	r1, [r7, #32]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006794:	460b      	mov	r3, r1
 8006796:	4313      	orrs	r3, r2
 8006798:	d011      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	3308      	adds	r3, #8
 80067a0:	2101      	movs	r1, #1
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fb58 	bl	8006e58 <RCCEx_PLL2_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	2100      	movs	r1, #0
 80067c8:	61b9      	str	r1, [r7, #24]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067d4:	460b      	mov	r3, r1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	d011      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	3308      	adds	r3, #8
 80067e0:	2102      	movs	r1, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb38 	bl	8006e58 <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	2100      	movs	r1, #0
 8006808:	6139      	str	r1, [r7, #16]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006814:	460b      	mov	r3, r1
 8006816:	4313      	orrs	r3, r2
 8006818:	d011      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	3328      	adds	r3, #40	@ 0x28
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fbca 	bl	8006fbc <RCCEx_PLL3_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	2100      	movs	r1, #0
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d011      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	3328      	adds	r3, #40	@ 0x28
 8006860:	2101      	movs	r1, #1
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fbaa 	bl	8006fbc <RCCEx_PLL3_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	2100      	movs	r1, #0
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006894:	460b      	mov	r3, r1
 8006896:	4313      	orrs	r3, r2
 8006898:	d011      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	3328      	adds	r3, #40	@ 0x28
 80068a0:	2102      	movs	r1, #2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb8a 	bl	8006fbc <RCCEx_PLL3_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80068be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068d2:	46bd      	mov	sp, r7
 80068d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d8:	58024400 	.word	0x58024400

080068dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068e0:	f7fe fd96 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	4904      	ldr	r1, [pc, #16]	@ (8006904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068f2:	5ccb      	ldrb	r3, [r1, r3]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	58024400 	.word	0x58024400
 8006904:	080090ac 	.word	0x080090ac

08006908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006908:	b480      	push	{r7}
 800690a:	b089      	sub	sp, #36	@ 0x24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006910:	4ba1      	ldr	r3, [pc, #644]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800691a:	4b9f      	ldr	r3, [pc, #636]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	0b1b      	lsrs	r3, r3, #12
 8006920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006926:	4b9c      	ldr	r3, [pc, #624]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	091b      	lsrs	r3, r3, #4
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006932:	4b99      	ldr	r3, [pc, #612]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8111 	beq.w	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b02      	cmp	r3, #2
 800695a:	f000 8083 	beq.w	8006a64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f200 80a1 	bhi.w	8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d056      	beq.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006972:	e099      	b.n	8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006974:	4b88      	ldr	r3, [pc, #544]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02d      	beq.n	80069dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006980:	4b85      	ldr	r3, [pc, #532]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	4a84      	ldr	r2, [pc, #528]	@ (8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80069be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069da:	e087      	b.n	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1e:	e065      	b.n	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a32:	4b59      	ldr	r3, [pc, #356]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a62:	e043      	b.n	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a76:	4b48      	ldr	r3, [pc, #288]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa6:	e021      	b.n	8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aba:	4b37      	ldr	r3, [pc, #220]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ace:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006aec:	4b2a      	ldr	r3, [pc, #168]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b12:	ee17 2a90 	vmov	r2, s15
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b40:	ee17 2a90 	vmov	r2, s15
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b48:	4b13      	ldr	r3, [pc, #76]	@ (8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	0e1b      	lsrs	r3, r3, #24
 8006b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6e:	ee17 2a90 	vmov	r2, s15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b76:	e008      	b.n	8006b8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
}
 8006b8a:	bf00      	nop
 8006b8c:	3724      	adds	r7, #36	@ 0x24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	03d09000 	.word	0x03d09000
 8006ba0:	46000000 	.word	0x46000000
 8006ba4:	4c742400 	.word	0x4c742400
 8006ba8:	4a742400 	.word	0x4a742400
 8006bac:	4af42400 	.word	0x4af42400

08006bb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	@ 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bb8:	4ba1      	ldr	r3, [pc, #644]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bc2:	4b9f      	ldr	r3, [pc, #636]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc6:	0d1b      	lsrs	r3, r3, #20
 8006bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bce:	4b9c      	ldr	r3, [pc, #624]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bda:	4b99      	ldr	r3, [pc, #612]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8111 	beq.w	8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	f000 8083 	beq.w	8006d0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f200 80a1 	bhi.w	8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d056      	beq.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c1a:	e099      	b.n	8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1c:	4b88      	ldr	r3, [pc, #544]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d02d      	beq.n	8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c28:	4b85      	ldr	r3, [pc, #532]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	4a84      	ldr	r2, [pc, #528]	@ (8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c52:	4b7b      	ldr	r3, [pc, #492]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c82:	e087      	b.n	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c96:	4b6a      	ldr	r3, [pc, #424]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006caa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc6:	e065      	b.n	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cda:	4b59      	ldr	r3, [pc, #356]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d0a:	e043      	b.n	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1e:	4b48      	ldr	r3, [pc, #288]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4e:	e021      	b.n	8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d62:	4b37      	ldr	r3, [pc, #220]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d94:	4b2a      	ldr	r3, [pc, #168]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	0a5b      	lsrs	r3, r3, #9
 8006d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dba:	ee17 2a90 	vmov	r2, s15
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	0c1b      	lsrs	r3, r3, #16
 8006dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dcc:	ee07 3a90 	vmov	s15, r3
 8006dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de8:	ee17 2a90 	vmov	r2, s15
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006df0:	4b13      	ldr	r3, [pc, #76]	@ (8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	0e1b      	lsrs	r3, r3, #24
 8006df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e16:	ee17 2a90 	vmov	r2, s15
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e1e:	e008      	b.n	8006e32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]
}
 8006e32:	bf00      	nop
 8006e34:	3724      	adds	r7, #36	@ 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	58024400 	.word	0x58024400
 8006e44:	03d09000 	.word	0x03d09000
 8006e48:	46000000 	.word	0x46000000
 8006e4c:	4c742400 	.word	0x4c742400
 8006e50:	4a742400 	.word	0x4a742400
 8006e54:	4af42400 	.word	0x4af42400

08006e58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e66:	4b53      	ldr	r3, [pc, #332]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d101      	bne.n	8006e76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e099      	b.n	8006faa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e76:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006e7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e82:	f7fa fc5d 	bl	8001740 <HAL_GetTick>
 8006e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e88:	e008      	b.n	8006e9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e8a:	f7fa fc59 	bl	8001740 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e086      	b.n	8006faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e9c:	4b45      	ldr	r3, [pc, #276]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f0      	bne.n	8006e8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ea8:	4b42      	ldr	r3, [pc, #264]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	493f      	ldr	r1, [pc, #252]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	025b      	lsls	r3, r3, #9
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	061b      	lsls	r3, r3, #24
 8006ee8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006eec:	4931      	ldr	r1, [pc, #196]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ef2:	4b30      	ldr	r3, [pc, #192]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	492d      	ldr	r1, [pc, #180]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f04:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	f023 0220 	bic.w	r2, r3, #32
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	4928      	ldr	r1, [pc, #160]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f16:	4b27      	ldr	r3, [pc, #156]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f22:	4b24      	ldr	r3, [pc, #144]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f26:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <RCCEx_PLL2_Config+0x160>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	69d2      	ldr	r2, [r2, #28]
 8006f2e:	00d2      	lsls	r2, r2, #3
 8006f30:	4920      	ldr	r1, [pc, #128]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f36:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f3c:	f043 0310 	orr.w	r3, r3, #16
 8006f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f48:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	4a19      	ldr	r2, [pc, #100]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f54:	e00f      	b.n	8006f76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d106      	bne.n	8006f6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f5c:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	4a14      	ldr	r2, [pc, #80]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f68:	e005      	b.n	8006f76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f6a:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f76:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f82:	f7fa fbdd 	bl	8001740 <HAL_GetTick>
 8006f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f88:	e008      	b.n	8006f9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f8a:	f7fa fbd9 	bl	8001740 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e006      	b.n	8006faa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f9c:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	ffff0007 	.word	0xffff0007

08006fbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fca:	4b53      	ldr	r3, [pc, #332]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d101      	bne.n	8006fda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e099      	b.n	800710e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fda:	4b4f      	ldr	r3, [pc, #316]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a4e      	ldr	r2, [pc, #312]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8006fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fa fbab 	bl	8001740 <HAL_GetTick>
 8006fea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fec:	e008      	b.n	8007000 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fee:	f7fa fba7 	bl	8001740 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e086      	b.n	800710e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007000:	4b45      	ldr	r3, [pc, #276]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f0      	bne.n	8006fee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800700c:	4b42      	ldr	r3, [pc, #264]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	051b      	lsls	r3, r3, #20
 800701a:	493f      	ldr	r1, [pc, #252]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 800701c:	4313      	orrs	r3, r2
 800701e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	3b01      	subs	r3, #1
 8007030:	025b      	lsls	r3, r3, #9
 8007032:	b29b      	uxth	r3, r3
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	3b01      	subs	r3, #1
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	3b01      	subs	r3, #1
 800704a:	061b      	lsls	r3, r3, #24
 800704c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007050:	4931      	ldr	r1, [pc, #196]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007056:	4b30      	ldr	r3, [pc, #192]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	492d      	ldr	r1, [pc, #180]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007064:	4313      	orrs	r3, r2
 8007066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007068:	4b2b      	ldr	r3, [pc, #172]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 800706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	4928      	ldr	r1, [pc, #160]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800707a:	4b27      	ldr	r3, [pc, #156]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a26      	ldr	r2, [pc, #152]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007086:	4b24      	ldr	r3, [pc, #144]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708a:	4b24      	ldr	r3, [pc, #144]	@ (800711c <RCCEx_PLL3_Config+0x160>)
 800708c:	4013      	ands	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	69d2      	ldr	r2, [r2, #28]
 8007092:	00d2      	lsls	r2, r2, #3
 8007094:	4920      	ldr	r1, [pc, #128]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007096:	4313      	orrs	r3, r2
 8007098:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800709a:	4b1f      	ldr	r3, [pc, #124]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	4a1e      	ldr	r2, [pc, #120]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a19      	ldr	r2, [pc, #100]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070b8:	e00f      	b.n	80070da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d106      	bne.n	80070ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070c0:	4b15      	ldr	r3, [pc, #84]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	4a14      	ldr	r2, [pc, #80]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070cc:	e005      	b.n	80070da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ce:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d2:	4a11      	ldr	r2, [pc, #68]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070da:	4b0f      	ldr	r3, [pc, #60]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a0e      	ldr	r2, [pc, #56]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e6:	f7fa fb2b 	bl	8001740 <HAL_GetTick>
 80070ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070ec:	e008      	b.n	8007100 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070ee:	f7fa fb27 	bl	8001740 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e006      	b.n	800710e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007100:	4b05      	ldr	r3, [pc, #20]	@ (8007118 <RCCEx_PLL3_Config+0x15c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	58024400 	.word	0x58024400
 800711c:	ffff0007 	.word	0xffff0007

08007120 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e10f      	b.n	8007352 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a87      	ldr	r2, [pc, #540]	@ (800735c <HAL_SPI_Init+0x23c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00f      	beq.n	8007162 <HAL_SPI_Init+0x42>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a86      	ldr	r2, [pc, #536]	@ (8007360 <HAL_SPI_Init+0x240>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00a      	beq.n	8007162 <HAL_SPI_Init+0x42>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a84      	ldr	r2, [pc, #528]	@ (8007364 <HAL_SPI_Init+0x244>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d005      	beq.n	8007162 <HAL_SPI_Init+0x42>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b0f      	cmp	r3, #15
 800715c:	d901      	bls.n	8007162 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e0f7      	b.n	8007352 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 ff6c 	bl	8008040 <SPI_GetPacketSize>
 8007168:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a7b      	ldr	r2, [pc, #492]	@ (800735c <HAL_SPI_Init+0x23c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00c      	beq.n	800718e <HAL_SPI_Init+0x6e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a79      	ldr	r2, [pc, #484]	@ (8007360 <HAL_SPI_Init+0x240>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <HAL_SPI_Init+0x6e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a78      	ldr	r2, [pc, #480]	@ (8007364 <HAL_SPI_Init+0x244>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d002      	beq.n	800718e <HAL_SPI_Init+0x6e>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d811      	bhi.n	80071b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007192:	4a72      	ldr	r2, [pc, #456]	@ (800735c <HAL_SPI_Init+0x23c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d009      	beq.n	80071ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a70      	ldr	r2, [pc, #448]	@ (8007360 <HAL_SPI_Init+0x240>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_SPI_Init+0x8c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a6f      	ldr	r2, [pc, #444]	@ (8007364 <HAL_SPI_Init+0x244>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d104      	bne.n	80071b6 <HAL_SPI_Init+0x96>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d901      	bls.n	80071b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e0cd      	b.n	8007352 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d106      	bne.n	80071d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7f9 fe68 	bl	8000ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80071f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071fc:	d119      	bne.n	8007232 <HAL_SPI_Init+0x112>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007206:	d103      	bne.n	8007210 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10c      	bne.n	8007232 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800721c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007220:	d107      	bne.n	8007232 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007230:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00f      	beq.n	800725e <HAL_SPI_Init+0x13e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	2b06      	cmp	r3, #6
 8007244:	d90b      	bls.n	800725e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	e007      	b.n	800726e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800726c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	431a      	orrs	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007280:	ea42 0103 	orr.w	r1, r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ce:	ea42 0103 	orr.w	r1, r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800730c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40013000 	.word	0x40013000
 8007360:	40003800 	.word	0x40003800
 8007364:	40003c00 	.word	0x40003c00

08007368 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	4613      	mov	r3, r2
 8007376:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3320      	adds	r3, #32
 800737e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007380:	f7fa f9de 	bl	8001740 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	d001      	beq.n	8007396 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
 8007394:	e1d1      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_SPI_Transmit+0x3a>
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e1c9      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_SPI_Transmit+0x4c>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e1c2      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2203      	movs	r2, #3
 80073c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	88fa      	ldrh	r2, [r7, #6]
 80073de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800740c:	d108      	bne.n	8007420 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e009      	b.n	8007434 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007432:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	4b96      	ldr	r3, [pc, #600]	@ (8007694 <HAL_SPI_Transmit+0x32c>)
 800743c:	4013      	ands	r3, r2
 800743e:	88f9      	ldrh	r1, [r7, #6]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	430b      	orrs	r3, r1
 8007446:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007460:	d107      	bne.n	8007472 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b0f      	cmp	r3, #15
 8007478:	d947      	bls.n	800750a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800747a:	e03f      	b.n	80074fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d114      	bne.n	80074b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749a:	1d1a      	adds	r2, r3, #4
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074b2:	e023      	b.n	80074fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b4:	f7fa f944 	bl	8001740 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d803      	bhi.n	80074cc <HAL_SPI_Transmit+0x164>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Transmit+0x16a>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d114      	bne.n	80074fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 fce6 	bl	8007ea4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e11e      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1b9      	bne.n	800747c <HAL_SPI_Transmit+0x114>
 8007508:	e0f1      	b.n	80076ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b07      	cmp	r3, #7
 8007510:	f240 80e6 	bls.w	80076e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007514:	e05d      	b.n	80075d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d132      	bne.n	800758a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d918      	bls.n	8007562 <HAL_SPI_Transmit+0x1fa>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d014      	beq.n	8007562 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b02      	subs	r3, #2
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007560:	e037      	b.n	80075d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007588:	e023      	b.n	80075d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800758a:	f7fa f8d9 	bl	8001740 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d803      	bhi.n	80075a2 <HAL_SPI_Transmit+0x23a>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d102      	bne.n	80075a8 <HAL_SPI_Transmit+0x240>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d114      	bne.n	80075d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fc7b 	bl	8007ea4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e0b3      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d19b      	bne.n	8007516 <HAL_SPI_Transmit+0x1ae>
 80075de:	e086      	b.n	80076ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d154      	bne.n	8007698 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d918      	bls.n	800762c <HAL_SPI_Transmit+0x2c4>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fe:	2b40      	cmp	r3, #64	@ 0x40
 8007600:	d914      	bls.n	800762c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b04      	subs	r3, #4
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800762a:	e059      	b.n	80076e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d917      	bls.n	8007668 <HAL_SPI_Transmit+0x300>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d013      	beq.n	8007668 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007644:	881a      	ldrh	r2, [r3, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b02      	subs	r3, #2
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007666:	e03b      	b.n	80076e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3320      	adds	r3, #32
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007692:	e025      	b.n	80076e0 <HAL_SPI_Transmit+0x378>
 8007694:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007698:	f7fa f852 	bl	8001740 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d803      	bhi.n	80076b0 <HAL_SPI_Transmit+0x348>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d102      	bne.n	80076b6 <HAL_SPI_Transmit+0x34e>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d114      	bne.n	80076e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fbf4 	bl	8007ea4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e02c      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f af79 	bne.w	80075e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2108      	movs	r1, #8
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fc73 	bl	8007fe4 <SPI_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800770a:	f043 0220 	orr.w	r2, r3, #32
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fbc5 	bl	8007ea4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007738:	2300      	movs	r3, #0
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop

08007744 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	d001      	beq.n	8007762 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800775e:	2302      	movs	r3, #2
 8007760:	e126      	b.n	80079b0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_SPI_Transmit_DMA+0x2a>
 8007768:	88fb      	ldrh	r3, [r7, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e11e      	b.n	80079b0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_SPI_Transmit_DMA+0x3c>
 800777c:	2302      	movs	r3, #2
 800777e:	e117      	b.n	80079b0 <HAL_SPI_Transmit_DMA+0x26c>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2203      	movs	r2, #3
 800778c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80077d8:	d108      	bne.n	80077ec <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e009      	b.n	8007800 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80077fe:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b0f      	cmp	r3, #15
 8007806:	d905      	bls.n	8007814 <HAL_SPI_Transmit_DMA+0xd0>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007812:	d10f      	bne.n	8007834 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007818:	2b07      	cmp	r3, #7
 800781a:	d911      	bls.n	8007840 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007826:	d00b      	beq.n	8007840 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800782c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800782e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007832:	d005      	beq.n	8007840 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e0b7      	b.n	80079b0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b07      	cmp	r3, #7
 8007846:	d820      	bhi.n	800788a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007852:	d109      	bne.n	8007868 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800785a:	b29b      	uxth	r3, r3
 800785c:	3301      	adds	r3, #1
 800785e:	105b      	asrs	r3, r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007872:	d11e      	bne.n	80078b2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800787a:	b29b      	uxth	r3, r3
 800787c:	3303      	adds	r3, #3
 800787e:	109b      	asrs	r3, r3, #2
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007888:	e013      	b.n	80078b2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d80f      	bhi.n	80078b2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800789c:	d109      	bne.n	80078b2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3301      	adds	r3, #1
 80078a8:	105b      	asrs	r3, r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b6:	4a40      	ldr	r2, [pc, #256]	@ (80079b8 <HAL_SPI_Transmit_DMA+0x274>)
 80078b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078be:	4a3f      	ldr	r2, [pc, #252]	@ (80079bc <HAL_SPI_Transmit_DMA+0x278>)
 80078c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078c6:	4a3e      	ldr	r2, [pc, #248]	@ (80079c0 <HAL_SPI_Transmit_DMA+0x27c>)
 80078c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ce:	2200      	movs	r2, #0
 80078d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078e0:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ea:	4619      	mov	r1, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3320      	adds	r3, #32
 80078f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80078fc:	f7fa fbc8 	bl	8002090 <HAL_DMA_Start_IT>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800790c:	f043 0210 	orr.w	r2, r3, #16
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e042      	b.n	80079b0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007934:	d108      	bne.n	8007948 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6859      	ldr	r1, [r3, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4b20      	ldr	r3, [pc, #128]	@ (80079c4 <HAL_SPI_Transmit_DMA+0x280>)
 8007942:	400b      	ands	r3, r1
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	e009      	b.n	800795c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <HAL_SPI_Transmit_DMA+0x280>)
 8007950:	4013      	ands	r3, r2
 8007952:	88f9      	ldrh	r1, [r7, #6]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	430b      	orrs	r3, r1
 800795a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800796a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800797a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007994:	d107      	bne.n	80079a6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079a4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	08007e0f 	.word	0x08007e0f
 80079bc:	08007dc9 	.word	0x08007dc9
 80079c0:	08007e2b 	.word	0x08007e2b
 80079c4:	ffff0000 	.word	0xffff0000

080079c8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	@ 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80079e0:	6a3a      	ldr	r2, [r7, #32]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4013      	ands	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079fa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3330      	adds	r3, #48	@ 0x30
 8007a02:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <HAL_SPI_IRQHandler+0x68>
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a26:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f9c3 	bl	8007db4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007a2e:	e192      	b.n	8007d56 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d113      	bne.n	8007a62 <HAL_SPI_IRQHandler+0x9a>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10e      	bne.n	8007a62 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
    handled = 1UL;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10f      	bne.n	8007a8c <HAL_SPI_IRQHandler+0xc4>
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d105      	bne.n	8007a8c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
    handled = 1UL;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <HAL_SPI_IRQHandler+0xee>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
    handled = 1UL;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 8147 	bne.w	8007d4c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 808b 	beq.w	8007be0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0208 	orr.w	r2, r2, #8
 8007ad8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0210 	orr.w	r2, r2, #16
 8007ae8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007af8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0208 	bic.w	r2, r2, #8
 8007b08:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d13d      	bne.n	8007b94 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007b18:	e036      	b.n	8007b88 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	2b0f      	cmp	r3, #15
 8007b20:	d90b      	bls.n	8007b3a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b2c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b32:	1d1a      	adds	r2, r3, #4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	665a      	str	r2, [r3, #100]	@ 0x64
 8007b38:	e01d      	b.n	8007b76 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	2b07      	cmp	r3, #7
 8007b40:	d90b      	bls.n	8007b5a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	8812      	ldrh	r2, [r2, #0]
 8007b4a:	b292      	uxth	r2, r2
 8007b4c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	665a      	str	r2, [r3, #100]	@ 0x64
 8007b58:	e00d      	b.n	8007b76 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b66:	7812      	ldrb	r2, [r2, #0]
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1c2      	bne.n	8007b1a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f985 	bl	8007ea4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8f7 	bl	8007da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bb2:	e0d0      	b.n	8007d56 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007bb4:	7cfb      	ldrb	r3, [r7, #19]
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d103      	bne.n	8007bc2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8dc 	bl	8007d78 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007bc0:	e0c6      	b.n	8007d50 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007bc2:	7cfb      	ldrb	r3, [r7, #19]
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d103      	bne.n	8007bd0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8cb 	bl	8007d64 <HAL_SPI_RxCpltCallback>
    return;
 8007bce:	e0bf      	b.n	8007d50 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007bd0:	7cfb      	ldrb	r3, [r7, #19]
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	f040 80bc 	bne.w	8007d50 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7f8 ff11 	bl	8000a00 <HAL_SPI_TxCpltCallback>
    return;
 8007bde:	e0b7      	b.n	8007d50 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80b5 	beq.w	8007d56 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bfc:	f043 0204 	orr.w	r2, r3, #4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699a      	ldr	r2, [r3, #24]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00f      	beq.n	8007c40 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c26:	f043 0201 	orr.w	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00f      	beq.n	8007c6a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c50:	f043 0208 	orr.w	r2, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c68:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00f      	beq.n	8007c94 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0220 	orr.w	r2, r2, #32
 8007c92:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d05a      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6919      	ldr	r1, [r3, #16]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	4b28      	ldr	r3, [pc, #160]	@ (8007d5c <HAL_SPI_IRQHandler+0x394>)
 8007cba:	400b      	ands	r3, r1
 8007cbc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007cc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007cc8:	d138      	bne.n	8007d3c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007cd8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d013      	beq.n	8007d0a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d60 <HAL_SPI_IRQHandler+0x398>)
 8007ce8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fa fc38 	bl	8002564 <HAL_DMA_Abort_IT>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d020      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d16:	4a12      	ldr	r2, [pc, #72]	@ (8007d60 <HAL_SPI_IRQHandler+0x398>)
 8007d18:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fc20 	bl	8002564 <HAL_DMA_Abort_IT>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d014      	beq.n	8007d54 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d3a:	e00b      	b.n	8007d54 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f82b 	bl	8007da0 <HAL_SPI_ErrorCallback>
    return;
 8007d4a:	e003      	b.n	8007d54 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007d54:	bf00      	nop
  }
}
 8007d56:	3728      	adds	r7, #40	@ 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	fffffc94 	.word	0xfffffc94
 8007d60:	08007e71 	.word	0x08007e71

08007d64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b07      	cmp	r3, #7
 8007de0:	d011      	beq.n	8007e06 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dec:	d103      	bne.n	8007df6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7f8 fe06 	bl	8000a00 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007df4:	e007      	b.n	8007e06 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0208 	orr.w	r2, r2, #8
 8007e04:	611a      	str	r2, [r3, #16]
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff ffb5 	bl	8007d8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e36:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fb fd03 	bl	8003844 <HAL_DMA_GetError>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d011      	beq.n	8007e68 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f82d 	bl	8007ea4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e50:	f043 0210 	orr.w	r2, r3, #16
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ff9c 	bl	8007da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff ff82 	bl	8007da0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0208 	orr.w	r2, r2, #8
 8007ec2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0210 	orr.w	r2, r2, #16
 8007ed2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6919      	ldr	r1, [r3, #16]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe0 <SPI_CloseTransfer+0x13c>)
 8007ef0:	400b      	ands	r3, r1
 8007ef2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007f02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d014      	beq.n	8007f3a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00f      	beq.n	8007f3a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0220 	orr.w	r2, r2, #32
 8007f38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d014      	beq.n	8007f70 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f56:	f043 0204 	orr.w	r2, r3, #4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00f      	beq.n	8007f9a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f80:	f043 0201 	orr.w	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00f      	beq.n	8007fc4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007faa:	f043 0208 	orr.w	r2, r3, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	fffffc90 	.word	0xfffffc90

08007fe4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ff4:	e010      	b.n	8008018 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ff6:	f7f9 fba3 	bl	8001740 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	429a      	cmp	r2, r3
 8008004:	d803      	bhi.n	800800e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d102      	bne.n	8008014 <SPI_WaitOnFlagUntilTimeout+0x30>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e00f      	b.n	8008038 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	4013      	ands	r3, r2
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	bf0c      	ite	eq
 8008028:	2301      	moveq	r3, #1
 800802a:	2300      	movne	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	461a      	mov	r2, r3
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	429a      	cmp	r2, r3
 8008034:	d0df      	beq.n	8007ff6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3307      	adds	r3, #7
 800805e:	08db      	lsrs	r3, r3, #3
 8008060:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	fb02 f303 	mul.w	r3, r2, r3
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e042      	b.n	800810e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f83b 	bl	8008116 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2224      	movs	r2, #36	@ 0x24
 80080a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0201 	bic.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd9b 	bl	8008bfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f830 	bl	800812c <UART_SetConfig>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e01b      	b.n	800810e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0201 	orr.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fe1a 	bl	8008d40 <UART_CheckIdleState>
 800810c:	4603      	mov	r3, r0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800812c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008130:	b092      	sub	sp, #72	@ 0x48
 8008132:	af00      	add	r7, sp, #0
 8008134:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	431a      	orrs	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	431a      	orrs	r2, r3
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	4313      	orrs	r3, r2
 8008152:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4bbe      	ldr	r3, [pc, #760]	@ (8008454 <UART_SetConfig+0x328>)
 800815c:	4013      	ands	r3, r2
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008164:	430b      	orrs	r3, r1
 8008166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4ab3      	ldr	r2, [pc, #716]	@ (8008458 <UART_SetConfig+0x32c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008194:	4313      	orrs	r3, r2
 8008196:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	4baf      	ldr	r3, [pc, #700]	@ (800845c <UART_SetConfig+0x330>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	f023 010f 	bic.w	r1, r3, #15
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4aa6      	ldr	r2, [pc, #664]	@ (8008460 <UART_SetConfig+0x334>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d177      	bne.n	80082bc <UART_SetConfig+0x190>
 80081cc:	4ba5      	ldr	r3, [pc, #660]	@ (8008464 <UART_SetConfig+0x338>)
 80081ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081d4:	2b28      	cmp	r3, #40	@ 0x28
 80081d6:	d86d      	bhi.n	80082b4 <UART_SetConfig+0x188>
 80081d8:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <UART_SetConfig+0xb4>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	08008285 	.word	0x08008285
 80081e4:	080082b5 	.word	0x080082b5
 80081e8:	080082b5 	.word	0x080082b5
 80081ec:	080082b5 	.word	0x080082b5
 80081f0:	080082b5 	.word	0x080082b5
 80081f4:	080082b5 	.word	0x080082b5
 80081f8:	080082b5 	.word	0x080082b5
 80081fc:	080082b5 	.word	0x080082b5
 8008200:	0800828d 	.word	0x0800828d
 8008204:	080082b5 	.word	0x080082b5
 8008208:	080082b5 	.word	0x080082b5
 800820c:	080082b5 	.word	0x080082b5
 8008210:	080082b5 	.word	0x080082b5
 8008214:	080082b5 	.word	0x080082b5
 8008218:	080082b5 	.word	0x080082b5
 800821c:	080082b5 	.word	0x080082b5
 8008220:	08008295 	.word	0x08008295
 8008224:	080082b5 	.word	0x080082b5
 8008228:	080082b5 	.word	0x080082b5
 800822c:	080082b5 	.word	0x080082b5
 8008230:	080082b5 	.word	0x080082b5
 8008234:	080082b5 	.word	0x080082b5
 8008238:	080082b5 	.word	0x080082b5
 800823c:	080082b5 	.word	0x080082b5
 8008240:	0800829d 	.word	0x0800829d
 8008244:	080082b5 	.word	0x080082b5
 8008248:	080082b5 	.word	0x080082b5
 800824c:	080082b5 	.word	0x080082b5
 8008250:	080082b5 	.word	0x080082b5
 8008254:	080082b5 	.word	0x080082b5
 8008258:	080082b5 	.word	0x080082b5
 800825c:	080082b5 	.word	0x080082b5
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082b5 	.word	0x080082b5
 8008268:	080082b5 	.word	0x080082b5
 800826c:	080082b5 	.word	0x080082b5
 8008270:	080082b5 	.word	0x080082b5
 8008274:	080082b5 	.word	0x080082b5
 8008278:	080082b5 	.word	0x080082b5
 800827c:	080082b5 	.word	0x080082b5
 8008280:	080082ad 	.word	0x080082ad
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828a:	e222      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008292:	e21e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e21a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e216      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80082a4:	2320      	movs	r3, #32
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e212      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80082ac:	2340      	movs	r3, #64	@ 0x40
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e20e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80082b4:	2380      	movs	r3, #128	@ 0x80
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e20a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a69      	ldr	r2, [pc, #420]	@ (8008468 <UART_SetConfig+0x33c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d130      	bne.n	8008328 <UART_SetConfig+0x1fc>
 80082c6:	4b67      	ldr	r3, [pc, #412]	@ (8008464 <UART_SetConfig+0x338>)
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d826      	bhi.n	8008320 <UART_SetConfig+0x1f4>
 80082d2:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <UART_SetConfig+0x1ac>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	08008301 	.word	0x08008301
 80082e4:	08008309 	.word	0x08008309
 80082e8:	08008311 	.word	0x08008311
 80082ec:	08008319 	.word	0x08008319
 80082f0:	2300      	movs	r3, #0
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e1ec      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80082f8:	2304      	movs	r3, #4
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e1e8      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008300:	2308      	movs	r3, #8
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e1e4      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008308:	2310      	movs	r3, #16
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e1e0      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008310:	2320      	movs	r3, #32
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e1dc      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008318:	2340      	movs	r3, #64	@ 0x40
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e1d8      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008320:	2380      	movs	r3, #128	@ 0x80
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e1d4      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a4f      	ldr	r2, [pc, #316]	@ (800846c <UART_SetConfig+0x340>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d130      	bne.n	8008394 <UART_SetConfig+0x268>
 8008332:	4b4c      	ldr	r3, [pc, #304]	@ (8008464 <UART_SetConfig+0x338>)
 8008334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	2b05      	cmp	r3, #5
 800833c:	d826      	bhi.n	800838c <UART_SetConfig+0x260>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <UART_SetConfig+0x218>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	0800835d 	.word	0x0800835d
 8008348:	08008365 	.word	0x08008365
 800834c:	0800836d 	.word	0x0800836d
 8008350:	08008375 	.word	0x08008375
 8008354:	0800837d 	.word	0x0800837d
 8008358:	08008385 	.word	0x08008385
 800835c:	2300      	movs	r3, #0
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e1b6      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008364:	2304      	movs	r3, #4
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e1b2      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800836c:	2308      	movs	r3, #8
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e1ae      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008374:	2310      	movs	r3, #16
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e1aa      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800837c:	2320      	movs	r3, #32
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e1a6      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008384:	2340      	movs	r3, #64	@ 0x40
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e1a2      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800838c:	2380      	movs	r3, #128	@ 0x80
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e19e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a35      	ldr	r2, [pc, #212]	@ (8008470 <UART_SetConfig+0x344>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d130      	bne.n	8008400 <UART_SetConfig+0x2d4>
 800839e:	4b31      	ldr	r3, [pc, #196]	@ (8008464 <UART_SetConfig+0x338>)
 80083a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d826      	bhi.n	80083f8 <UART_SetConfig+0x2cc>
 80083aa:	a201      	add	r2, pc, #4	@ (adr r2, 80083b0 <UART_SetConfig+0x284>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	080083c9 	.word	0x080083c9
 80083b4:	080083d1 	.word	0x080083d1
 80083b8:	080083d9 	.word	0x080083d9
 80083bc:	080083e1 	.word	0x080083e1
 80083c0:	080083e9 	.word	0x080083e9
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e180      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e17c      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083de:	e178      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e6:	e174      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083e8:	2320      	movs	r3, #32
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e170      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083f0:	2340      	movs	r3, #64	@ 0x40
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e16c      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e168      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <UART_SetConfig+0x348>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d142      	bne.n	8008490 <UART_SetConfig+0x364>
 800840a:	4b16      	ldr	r3, [pc, #88]	@ (8008464 <UART_SetConfig+0x338>)
 800840c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	2b05      	cmp	r3, #5
 8008414:	d838      	bhi.n	8008488 <UART_SetConfig+0x35c>
 8008416:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <UART_SetConfig+0x2f0>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	08008435 	.word	0x08008435
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008445 	.word	0x08008445
 8008428:	0800844d 	.word	0x0800844d
 800842c:	08008479 	.word	0x08008479
 8008430:	08008481 	.word	0x08008481
 8008434:	2300      	movs	r3, #0
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e14a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e146      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844a:	e142      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e13e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008454:	cfff69f3 	.word	0xcfff69f3
 8008458:	58000c00 	.word	0x58000c00
 800845c:	11fff4ff 	.word	0x11fff4ff
 8008460:	40011000 	.word	0x40011000
 8008464:	58024400 	.word	0x58024400
 8008468:	40004400 	.word	0x40004400
 800846c:	40004800 	.word	0x40004800
 8008470:	40004c00 	.word	0x40004c00
 8008474:	40005000 	.word	0x40005000
 8008478:	2320      	movs	r3, #32
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847e:	e128      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008480:	2340      	movs	r3, #64	@ 0x40
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008486:	e124      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008488:	2380      	movs	r3, #128	@ 0x80
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e120      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4acb      	ldr	r2, [pc, #812]	@ (80087c4 <UART_SetConfig+0x698>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d176      	bne.n	8008588 <UART_SetConfig+0x45c>
 800849a:	4bcb      	ldr	r3, [pc, #812]	@ (80087c8 <UART_SetConfig+0x69c>)
 800849c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084a2:	2b28      	cmp	r3, #40	@ 0x28
 80084a4:	d86c      	bhi.n	8008580 <UART_SetConfig+0x454>
 80084a6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <UART_SetConfig+0x380>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	08008551 	.word	0x08008551
 80084b0:	08008581 	.word	0x08008581
 80084b4:	08008581 	.word	0x08008581
 80084b8:	08008581 	.word	0x08008581
 80084bc:	08008581 	.word	0x08008581
 80084c0:	08008581 	.word	0x08008581
 80084c4:	08008581 	.word	0x08008581
 80084c8:	08008581 	.word	0x08008581
 80084cc:	08008559 	.word	0x08008559
 80084d0:	08008581 	.word	0x08008581
 80084d4:	08008581 	.word	0x08008581
 80084d8:	08008581 	.word	0x08008581
 80084dc:	08008581 	.word	0x08008581
 80084e0:	08008581 	.word	0x08008581
 80084e4:	08008581 	.word	0x08008581
 80084e8:	08008581 	.word	0x08008581
 80084ec:	08008561 	.word	0x08008561
 80084f0:	08008581 	.word	0x08008581
 80084f4:	08008581 	.word	0x08008581
 80084f8:	08008581 	.word	0x08008581
 80084fc:	08008581 	.word	0x08008581
 8008500:	08008581 	.word	0x08008581
 8008504:	08008581 	.word	0x08008581
 8008508:	08008581 	.word	0x08008581
 800850c:	08008569 	.word	0x08008569
 8008510:	08008581 	.word	0x08008581
 8008514:	08008581 	.word	0x08008581
 8008518:	08008581 	.word	0x08008581
 800851c:	08008581 	.word	0x08008581
 8008520:	08008581 	.word	0x08008581
 8008524:	08008581 	.word	0x08008581
 8008528:	08008581 	.word	0x08008581
 800852c:	08008571 	.word	0x08008571
 8008530:	08008581 	.word	0x08008581
 8008534:	08008581 	.word	0x08008581
 8008538:	08008581 	.word	0x08008581
 800853c:	08008581 	.word	0x08008581
 8008540:	08008581 	.word	0x08008581
 8008544:	08008581 	.word	0x08008581
 8008548:	08008581 	.word	0x08008581
 800854c:	08008579 	.word	0x08008579
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008556:	e0bc      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008558:	2304      	movs	r3, #4
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855e:	e0b8      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008560:	2308      	movs	r3, #8
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e0b4      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008568:	2310      	movs	r3, #16
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e0b0      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008570:	2320      	movs	r3, #32
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e0ac      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008578:	2340      	movs	r3, #64	@ 0x40
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e0a8      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e0a4      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a8f      	ldr	r2, [pc, #572]	@ (80087cc <UART_SetConfig+0x6a0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d130      	bne.n	80085f4 <UART_SetConfig+0x4c8>
 8008592:	4b8d      	ldr	r3, [pc, #564]	@ (80087c8 <UART_SetConfig+0x69c>)
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b05      	cmp	r3, #5
 800859c:	d826      	bhi.n	80085ec <UART_SetConfig+0x4c0>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <UART_SetConfig+0x478>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085bd 	.word	0x080085bd
 80085a8:	080085c5 	.word	0x080085c5
 80085ac:	080085cd 	.word	0x080085cd
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085dd 	.word	0x080085dd
 80085b8:	080085e5 	.word	0x080085e5
 80085bc:	2300      	movs	r3, #0
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e086      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085c4:	2304      	movs	r3, #4
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e082      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e07e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085d4:	2310      	movs	r3, #16
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e07a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085dc:	2320      	movs	r3, #32
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e076      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085e4:	2340      	movs	r3, #64	@ 0x40
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e072      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e06e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a75      	ldr	r2, [pc, #468]	@ (80087d0 <UART_SetConfig+0x6a4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d130      	bne.n	8008660 <UART_SetConfig+0x534>
 80085fe:	4b72      	ldr	r3, [pc, #456]	@ (80087c8 <UART_SetConfig+0x69c>)
 8008600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	2b05      	cmp	r3, #5
 8008608:	d826      	bhi.n	8008658 <UART_SetConfig+0x52c>
 800860a:	a201      	add	r2, pc, #4	@ (adr r2, 8008610 <UART_SetConfig+0x4e4>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008629 	.word	0x08008629
 8008614:	08008631 	.word	0x08008631
 8008618:	08008639 	.word	0x08008639
 800861c:	08008641 	.word	0x08008641
 8008620:	08008649 	.word	0x08008649
 8008624:	08008651 	.word	0x08008651
 8008628:	2300      	movs	r3, #0
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e050      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008636:	e04c      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e048      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e044      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008648:	2320      	movs	r3, #32
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e040      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008650:	2340      	movs	r3, #64	@ 0x40
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e03c      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008658:	2380      	movs	r3, #128	@ 0x80
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e038      	b.n	80086d2 <UART_SetConfig+0x5a6>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a5b      	ldr	r2, [pc, #364]	@ (80087d4 <UART_SetConfig+0x6a8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d130      	bne.n	80086cc <UART_SetConfig+0x5a0>
 800866a:	4b57      	ldr	r3, [pc, #348]	@ (80087c8 <UART_SetConfig+0x69c>)
 800866c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	2b05      	cmp	r3, #5
 8008674:	d826      	bhi.n	80086c4 <UART_SetConfig+0x598>
 8008676:	a201      	add	r2, pc, #4	@ (adr r2, 800867c <UART_SetConfig+0x550>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008695 	.word	0x08008695
 8008680:	0800869d 	.word	0x0800869d
 8008684:	080086a5 	.word	0x080086a5
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086bd 	.word	0x080086bd
 8008694:	2302      	movs	r3, #2
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e01a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 800869c:	2304      	movs	r3, #4
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e016      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086a4:	2308      	movs	r3, #8
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e012      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086ac:	2310      	movs	r3, #16
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e00e      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086b4:	2320      	movs	r3, #32
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e00a      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086bc:	2340      	movs	r3, #64	@ 0x40
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e006      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086c4:	2380      	movs	r3, #128	@ 0x80
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e002      	b.n	80086d2 <UART_SetConfig+0x5a6>
 80086cc:	2380      	movs	r3, #128	@ 0x80
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a3f      	ldr	r2, [pc, #252]	@ (80087d4 <UART_SetConfig+0x6a8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	f040 80f8 	bne.w	80088ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	dc46      	bgt.n	8008774 <UART_SetConfig+0x648>
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	f2c0 8082 	blt.w	80087f0 <UART_SetConfig+0x6c4>
 80086ec:	3b02      	subs	r3, #2
 80086ee:	2b1e      	cmp	r3, #30
 80086f0:	d87e      	bhi.n	80087f0 <UART_SetConfig+0x6c4>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x5cc>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	0800877b 	.word	0x0800877b
 80086fc:	080087f1 	.word	0x080087f1
 8008700:	08008783 	.word	0x08008783
 8008704:	080087f1 	.word	0x080087f1
 8008708:	080087f1 	.word	0x080087f1
 800870c:	080087f1 	.word	0x080087f1
 8008710:	08008793 	.word	0x08008793
 8008714:	080087f1 	.word	0x080087f1
 8008718:	080087f1 	.word	0x080087f1
 800871c:	080087f1 	.word	0x080087f1
 8008720:	080087f1 	.word	0x080087f1
 8008724:	080087f1 	.word	0x080087f1
 8008728:	080087f1 	.word	0x080087f1
 800872c:	080087f1 	.word	0x080087f1
 8008730:	080087a3 	.word	0x080087a3
 8008734:	080087f1 	.word	0x080087f1
 8008738:	080087f1 	.word	0x080087f1
 800873c:	080087f1 	.word	0x080087f1
 8008740:	080087f1 	.word	0x080087f1
 8008744:	080087f1 	.word	0x080087f1
 8008748:	080087f1 	.word	0x080087f1
 800874c:	080087f1 	.word	0x080087f1
 8008750:	080087f1 	.word	0x080087f1
 8008754:	080087f1 	.word	0x080087f1
 8008758:	080087f1 	.word	0x080087f1
 800875c:	080087f1 	.word	0x080087f1
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087f1 	.word	0x080087f1
 8008770:	080087e3 	.word	0x080087e3
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d037      	beq.n	80087e8 <UART_SetConfig+0x6bc>
 8008778:	e03a      	b.n	80087f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800877a:	f7fe f8af 	bl	80068dc <HAL_RCCEx_GetD3PCLK1Freq>
 800877e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008780:	e03c      	b.n	80087fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe f8be 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800878c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008790:	e034      	b.n	80087fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008792:	f107 0318 	add.w	r3, r7, #24
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fa0a 	bl	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a0:	e02c      	b.n	80087fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a2:	4b09      	ldr	r3, [pc, #36]	@ (80087c8 <UART_SetConfig+0x69c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ae:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <UART_SetConfig+0x69c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	4a07      	ldr	r2, [pc, #28]	@ (80087d8 <UART_SetConfig+0x6ac>)
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087c0:	e01c      	b.n	80087fc <UART_SetConfig+0x6d0>
 80087c2:	bf00      	nop
 80087c4:	40011400 	.word	0x40011400
 80087c8:	58024400 	.word	0x58024400
 80087cc:	40007800 	.word	0x40007800
 80087d0:	40007c00 	.word	0x40007c00
 80087d4:	58000c00 	.word	0x58000c00
 80087d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80087dc:	4b9d      	ldr	r3, [pc, #628]	@ (8008a54 <UART_SetConfig+0x928>)
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e00c      	b.n	80087fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087e2:	4b9d      	ldr	r3, [pc, #628]	@ (8008a58 <UART_SetConfig+0x92c>)
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e6:	e009      	b.n	80087fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ee:	e005      	b.n	80087fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 81de 	beq.w	8008bc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008808:	4a94      	ldr	r2, [pc, #592]	@ (8008a5c <UART_SetConfig+0x930>)
 800880a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800880e:	461a      	mov	r2, r3
 8008810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008812:	fbb3 f3f2 	udiv	r3, r3, r2
 8008816:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4413      	add	r3, r2
 8008822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008824:	429a      	cmp	r2, r3
 8008826:	d305      	bcc.n	8008834 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800882e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800883a:	e1c1      	b.n	8008bc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883e:	2200      	movs	r2, #0
 8008840:	60bb      	str	r3, [r7, #8]
 8008842:	60fa      	str	r2, [r7, #12]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008848:	4a84      	ldr	r2, [pc, #528]	@ (8008a5c <UART_SetConfig+0x930>)
 800884a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884e:	b29b      	uxth	r3, r3
 8008850:	2200      	movs	r2, #0
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800885e:	f7f7 fd3b 	bl	80002d8 <__aeabi_uldivmod>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	020b      	lsls	r3, r1, #8
 8008874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008878:	0202      	lsls	r2, r0, #8
 800887a:	6979      	ldr	r1, [r7, #20]
 800887c:	6849      	ldr	r1, [r1, #4]
 800887e:	0849      	lsrs	r1, r1, #1
 8008880:	2000      	movs	r0, #0
 8008882:	460c      	mov	r4, r1
 8008884:	4605      	mov	r5, r0
 8008886:	eb12 0804 	adds.w	r8, r2, r4
 800888a:	eb43 0905 	adc.w	r9, r3, r5
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	469a      	mov	sl, r3
 8008896:	4693      	mov	fp, r2
 8008898:	4652      	mov	r2, sl
 800889a:	465b      	mov	r3, fp
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f7 fd1a 	bl	80002d8 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4613      	mov	r3, r2
 80088aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088b2:	d308      	bcc.n	80088c6 <UART_SetConfig+0x79a>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ba:	d204      	bcs.n	80088c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088c2:	60da      	str	r2, [r3, #12]
 80088c4:	e17c      	b.n	8008bc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088cc:	e178      	b.n	8008bc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088d6:	f040 80c5 	bne.w	8008a64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80088da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088de:	2b20      	cmp	r3, #32
 80088e0:	dc48      	bgt.n	8008974 <UART_SetConfig+0x848>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	db7b      	blt.n	80089de <UART_SetConfig+0x8b2>
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d879      	bhi.n	80089de <UART_SetConfig+0x8b2>
 80088ea:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <UART_SetConfig+0x7c4>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	0800897b 	.word	0x0800897b
 80088f4:	08008983 	.word	0x08008983
 80088f8:	080089df 	.word	0x080089df
 80088fc:	080089df 	.word	0x080089df
 8008900:	0800898b 	.word	0x0800898b
 8008904:	080089df 	.word	0x080089df
 8008908:	080089df 	.word	0x080089df
 800890c:	080089df 	.word	0x080089df
 8008910:	0800899b 	.word	0x0800899b
 8008914:	080089df 	.word	0x080089df
 8008918:	080089df 	.word	0x080089df
 800891c:	080089df 	.word	0x080089df
 8008920:	080089df 	.word	0x080089df
 8008924:	080089df 	.word	0x080089df
 8008928:	080089df 	.word	0x080089df
 800892c:	080089df 	.word	0x080089df
 8008930:	080089ab 	.word	0x080089ab
 8008934:	080089df 	.word	0x080089df
 8008938:	080089df 	.word	0x080089df
 800893c:	080089df 	.word	0x080089df
 8008940:	080089df 	.word	0x080089df
 8008944:	080089df 	.word	0x080089df
 8008948:	080089df 	.word	0x080089df
 800894c:	080089df 	.word	0x080089df
 8008950:	080089df 	.word	0x080089df
 8008954:	080089df 	.word	0x080089df
 8008958:	080089df 	.word	0x080089df
 800895c:	080089df 	.word	0x080089df
 8008960:	080089df 	.word	0x080089df
 8008964:	080089df 	.word	0x080089df
 8008968:	080089df 	.word	0x080089df
 800896c:	080089df 	.word	0x080089df
 8008970:	080089d1 	.word	0x080089d1
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d02e      	beq.n	80089d6 <UART_SetConfig+0x8aa>
 8008978:	e031      	b.n	80089de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800897a:	f7fc fd79 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 800897e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008980:	e033      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008982:	f7fc fd8b 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8008986:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008988:	e02f      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800898e:	4618      	mov	r0, r3
 8008990:	f7fd ffba 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008998:	e027      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899a:	f107 0318 	add.w	r3, r7, #24
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe f906 	bl	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e01f      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008a60 <UART_SetConfig+0x934>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a60 <UART_SetConfig+0x934>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a24      	ldr	r2, [pc, #144]	@ (8008a54 <UART_SetConfig+0x928>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089c8:	e00f      	b.n	80089ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80089ca:	4b22      	ldr	r3, [pc, #136]	@ (8008a54 <UART_SetConfig+0x928>)
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ce:	e00c      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089d0:	4b21      	ldr	r3, [pc, #132]	@ (8008a58 <UART_SetConfig+0x92c>)
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d4:	e009      	b.n	80089ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089dc:	e005      	b.n	80089ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80e7 	beq.w	8008bc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	4a19      	ldr	r2, [pc, #100]	@ (8008a5c <UART_SetConfig+0x930>)
 80089f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089fc:	461a      	mov	r2, r3
 80089fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a04:	005a      	lsls	r2, r3, #1
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	441a      	add	r2, r3
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d916      	bls.n	8008a4c <UART_SetConfig+0x920>
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a24:	d212      	bcs.n	8008a4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f023 030f 	bic.w	r3, r3, #15
 8008a2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	e0b9      	b.n	8008bc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a52:	e0b5      	b.n	8008bc0 <UART_SetConfig+0xa94>
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	003d0900 	.word	0x003d0900
 8008a5c:	080090d0 	.word	0x080090d0
 8008a60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	dc49      	bgt.n	8008b00 <UART_SetConfig+0x9d4>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	db7c      	blt.n	8008b6a <UART_SetConfig+0xa3e>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d87a      	bhi.n	8008b6a <UART_SetConfig+0xa3e>
 8008a74:	a201      	add	r2, pc, #4	@ (adr r2, 8008a7c <UART_SetConfig+0x950>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b0f 	.word	0x08008b0f
 8008a84:	08008b6b 	.word	0x08008b6b
 8008a88:	08008b6b 	.word	0x08008b6b
 8008a8c:	08008b17 	.word	0x08008b17
 8008a90:	08008b6b 	.word	0x08008b6b
 8008a94:	08008b6b 	.word	0x08008b6b
 8008a98:	08008b6b 	.word	0x08008b6b
 8008a9c:	08008b27 	.word	0x08008b27
 8008aa0:	08008b6b 	.word	0x08008b6b
 8008aa4:	08008b6b 	.word	0x08008b6b
 8008aa8:	08008b6b 	.word	0x08008b6b
 8008aac:	08008b6b 	.word	0x08008b6b
 8008ab0:	08008b6b 	.word	0x08008b6b
 8008ab4:	08008b6b 	.word	0x08008b6b
 8008ab8:	08008b6b 	.word	0x08008b6b
 8008abc:	08008b37 	.word	0x08008b37
 8008ac0:	08008b6b 	.word	0x08008b6b
 8008ac4:	08008b6b 	.word	0x08008b6b
 8008ac8:	08008b6b 	.word	0x08008b6b
 8008acc:	08008b6b 	.word	0x08008b6b
 8008ad0:	08008b6b 	.word	0x08008b6b
 8008ad4:	08008b6b 	.word	0x08008b6b
 8008ad8:	08008b6b 	.word	0x08008b6b
 8008adc:	08008b6b 	.word	0x08008b6b
 8008ae0:	08008b6b 	.word	0x08008b6b
 8008ae4:	08008b6b 	.word	0x08008b6b
 8008ae8:	08008b6b 	.word	0x08008b6b
 8008aec:	08008b6b 	.word	0x08008b6b
 8008af0:	08008b6b 	.word	0x08008b6b
 8008af4:	08008b6b 	.word	0x08008b6b
 8008af8:	08008b6b 	.word	0x08008b6b
 8008afc:	08008b5d 	.word	0x08008b5d
 8008b00:	2b40      	cmp	r3, #64	@ 0x40
 8008b02:	d02e      	beq.n	8008b62 <UART_SetConfig+0xa36>
 8008b04:	e031      	b.n	8008b6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b06:	f7fc fcb3 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8008b0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b0c:	e033      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b0e:	f7fc fcc5 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8008b12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b14:	e02f      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fd fef4 	bl	8006908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b24:	e027      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b26:	f107 0318 	add.w	r3, r7, #24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe f840 	bl	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b34:	e01f      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b36:	4b2d      	ldr	r3, [pc, #180]	@ (8008bec <UART_SetConfig+0xac0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b42:	4b2a      	ldr	r3, [pc, #168]	@ (8008bec <UART_SetConfig+0xac0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	08db      	lsrs	r3, r3, #3
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	4a28      	ldr	r2, [pc, #160]	@ (8008bf0 <UART_SetConfig+0xac4>)
 8008b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b54:	e00f      	b.n	8008b76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b56:	4b26      	ldr	r3, [pc, #152]	@ (8008bf0 <UART_SetConfig+0xac4>)
 8008b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5a:	e00c      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b5c:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <UART_SetConfig+0xac8>)
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b60:	e009      	b.n	8008b76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b68:	e005      	b.n	8008b76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b74:	bf00      	nop
    }

    if (pclk != 0U)
 8008b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d021      	beq.n	8008bc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <UART_SetConfig+0xacc>)
 8008b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	441a      	add	r2, r3
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	2b0f      	cmp	r3, #15
 8008ba4:	d909      	bls.n	8008bba <UART_SetConfig+0xa8e>
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bac:	d205      	bcs.n	8008bba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60da      	str	r2, [r3, #12]
 8008bb8:	e002      	b.n	8008bc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bdc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3748      	adds	r7, #72	@ 0x48
 8008be4:	46bd      	mov	sp, r7
 8008be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	003d0900 	.word	0x003d0900
 8008bf8:	080090d0 	.word	0x080090d0

08008bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01a      	beq.n	8008d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cfa:	d10a      	bne.n	8008d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	605a      	str	r2, [r3, #4]
  }
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b098      	sub	sp, #96	@ 0x60
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d50:	f7f8 fcf6 	bl	8001740 <HAL_GetTick>
 8008d54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d12f      	bne.n	8008dc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f88e 	bl	8008e94 <UART_WaitOnFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d022      	beq.n	8008dc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e063      	b.n	8008e8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d149      	bne.n	8008e66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f857 	bl	8008e94 <UART_WaitOnFlagUntilTimeout>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d03c      	beq.n	8008e66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e3e:	61fa      	str	r2, [r7, #28]
 8008e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e012      	b.n	8008e8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3758      	adds	r7, #88	@ 0x58
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea4:	e04f      	b.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d04b      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eae:	f7f8 fc47 	bl	8001740 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d302      	bcc.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e04e      	b.n	8008f66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d037      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b80      	cmp	r3, #128	@ 0x80
 8008eda:	d034      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b40      	cmp	r3, #64	@ 0x40
 8008ee0:	d031      	beq.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d110      	bne.n	8008f12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f839 	bl	8008f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2208      	movs	r2, #8
 8008f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e029      	b.n	8008f66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f20:	d111      	bne.n	8008f46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f81f 	bl	8008f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2220      	movs	r2, #32
 8008f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e00f      	b.n	8008f66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69da      	ldr	r2, [r3, #28]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d0a0      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b095      	sub	sp, #84	@ 0x54
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e6      	bne.n	8008f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <UART_EndRxTransfer+0xc8>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d118      	bne.n	8009018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009004:	61bb      	str	r3, [r7, #24]
 8009006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6979      	ldr	r1, [r7, #20]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	613b      	str	r3, [r7, #16]
   return(result);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800902c:	bf00      	nop
 800902e:	3754      	adds	r7, #84	@ 0x54
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	effffffe 	.word	0xeffffffe

0800903c <memset>:
 800903c:	4402      	add	r2, r0
 800903e:	4603      	mov	r3, r0
 8009040:	4293      	cmp	r3, r2
 8009042:	d100      	bne.n	8009046 <memset+0xa>
 8009044:	4770      	bx	lr
 8009046:	f803 1b01 	strb.w	r1, [r3], #1
 800904a:	e7f9      	b.n	8009040 <memset+0x4>

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	@ (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	@ (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	@ (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	@ (8009090 <__libc_init_array+0x44>)
 8009060:	f000 f818 	bl	8009094 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	080090f0 	.word	0x080090f0
 8009088:	080090f0 	.word	0x080090f0
 800908c:	080090f0 	.word	0x080090f0
 8009090:	080090f4 	.word	0x080090f4

08009094 <_init>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr

080090a0 <_fini>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	bf00      	nop
 80090a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a6:	bc08      	pop	{r3}
 80090a8:	469e      	mov	lr, r3
 80090aa:	4770      	bx	lr
