
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08007934  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  24000010  08007944  00009010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400013c  08007944  0000913c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f058  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000022eb  00000000  00000000  00018096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b40  00000000  00000000  0001a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000870  00000000  00000000  0001aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002c7b  00000000  00000000  0001b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001010e  00000000  00000000  0001e3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e0da  00000000  00000000  0002e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018c59b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d3c  00000000  00000000  0018c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  0018f31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080078fc 	.word	0x080078fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080078fc 	.word	0x080078fc

080002d8 <ILI9341_CS_Low>:
volatile bool DMA_Transfer_Complete = false;



// Low-level functions
void ILI9341_CS_Low(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002e2:	4802      	ldr	r0, [pc, #8]	@ (80002ec <ILI9341_CS_Low+0x14>)
 80002e4:	f003 fd74 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	58021800 	.word	0x58021800

080002f0 <ILI9341_CS_High>:

void ILI9341_CS_High(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002fa:	4802      	ldr	r0, [pc, #8]	@ (8000304 <ILI9341_CS_High+0x14>)
 80002fc:	f003 fd68 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	58021800 	.word	0x58021800

08000308 <ILI9341_DC_Low>:

void ILI9341_DC_Low(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2102      	movs	r1, #2
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <ILI9341_DC_Low+0x14>)
 8000312:	f003 fd5d 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	58021800 	.word	0x58021800

08000320 <ILI9341_DC_High>:

void ILI9341_DC_High(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2102      	movs	r1, #2
 8000328:	4802      	ldr	r0, [pc, #8]	@ (8000334 <ILI9341_DC_High+0x14>)
 800032a:	f003 fd51 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	58021800 	.word	0x58021800

08000338 <ILI9341_Reset>:

void ILI9341_Reset(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000342:	4808      	ldr	r0, [pc, #32]	@ (8000364 <ILI9341_Reset+0x2c>)
 8000344:	f003 fd44 	bl	8003dd0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000348:	200a      	movs	r0, #10
 800034a:	f000 fef7 	bl	800113c <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000354:	4803      	ldr	r0, [pc, #12]	@ (8000364 <ILI9341_Reset+0x2c>)
 8000356:	f003 fd3b 	bl	8003dd0 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800035a:	2078      	movs	r0, #120	@ 0x78
 800035c:	f000 feee 	bl	800113c <HAL_Delay>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	58021800 	.word	0x58021800

08000368 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 8000372:	f7ff ffb1 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_Low();  // Command mode
 8000376:	f7ff ffc7 	bl	8000308 <ILI9341_DC_Low>
    HAL_Delay(1);
 800037a:	2001      	movs	r0, #1
 800037c:	f000 fede 	bl	800113c <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000380:	1df9      	adds	r1, r7, #7
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2201      	movs	r2, #1
 8000388:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <ILI9341_WriteCommand+0x38>)
 800038a:	f006 f991 	bl	80066b0 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fed4 	bl	800113c <HAL_Delay>
    ILI9341_CS_High();
 8000394:	f7ff ffac 	bl	80002f0 <ILI9341_CS_High>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2400002c 	.word	0x2400002c

080003a4 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 80003ae:	f7ff ff93 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_High(); // Data mode
 80003b2:	f7ff ffb5 	bl	8000320 <ILI9341_DC_High>
    HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fec0 	bl	800113c <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80003bc:	1df9      	adds	r1, r7, #7
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2201      	movs	r2, #1
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <ILI9341_WriteData+0x38>)
 80003c6:	f006 f973 	bl	80066b0 <HAL_SPI_Transmit>
    HAL_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 feb6 	bl	800113c <HAL_Delay>
    ILI9341_CS_High();
 80003d0:	f7ff ff8e 	bl	80002f0 <ILI9341_CS_High>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2400002c 	.word	0x2400002c

080003e0 <ILI9341_WriteData16>:

void ILI9341_WriteData16(uint16_t data) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;    // High byte
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;  // Low byte
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	737b      	strb	r3, [r7, #13]
    ILI9341_CS_Low();
 80003fa:	f7ff ff6d 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_High();
 80003fe:	f7ff ff8f 	bl	8000320 <ILI9341_DC_High>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000402:	f107 010c 	add.w	r1, r7, #12
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	2202      	movs	r2, #2
 800040c:	4803      	ldr	r0, [pc, #12]	@ (800041c <ILI9341_WriteData16+0x3c>)
 800040e:	f006 f94f 	bl	80066b0 <HAL_SPI_Transmit>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2400002c 	.word	0x2400002c

08000420 <ILI9341_WritePixelData>:
void ILI9341_WritePixelData(int i , uint8_t r, uint8_t g, uint8_t b, uint8_t* frameBuffer){
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	4608      	mov	r0, r1
 800042a:	4611      	mov	r1, r2
 800042c:	461a      	mov	r2, r3
 800042e:	4603      	mov	r3, r0
 8000430:	70fb      	strb	r3, [r7, #3]
 8000432:	460b      	mov	r3, r1
 8000434:	70bb      	strb	r3, [r7, #2]
 8000436:	4613      	mov	r3, r2
 8000438:	707b      	strb	r3, [r7, #1]
	uint16_t data = ((r>>3)<<11)|((g>>2)<<5)|(b>>3);
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	b21b      	sxth	r3, r3
 8000442:	02db      	lsls	r3, r3, #11
 8000444:	b21a      	sxth	r2, r3
 8000446:	78bb      	ldrb	r3, [r7, #2]
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	b21b      	sxth	r3, r3
 800044e:	015b      	lsls	r3, r3, #5
 8000450:	b21b      	sxth	r3, r3
 8000452:	4313      	orrs	r3, r2
 8000454:	b21a      	sxth	r2, r3
 8000456:	787b      	ldrb	r3, [r7, #1]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	b21b      	sxth	r3, r3
 800045e:	4313      	orrs	r3, r2
 8000460:	b21b      	sxth	r3, r3
 8000462:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];
	uint8_t dataBit1 = data>>8;
 8000464:	89fb      	ldrh	r3, [r7, #14]
 8000466:	0a1b      	lsrs	r3, r3, #8
 8000468:	b29b      	uxth	r3, r3
 800046a:	737b      	strb	r3, [r7, #13]
	uint8_t dataBit2 = data&0xFF;
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	733b      	strb	r3, [r7, #12]
	frameBuffer[2*i] = dataBit1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4413      	add	r3, r2
 800047a:	7b7a      	ldrb	r2, [r7, #13]
 800047c:	701a      	strb	r2, [r3, #0]
	frameBuffer[(2*i)+1] = dataBit2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	3301      	adds	r3, #1
 8000484:	69ba      	ldr	r2, [r7, #24]
 8000486:	4413      	add	r3, r2
 8000488:	7b3a      	ldrb	r2, [r7, #12]
 800048a:	701a      	strb	r2, [r3, #0]





}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <ILI9341_ReadID>:
void RGB565Hex(uint8_t r, uint8_t b, uint8_t g){

}

// Hardware connectivity test
uint32_t ILI9341_ReadID(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
    uint8_t data[4];

    ILI9341_CS_Low();
 800049e:	f7ff ff1b 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_Low();
 80004a2:	f7ff ff31 	bl	8000308 <ILI9341_DC_Low>
    uint8_t cmd = ILI9341_RDDID;
 80004a6:	2304      	movs	r3, #4
 80004a8:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80004aa:	1cf9      	adds	r1, r7, #3
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	2201      	movs	r2, #1
 80004b2:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <ILI9341_ReadID+0x4c>)
 80004b4:	f006 f8fc 	bl	80066b0 <HAL_SPI_Transmit>

    ILI9341_DC_High();
 80004b8:	f7ff ff32 	bl	8000320 <ILI9341_DC_High>
    HAL_SPI_Receive(&hspi1, data, 4, HAL_MAX_DELAY);
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	2204      	movs	r2, #4
 80004c4:	4807      	ldr	r0, [pc, #28]	@ (80004e4 <ILI9341_ReadID+0x4c>)
 80004c6:	f006 fae1 	bl	8006a8c <HAL_SPI_Receive>
    ILI9341_CS_High();
 80004ca:	f7ff ff11 	bl	80002f0 <ILI9341_CS_High>

    return (data[1] << 16) | (data[2] << 8) | data[3];
 80004ce:	797b      	ldrb	r3, [r7, #5]
 80004d0:	041a      	lsls	r2, r3, #16
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	021b      	lsls	r3, r3, #8
 80004d6:	4313      	orrs	r3, r2
 80004d8:	79fa      	ldrb	r2, [r7, #7]
 80004da:	4313      	orrs	r3, r2
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2400002c 	.word	0x2400002c

080004e8 <ILI9341_Init>:

void ILI9341_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 80004ec:	f7ff ff24 	bl	8000338 <ILI9341_Reset>

    // Software reset
    ILI9341_WriteCommand(ILI9341_SWRESET);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff ff39 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(150);
 80004f6:	2096      	movs	r0, #150	@ 0x96
 80004f8:	f000 fe20 	bl	800113c <HAL_Delay>

    // Sleep out
    ILI9341_WriteCommand(ILI9341_SLPOUT);
 80004fc:	2011      	movs	r0, #17
 80004fe:	f7ff ff33 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000502:	2078      	movs	r0, #120	@ 0x78
 8000504:	f000 fe1a 	bl	800113c <HAL_Delay>
    ILI9341_WriteCommand(0x3A);
 8000508:	203a      	movs	r0, #58	@ 0x3a
 800050a:	f7ff ff2d 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);
 800050e:	2055      	movs	r0, #85	@ 0x55
 8000510:	f7ff ff48 	bl	80003a4 <ILI9341_WriteData>
    ILI9341_WriteCommand(0x36);
 8000514:	2036      	movs	r0, #54	@ 0x36
 8000516:	f7ff ff27 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 800051a:	2008      	movs	r0, #8
 800051c:	f7ff ff42 	bl	80003a4 <ILI9341_WriteData>

    // Display on
    ILI9341_WriteCommand(ILI9341_DISPON);
 8000520:	2029      	movs	r0, #41	@ 0x29
 8000522:	f7ff ff21 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000526:	2078      	movs	r0, #120	@ 0x78
 8000528:	f000 fe08 	bl	800113c <HAL_Delay>

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // Column address set
    ILI9341_WriteCommand(ILI9341_CASET);
 800054e:	202a      	movs	r0, #42	@ 0x2a
 8000550:	f7ff ff0a 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData16(x0);
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff42 	bl	80003e0 <ILI9341_WriteData16>
    ILI9341_WriteData16(x1);
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff3e 	bl	80003e0 <ILI9341_WriteData16>

    // Page address set
    ILI9341_WriteCommand(ILI9341_PASET);
 8000564:	202b      	movs	r0, #43	@ 0x2b
 8000566:	f7ff feff 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData16(y0);
 800056a:	88bb      	ldrh	r3, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff37 	bl	80003e0 <ILI9341_WriteData16>
    ILI9341_WriteData16(y1);
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff33 	bl	80003e0 <ILI9341_WriteData16>

    // Memory write
    ILI9341_WriteCommand(ILI9341_RAMWR);
 800057a:	202c      	movs	r0, #44	@ 0x2c
 800057c:	f7ff fef4 	bl	8000368 <ILI9341_WriteCommand>
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bd90      	pop	{r4, r7, pc}

08000588 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color, uint8_t rowCounter) {
 8000588:	b580      	push	{r7, lr}
 800058a:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 800058e:	b08a      	sub	sp, #40	@ 0x28
 8000590:	af02      	add	r7, sp, #8
 8000592:	4602      	mov	r2, r0
 8000594:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000598:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 800059c:	801a      	strh	r2, [r3, #0]
 800059e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80005a2:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 80005a6:	460a      	mov	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]

    uint8_t color1 = 255;
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	4a74      	ldr	r2, [pc, #464]	@ (8000780 <ILI9341_FillScreen+0x1f8>)
 80005ae:	443a      	add	r2, r7
 80005b0:	7013      	strb	r3, [r2, #0]
    uint8_t color2 = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	4a73      	ldr	r2, [pc, #460]	@ (8000784 <ILI9341_FillScreen+0x1fc>)
 80005b6:	443a      	add	r2, r7
 80005b8:	7013      	strb	r3, [r2, #0]
    uint8_t color3 = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	4a72      	ldr	r2, [pc, #456]	@ (8000788 <ILI9341_FillScreen+0x200>)
 80005be:	443a      	add	r2, r7
 80005c0:	7013      	strb	r3, [r2, #0]
    uint8_t frameBuffer[153600];
    int section = 51200;
 80005c2:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80005c6:	4a71      	ldr	r2, [pc, #452]	@ (800078c <ILI9341_FillScreen+0x204>)
 80005c8:	443a      	add	r2, r7
 80005ca:	6013      	str	r3, [r2, #0]
    int sectionCount = 153600/section;
 80005cc:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80005d0:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <ILI9341_FillScreen+0x204>)
 80005d2:	443b      	add	r3, r7
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005da:	4a6d      	ldr	r2, [pc, #436]	@ (8000790 <ILI9341_FillScreen+0x208>)
 80005dc:	443a      	add	r2, r7
 80005de:	6013      	str	r3, [r2, #0]

    for(int i = 0; i < 76800; i++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	4a6c      	ldr	r2, [pc, #432]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80005e4:	443a      	add	r2, r7
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e077      	b.n	80006da <ILI9341_FillScreen+0x152>
    	if(i%1920==0){
 80005ea:	4b6a      	ldr	r3, [pc, #424]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80005ec:	443b      	add	r3, r7
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <ILI9341_FillScreen+0x210>)
 80005f2:	fb83 1302 	smull	r1, r3, r3, r2
 80005f6:	4413      	add	r3, r2
 80005f8:	1299      	asrs	r1, r3, #10
 80005fa:	17d3      	asrs	r3, r2, #31
 80005fc:	1ac9      	subs	r1, r1, r3
 80005fe:	460b      	mov	r3, r1
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	1a5b      	subs	r3, r3, r1
 8000604:	01db      	lsls	r3, r3, #7
 8000606:	1ad1      	subs	r1, r2, r3
 8000608:	2900      	cmp	r1, #0
 800060a:	d149      	bne.n	80006a0 <ILI9341_FillScreen+0x118>
    		rowCounter++;
 800060c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000610:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800061a:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 800061e:	3201      	adds	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
    		switch(rowCounter%3){
 8000622:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000626:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b5b      	ldr	r3, [pc, #364]	@ (800079c <ILI9341_FillScreen+0x214>)
 800062e:	fba3 1302 	umull	r1, r3, r3, r2
 8000632:	0859      	lsrs	r1, r3, #1
 8000634:	460b      	mov	r3, r1
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	440b      	add	r3, r1
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b02      	cmp	r3, #2
 8000640:	d020      	beq.n	8000684 <ILI9341_FillScreen+0xfc>
 8000642:	2b02      	cmp	r3, #2
 8000644:	dc2b      	bgt.n	800069e <ILI9341_FillScreen+0x116>
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <ILI9341_FillScreen+0xc8>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00d      	beq.n	800066a <ILI9341_FillScreen+0xe2>
    			color1 = 255;
    			color2 = 245;
    			color3 = 238;
    			break;
    		default:
    			break;
 800064e:	e026      	b.n	800069e <ILI9341_FillScreen+0x116>
    			color1 = 255;
 8000650:	23ff      	movs	r3, #255	@ 0xff
 8000652:	4a4b      	ldr	r2, [pc, #300]	@ (8000780 <ILI9341_FillScreen+0x1f8>)
 8000654:	443a      	add	r2, r7
 8000656:	7013      	strb	r3, [r2, #0]
    			color2 = 127;
 8000658:	237f      	movs	r3, #127	@ 0x7f
 800065a:	4a4a      	ldr	r2, [pc, #296]	@ (8000784 <ILI9341_FillScreen+0x1fc>)
 800065c:	443a      	add	r2, r7
 800065e:	7013      	strb	r3, [r2, #0]
    			color3 = 80;
 8000660:	2350      	movs	r3, #80	@ 0x50
 8000662:	4a49      	ldr	r2, [pc, #292]	@ (8000788 <ILI9341_FillScreen+0x200>)
 8000664:	443a      	add	r2, r7
 8000666:	7013      	strb	r3, [r2, #0]
    			break;
 8000668:	e01a      	b.n	80006a0 <ILI9341_FillScreen+0x118>
    			color1 = 46;
 800066a:	232e      	movs	r3, #46	@ 0x2e
 800066c:	4a44      	ldr	r2, [pc, #272]	@ (8000780 <ILI9341_FillScreen+0x1f8>)
 800066e:	443a      	add	r2, r7
 8000670:	7013      	strb	r3, [r2, #0]
    			color2 = 139;
 8000672:	238b      	movs	r3, #139	@ 0x8b
 8000674:	4a43      	ldr	r2, [pc, #268]	@ (8000784 <ILI9341_FillScreen+0x1fc>)
 8000676:	443a      	add	r2, r7
 8000678:	7013      	strb	r3, [r2, #0]
    			color3 = 87;
 800067a:	2357      	movs	r3, #87	@ 0x57
 800067c:	4a42      	ldr	r2, [pc, #264]	@ (8000788 <ILI9341_FillScreen+0x200>)
 800067e:	443a      	add	r2, r7
 8000680:	7013      	strb	r3, [r2, #0]
    			break;
 8000682:	e00d      	b.n	80006a0 <ILI9341_FillScreen+0x118>
    			color1 = 255;
 8000684:	23ff      	movs	r3, #255	@ 0xff
 8000686:	4a3e      	ldr	r2, [pc, #248]	@ (8000780 <ILI9341_FillScreen+0x1f8>)
 8000688:	443a      	add	r2, r7
 800068a:	7013      	strb	r3, [r2, #0]
    			color2 = 245;
 800068c:	23f5      	movs	r3, #245	@ 0xf5
 800068e:	4a3d      	ldr	r2, [pc, #244]	@ (8000784 <ILI9341_FillScreen+0x1fc>)
 8000690:	443a      	add	r2, r7
 8000692:	7013      	strb	r3, [r2, #0]
    			color3 = 238;
 8000694:	23ee      	movs	r3, #238	@ 0xee
 8000696:	4a3c      	ldr	r2, [pc, #240]	@ (8000788 <ILI9341_FillScreen+0x200>)
 8000698:	443a      	add	r2, r7
 800069a:	7013      	strb	r3, [r2, #0]
    			break;
 800069c:	e000      	b.n	80006a0 <ILI9341_FillScreen+0x118>
    			break;
 800069e:	bf00      	nop
    		}

    	}
    	//ILI9341_WriteData16(color);

        ILI9341_WritePixelData(i, color1,color2,color3, frameBuffer);
 80006a0:	4b39      	ldr	r3, [pc, #228]	@ (8000788 <ILI9341_FillScreen+0x200>)
 80006a2:	443b      	add	r3, r7
 80006a4:	7818      	ldrb	r0, [r3, #0]
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <ILI9341_FillScreen+0x1fc>)
 80006a8:	443b      	add	r3, r7
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <ILI9341_FillScreen+0x1f8>)
 80006ae:	443b      	add	r3, r7
 80006b0:	7819      	ldrb	r1, [r3, #0]
 80006b2:	4b3b      	ldr	r3, [pc, #236]	@ (80007a0 <ILI9341_FillScreen+0x218>)
 80006b4:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80006b8:	f103 0320 	add.w	r3, r3, #32
 80006bc:	443b      	add	r3, r7
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	4834      	ldr	r0, [pc, #208]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80006c4:	4438      	add	r0, r7
 80006c6:	6800      	ldr	r0, [r0, #0]
 80006c8:	f7ff feaa 	bl	8000420 <ILI9341_WritePixelData>
    for(int i = 0; i < 76800; i++) {
 80006cc:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80006ce:	443b      	add	r3, r7
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80006d6:	443a      	add	r2, r7
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <ILI9341_FillScreen+0x20c>)
 80006dc:	443b      	add	r3, r7
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80006e4:	db81      	blt.n	80005ea <ILI9341_FillScreen+0x62>

    }// 240 * 320 pixels
    ILI9341_SetWindow(0, 0, 239, 319);
 80006e6:	f240 133f 	movw	r3, #319	@ 0x13f
 80006ea:	22ef      	movs	r2, #239	@ 0xef
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff1e 	bl	8000530 <ILI9341_SetWindow>
	ILI9341_CS_Low();
 80006f4:	f7ff fdf0 	bl	80002d8 <ILI9341_CS_Low>
	ILI9341_DC_High();
 80006f8:	f7ff fe12 	bl	8000320 <ILI9341_DC_High>
    for (int i = 0; i <sectionCount;i++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <ILI9341_FillScreen+0x21c>)
 8000700:	443a      	add	r2, r7
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e029      	b.n	800075a <ILI9341_FillScreen+0x1d2>
    	HAL_SPI_Transmit_DMA(&hspi1, &frameBuffer[i*section], section);
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <ILI9341_FillScreen+0x21c>)
 8000708:	443b      	add	r3, r7
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1f      	ldr	r2, [pc, #124]	@ (800078c <ILI9341_FillScreen+0x204>)
 800070e:	443a      	add	r2, r7
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	fb03 f202 	mul.w	r2, r3, r2
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <ILI9341_FillScreen+0x218>)
 8000718:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800071c:	f103 0320 	add.w	r3, r3, #32
 8000720:	443b      	add	r3, r7
 8000722:	4413      	add	r3, r2
 8000724:	4a19      	ldr	r2, [pc, #100]	@ (800078c <ILI9341_FillScreen+0x204>)
 8000726:	443a      	add	r2, r7
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	b292      	uxth	r2, r2
 800072c:	4619      	mov	r1, r3
 800072e:	481e      	ldr	r0, [pc, #120]	@ (80007a8 <ILI9341_FillScreen+0x220>)
 8000730:	f006 fc1e 	bl	8006f70 <HAL_SPI_Transmit_DMA>
        while(!DMA_Transfer_Complete);
 8000734:	bf00      	nop
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <ILI9341_FillScreen+0x224>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f7      	bne.n	8000736 <ILI9341_FillScreen+0x1ae>
        DMA_Transfer_Complete = false;
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <ILI9341_FillScreen+0x224>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <sectionCount;i++){
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <ILI9341_FillScreen+0x21c>)
 800074e:	443b      	add	r3, r7
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <ILI9341_FillScreen+0x21c>)
 8000756:	443a      	add	r2, r7
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <ILI9341_FillScreen+0x21c>)
 800075c:	443b      	add	r3, r7
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <ILI9341_FillScreen+0x208>)
 8000762:	443b      	add	r3, r7
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	429a      	cmp	r2, r3
 8000768:	dbcd      	blt.n	8000706 <ILI9341_FillScreen+0x17e>
    }

	ILI9341_CS_High();
 800076a:	f7ff fdc1 	bl	80002f0 <ILI9341_CS_High>
	HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	@ 0x64
 8000770:	f000 fce4 	bl	800113c <HAL_Delay>
}
 8000774:	bf00      	nop
 8000776:	f507 3716 	add.w	r7, r7, #153600	@ 0x25800
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0002581f 	.word	0x0002581f
 8000784:	0002581e 	.word	0x0002581e
 8000788:	0002581d 	.word	0x0002581d
 800078c:	00025810 	.word	0x00025810
 8000790:	0002580c 	.word	0x0002580c
 8000794:	00025818 	.word	0x00025818
 8000798:	88888889 	.word	0x88888889
 800079c:	aaaaaaab 	.word	0xaaaaaaab
 80007a0:	fffda7ec 	.word	0xfffda7ec
 80007a4:	00025814 	.word	0x00025814
 80007a8:	2400002c 	.word	0x2400002c
 80007ac:	240000b4 	.word	0x240000b4

080007b0 <ILI9341_TestPattern>:
    ILI9341_SetWindow(x, y, x, y);
    ILI9341_WriteData16(color);
}

// Simple test pattern
void ILI9341_TestPattern(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    // Fill screen with different colors to test
	int frameCounter = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
	while(1){
		frameCounter++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
	    ILI9341_FillScreen(COLOR_RED, frameCounter);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80007ca:	f7ff fedd 	bl	8000588 <ILI9341_FillScreen>
		frameCounter++;
 80007ce:	bf00      	nop
 80007d0:	e7f3      	b.n	80007ba <ILI9341_TestPattern+0xa>
	...

080007d4 <Test_SPI_Data>:
        }
    }
}

// Simple test to verify SPI data transmission
void Test_SPI_Data(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xFF;
 80007da:	23ff      	movs	r3, #255	@ 0xff
 80007dc:	70fb      	strb	r3, [r7, #3]

    for(int i = 0; i < 20; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	e012      	b.n	800080a <Test_SPI_Data+0x36>
        ILI9341_CS_Low();
 80007e4:	f7ff fd78 	bl	80002d8 <ILI9341_CS_Low>
        ILI9341_DC_High();
 80007e8:	f7ff fd9a 	bl	8000320 <ILI9341_DC_High>
        HAL_SPI_Transmit(&hspi1, &test_data, 1, HAL_MAX_DELAY);
 80007ec:	1cf9      	adds	r1, r7, #3
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	2201      	movs	r2, #1
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <Test_SPI_Data+0x48>)
 80007f6:	f005 ff5b 	bl	80066b0 <HAL_SPI_Transmit>
        ILI9341_CS_High();
 80007fa:	f7ff fd79 	bl	80002f0 <ILI9341_CS_High>
        HAL_Delay(200);
 80007fe:	20c8      	movs	r0, #200	@ 0xc8
 8000800:	f000 fc9c 	bl	800113c <HAL_Delay>
    for(int i = 0; i < 20; i++) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b13      	cmp	r3, #19
 800080e:	dde9      	ble.n	80007e4 <Test_SPI_Data+0x10>
    }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2400002c 	.word	0x2400002c

08000820 <HAL_SPI_TxCpltCallback>:
void SPITest(void){
	ILI9341_CS_Low();
	ILI9341_DC_High();

}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <HAL_SPI_TxCpltCallback+0x24>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d102      	bne.n	8000838 <HAL_SPI_TxCpltCallback+0x18>
    	DMA_Transfer_Complete = true;  // YOU set your own flag
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <HAL_SPI_TxCpltCallback+0x28>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
    }
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40013000 	.word	0x40013000
 8000848:	240000b4 	.word	0x240000b4

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fbe1 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f815 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f90d 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 800085e:	f000 f8eb 	bl	8000a38 <MX_DMA_Init>
  MX_SPI1_Init();
 8000862:	f000 f88b 	bl	800097c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // First test raw SPI data transmission

  // Test hardware connection
  uint32_t id = ILI9341_ReadID();
 8000866:	f7ff fe17 	bl	8000498 <ILI9341_ReadID>
 800086a:	6078      	str	r0, [r7, #4]

  // Initialize display
  ILI9341_Init();
 800086c:	f7ff fe3c 	bl	80004e8 <ILI9341_Init>
  Test_SPI_Data();
 8000870:	f7ff ffb0 	bl	80007d4 <Test_SPI_Data>



  // Run test pattern
  while(1) {
      ILI9341_TestPattern();
 8000874:	f7ff ff9c 	bl	80007b0 <ILI9341_TestPattern>
      HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087c:	f000 fc5e 	bl	800113c <HAL_Delay>
      ILI9341_TestPattern();
 8000880:	bf00      	nop
 8000882:	e7f7      	b.n	8000874 <main+0x28>

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	@ 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	224c      	movs	r2, #76	@ 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f007 f805 	bl	80078a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 ffff 	bl	80078a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f003 faad 	bl	8003e04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <SystemClock_Config+0xf0>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b2:	4a30      	ldr	r2, [pc, #192]	@ (8000974 <SystemClock_Config+0xf0>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <SystemClock_Config+0xf0>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <SystemClock_Config+0xf4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000978 <SystemClock_Config+0xf4>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <SystemClock_Config+0xf4>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e0:	bf00      	nop
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <SystemClock_Config+0xf4>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ee:	d1f8      	bne.n	80008e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	2302      	movs	r3, #2
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000906:	2348      	movs	r3, #72	@ 0x48
 8000908:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800090e:	2306      	movs	r3, #6
 8000910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000916:	2308      	movs	r3, #8
 8000918:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f003 faa6 	bl	8003e78 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000932:	f000 f93d 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	233f      	movs	r3, #63	@ 0x3f
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fee6 	bl	800472c <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000966:	f000 f923 	bl	8000bb0 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3770      	adds	r7, #112	@ 0x70
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	58000400 	.word	0x58000400
 8000978:	58024800 	.word	0x58024800

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000982:	4a2c      	ldr	r2, [pc, #176]	@ (8000a34 <MX_SPI1_Init+0xb8>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000988:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800098e:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000990:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000994:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000998:	2207      	movs	r2, #7
 800099a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000a0e:	f005 fd2b 	bl	8006468 <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a18:	f000 f8ca 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <MX_SPI1_Init+0xb4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0201 	orr.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2400002c 	.word	0x2400002c
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a44:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_DMA_Init+0x3c>)
 8000a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200b      	movs	r0, #11
 8000a62:	f000 fc76 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a66:	200b      	movs	r0, #11
 8000a68:	f000 fc8d 	bl	8001386 <HAL_NVIC_EnableIRQ>

}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58024400 	.word	0x58024400

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a94:	4a43      	ldr	r2, [pc, #268]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9e:	4b41      	ldr	r3, [pc, #260]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abc:	4b39      	ldr	r3, [pc, #228]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	4a34      	ldr	r2, [pc, #208]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ada:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b16:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_GPIO_Init+0x12c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_PIN_GPIO_Port, LCD_DC_PIN_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2102      	movs	r1, #2
 8000b46:	4818      	ldr	r0, [pc, #96]	@ (8000ba8 <MX_GPIO_Init+0x130>)
 8000b48:	f003 f942 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_RST_PIN_Pin|LCD_CS_PIN_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000b52:	4815      	ldr	r0, [pc, #84]	@ (8000ba8 <MX_GPIO_Init+0x130>)
 8000b54:	f003 f93c 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <MX_GPIO_Init+0x134>)
 8000b5e:	f003 f937 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_PIN_Pin LCD_RST_PIN_Pin LCD_CS_PIN_Pin */
  GPIO_InitStruct.Pin = LCD_DC_PIN_Pin|LCD_RST_PIN_Pin|LCD_CS_PIN_Pin;
 8000b62:	f249 0302 	movw	r3, #36866	@ 0x9002
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0x130>)
 8000b7c:	f002 ff78 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_GPIO_Init+0x134>)
 8000b98:	f002 ff6a 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3730      	adds	r7, #48	@ 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	58021800 	.word	0x58021800
 8000bac:	58021000 	.word	0x58021000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x30>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0bc      	sub	sp, #240	@ 0xf0
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	22c0      	movs	r2, #192	@ 0xc0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f006 fe46 	bl	80078a2 <memset>
  if(hspi->Instance==SPI1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a58      	ldr	r2, [pc, #352]	@ (8000d7c <HAL_SPI_MspInit+0x18c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f040 80a8 	bne.w	8000d72 <HAL_SPI_MspInit+0x182>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 f8a8 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000c42:	f7ff ffb5 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	4b4e      	ldr	r3, [pc, #312]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c56:	4b4a      	ldr	r3, [pc, #296]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a45      	ldr	r2, [pc, #276]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b42      	ldr	r3, [pc, #264]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b3f      	ldr	r3, [pc, #252]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a3d      	ldr	r2, [pc, #244]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <HAL_SPI_MspInit+0x190>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482f      	ldr	r0, [pc, #188]	@ (8000d84 <HAL_SPI_MspInit+0x194>)
 8000cc6:	f002 fed3 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cca:	2380      	movs	r3, #128	@ 0x80
 8000ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cec:	4619      	mov	r1, r3
 8000cee:	4826      	ldr	r0, [pc, #152]	@ (8000d88 <HAL_SPI_MspInit+0x198>)
 8000cf0:	f002 febe 	bl	8003a70 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000cf6:	4a26      	ldr	r2, [pc, #152]	@ (8000d90 <HAL_SPI_MspInit+0x1a0>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000cfc:	2226      	movs	r2, #38	@ 0x26
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d02:	2240      	movs	r2, #64	@ 0x40
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d48:	f000 fb38 	bl	80013bc <HAL_DMA_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8000d52:	f7ff ff2d 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d5a:	679a      	str	r2, [r3, #120]	@ 0x78
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_SPI_MspInit+0x19c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2023      	movs	r0, #35	@ 0x23
 8000d68:	f000 faf3 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d6c:	2023      	movs	r0, #35	@ 0x23
 8000d6e:	f000 fb0a 	bl	8001386 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d72:	bf00      	nop
 8000d74:	37f0      	adds	r7, #240	@ 0xf0
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020000 	.word	0x58020000
 8000d88:	58020c00 	.word	0x58020c00
 8000d8c:	240000b8 	.word	0x240000b8
 8000d90:	40020010 	.word	0x40020010

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f987 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <DMA1_Stream0_IRQHandler+0x10>)
 8000dfa:	f001 faeb 	bl	80023d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	240000b8 	.word	0x240000b8

08000e08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <SPI1_IRQHandler+0x10>)
 8000e0e:	f006 f9f1 	bl	80071f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2400002c 	.word	0x2400002c

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f8e7 	bl	8000ff4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <SystemInit+0x114>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <SystemInit+0x114>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b40      	ldr	r3, [pc, #256]	@ (8000f44 <SystemInit+0x118>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <SystemInit+0x118>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a3b      	ldr	r2, [pc, #236]	@ (8000f44 <SystemInit+0x118>)
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f48 <SystemInit+0x11c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a39      	ldr	r2, [pc, #228]	@ (8000f48 <SystemInit+0x11c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <SystemInit+0x11c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <SystemInit+0x11c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4935      	ldr	r1, [pc, #212]	@ (8000f48 <SystemInit+0x11c>)
 8000e74:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <SystemInit+0x120>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <SystemInit+0x118>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <SystemInit+0x118>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f44 <SystemInit+0x118>)
 8000e90:	f043 0307 	orr.w	r3, r3, #7
 8000e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e96:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <SystemInit+0x11c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <SystemInit+0x11c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ea2:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <SystemInit+0x11c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <SystemInit+0x11c>)
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <SystemInit+0x124>)
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <SystemInit+0x11c>)
 8000eb0:	4a28      	ldr	r2, [pc, #160]	@ (8000f54 <SystemInit+0x128>)
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <SystemInit+0x11c>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <SystemInit+0x12c>)
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <SystemInit+0x11c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <SystemInit+0x11c>)
 8000ec2:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <SystemInit+0x12c>)
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <SystemInit+0x11c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <SystemInit+0x11c>)
 8000ece:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <SystemInit+0x12c>)
 8000ed0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <SystemInit+0x11c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <SystemInit+0x11c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f48 <SystemInit+0x11c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <SystemInit+0x11c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <SystemInit+0x130>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <SystemInit+0x134>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ef6:	d202      	bcs.n	8000efe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <SystemInit+0x138>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <SystemInit+0x11c>)
 8000f00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d113      	bne.n	8000f34 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <SystemInit+0x11c>)
 8000f0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f12:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <SystemInit+0x11c>)
 8000f14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <SystemInit+0x13c>)
 8000f1e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f22:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <SystemInit+0x11c>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f2a:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <SystemInit+0x11c>)
 8000f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	52002000 	.word	0x52002000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f50:	02020200 	.word	0x02020200
 8000f54:	01ff0000 	.word	0x01ff0000
 8000f58:	01010280 	.word	0x01010280
 8000f5c:	5c001000 	.word	0x5c001000
 8000f60:	ffff0000 	.word	0xffff0000
 8000f64:	51008108 	.word	0x51008108
 8000f68:	52004000 	.word	0x52004000

08000f6c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <ExitRun0Mode+0x2c>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <ExitRun0Mode+0x2c>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f7c:	bf00      	nop
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <ExitRun0Mode+0x2c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f9      	beq.n	8000f7e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	58024800 	.word	0x58024800

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fd8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fa0:	f7ff ffe4 	bl	8000f6c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa4:	f7ff ff42 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x16>)
   ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f006 fc71 	bl	80078b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fc3b 	bl	800084c <main>
  bx  lr
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe0:	24000010 	.word	0x24000010
   ldr r2, =_sidata
 8000fe4:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 8000fe8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fec:	2400013c 	.word	0x2400013c

08000ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC3_IRQHandler>
	...

08000ff4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <BSP_PB_IRQHandler+0x20>)
 8001004:	4413      	add	r3, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fd02 	bl	8003a10 <HAL_EXTI_IRQHandler>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	24000130 	.word	0x24000130

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f98c 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001024:	f003 fd38 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8001028:	4602      	mov	r2, r0
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_Init+0x68>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	f003 030f 	and.w	r3, r3, #15
 8001034:	4913      	ldr	r1, [pc, #76]	@ (8001084 <HAL_Init+0x6c>)
 8001036:	5ccb      	ldrb	r3, [r1, r3]
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <HAL_Init+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <HAL_Init+0x6c>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_Init+0x70>)
 800105a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_Init+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f814 	bl	8001090 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e002      	b.n	8001078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001072:	f7ff fda3 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024400 	.word	0x58024400
 8001084:	08007914 	.word	0x08007914
 8001088:	24000004 	.word	0x24000004
 800108c:	24000000 	.word	0x24000000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e021      	b.n	80010e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_InitTick+0x64>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_InitTick+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f971 	bl	80013a2 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f93b 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_InitTick+0x68>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2400000c 	.word	0x2400000c
 80010f4:	24000000 	.word	0x24000000
 80010f8:	24000008 	.word	0x24000008

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2400000c 	.word	0x2400000c
 8001120:	24000138 	.word	0x24000138

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000138 	.word	0x24000138

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2400000c 	.word	0x2400000c

08001184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetREVID+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0c1b      	lsrs	r3, r3, #16
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	5c001000 	.word	0x5c001000

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	05fa0000 	.word	0x05fa0000

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	@ (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	@ (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	@ (800128c <__NVIC_SetPriority+0x50>)
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff40 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff33 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa4 	bl	80012f8 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff feae 	bl	8001124 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e316      	b.n	8001a02 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a66      	ldr	r2, [pc, #408]	@ (8001574 <HAL_DMA_Init+0x1b8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d04a      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a65      	ldr	r2, [pc, #404]	@ (8001578 <HAL_DMA_Init+0x1bc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d045      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a63      	ldr	r2, [pc, #396]	@ (800157c <HAL_DMA_Init+0x1c0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d040      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a62      	ldr	r2, [pc, #392]	@ (8001580 <HAL_DMA_Init+0x1c4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d03b      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a60      	ldr	r2, [pc, #384]	@ (8001584 <HAL_DMA_Init+0x1c8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d036      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5f      	ldr	r2, [pc, #380]	@ (8001588 <HAL_DMA_Init+0x1cc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d031      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a5d      	ldr	r2, [pc, #372]	@ (800158c <HAL_DMA_Init+0x1d0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d02c      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a5c      	ldr	r2, [pc, #368]	@ (8001590 <HAL_DMA_Init+0x1d4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d027      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a5a      	ldr	r2, [pc, #360]	@ (8001594 <HAL_DMA_Init+0x1d8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d022      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a59      	ldr	r2, [pc, #356]	@ (8001598 <HAL_DMA_Init+0x1dc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d01d      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a57      	ldr	r2, [pc, #348]	@ (800159c <HAL_DMA_Init+0x1e0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d018      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a56      	ldr	r2, [pc, #344]	@ (80015a0 <HAL_DMA_Init+0x1e4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <HAL_DMA_Init+0x1e8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00e      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a53      	ldr	r2, [pc, #332]	@ (80015a8 <HAL_DMA_Init+0x1ec>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d009      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a51      	ldr	r2, [pc, #324]	@ (80015ac <HAL_DMA_Init+0x1f0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_DMA_Init+0xb8>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a50      	ldr	r2, [pc, #320]	@ (80015b0 <HAL_DMA_Init+0x1f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_DMA_Init+0xbc>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_DMA_Init+0xbe>
 8001478:	2300      	movs	r3, #0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 813b 	beq.w	80016f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a37      	ldr	r2, [pc, #220]	@ (8001574 <HAL_DMA_Init+0x1b8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d04a      	beq.n	8001530 <HAL_DMA_Init+0x174>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a36      	ldr	r2, [pc, #216]	@ (8001578 <HAL_DMA_Init+0x1bc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d045      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a34      	ldr	r2, [pc, #208]	@ (800157c <HAL_DMA_Init+0x1c0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d040      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <HAL_DMA_Init+0x1c4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d03b      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a31      	ldr	r2, [pc, #196]	@ (8001584 <HAL_DMA_Init+0x1c8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d036      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a30      	ldr	r2, [pc, #192]	@ (8001588 <HAL_DMA_Init+0x1cc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d031      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2e      	ldr	r2, [pc, #184]	@ (800158c <HAL_DMA_Init+0x1d0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02c      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <HAL_DMA_Init+0x1d4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d027      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <HAL_DMA_Init+0x1d8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d022      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001598 <HAL_DMA_Init+0x1dc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d01d      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a28      	ldr	r2, [pc, #160]	@ (800159c <HAL_DMA_Init+0x1e0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d018      	beq.n	8001530 <HAL_DMA_Init+0x174>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <HAL_DMA_Init+0x1e4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_DMA_Init+0x174>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_DMA_Init+0x1e8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00e      	beq.n	8001530 <HAL_DMA_Init+0x174>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_DMA_Init+0x1ec>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d009      	beq.n	8001530 <HAL_DMA_Init+0x174>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_DMA_Init+0x1f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d004      	beq.n	8001530 <HAL_DMA_Init+0x174>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <HAL_DMA_Init+0x1f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d108      	bne.n	8001542 <HAL_DMA_Init+0x186>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e007      	b.n	8001552 <HAL_DMA_Init+0x196>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001552:	e02f      	b.n	80015b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001554:	f7ff fde6 	bl	8001124 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b05      	cmp	r3, #5
 8001560:	d928      	bls.n	80015b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e246      	b.n	8001a02 <HAL_DMA_Init+0x646>
 8001574:	40020010 	.word	0x40020010
 8001578:	40020028 	.word	0x40020028
 800157c:	40020040 	.word	0x40020040
 8001580:	40020058 	.word	0x40020058
 8001584:	40020070 	.word	0x40020070
 8001588:	40020088 	.word	0x40020088
 800158c:	400200a0 	.word	0x400200a0
 8001590:	400200b8 	.word	0x400200b8
 8001594:	40020410 	.word	0x40020410
 8001598:	40020428 	.word	0x40020428
 800159c:	40020440 	.word	0x40020440
 80015a0:	40020458 	.word	0x40020458
 80015a4:	40020470 	.word	0x40020470
 80015a8:	40020488 	.word	0x40020488
 80015ac:	400204a0 	.word	0x400204a0
 80015b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1c8      	bne.n	8001554 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4b83      	ldr	r3, [pc, #524]	@ (80017dc <HAL_DMA_Init+0x420>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	2b04      	cmp	r3, #4
 8001606:	d107      	bne.n	8001618 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	4313      	orrs	r3, r2
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001618:	4b71      	ldr	r3, [pc, #452]	@ (80017e0 <HAL_DMA_Init+0x424>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b71      	ldr	r3, [pc, #452]	@ (80017e4 <HAL_DMA_Init+0x428>)
 800161e:	4013      	ands	r3, r2
 8001620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001624:	d328      	bcc.n	8001678 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b28      	cmp	r3, #40	@ 0x28
 800162c:	d903      	bls.n	8001636 <HAL_DMA_Init+0x27a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b2e      	cmp	r3, #46	@ 0x2e
 8001634:	d917      	bls.n	8001666 <HAL_DMA_Init+0x2aa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b3e      	cmp	r3, #62	@ 0x3e
 800163c:	d903      	bls.n	8001646 <HAL_DMA_Init+0x28a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b42      	cmp	r3, #66	@ 0x42
 8001644:	d90f      	bls.n	8001666 <HAL_DMA_Init+0x2aa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b46      	cmp	r3, #70	@ 0x46
 800164c:	d903      	bls.n	8001656 <HAL_DMA_Init+0x29a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b48      	cmp	r3, #72	@ 0x48
 8001654:	d907      	bls.n	8001666 <HAL_DMA_Init+0x2aa>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b4e      	cmp	r3, #78	@ 0x4e
 800165c:	d905      	bls.n	800166a <HAL_DMA_Init+0x2ae>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b52      	cmp	r3, #82	@ 0x52
 8001664:	d801      	bhi.n	800166a <HAL_DMA_Init+0x2ae>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_DMA_Init+0x2b0>
 800166a:	2300      	movs	r3, #0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001676:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f023 0307 	bic.w	r3, r3, #7
 800168e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d117      	bne.n	80016d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00e      	beq.n	80016d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f002 f821 	bl	80036fc <DMA_CheckFifoParam>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e197      	b.n	8001a02 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 ff5c 	bl	8003598 <DMA_CalcBaseAndBitshift>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	223f      	movs	r2, #63	@ 0x3f
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e0cd      	b.n	8001892 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <HAL_DMA_Init+0x42c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a39      	ldr	r2, [pc, #228]	@ (80017ec <HAL_DMA_Init+0x430>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a38      	ldr	r2, [pc, #224]	@ (80017f0 <HAL_DMA_Init+0x434>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d018      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a36      	ldr	r2, [pc, #216]	@ (80017f4 <HAL_DMA_Init+0x438>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a35      	ldr	r2, [pc, #212]	@ (80017f8 <HAL_DMA_Init+0x43c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a33      	ldr	r2, [pc, #204]	@ (80017fc <HAL_DMA_Init+0x440>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d009      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <HAL_DMA_Init+0x444>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_DMA_Init+0x38a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a30      	ldr	r2, [pc, #192]	@ (8001804 <HAL_DMA_Init+0x448>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_DMA_Init+0x38e>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_DMA_Init+0x390>
 800174a:	2300      	movs	r3, #0
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8097 	beq.w	8001880 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a24      	ldr	r2, [pc, #144]	@ (80017e8 <HAL_DMA_Init+0x42c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d021      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	@ (80017ec <HAL_DMA_Init+0x430>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01c      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <HAL_DMA_Init+0x434>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d017      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <HAL_DMA_Init+0x438>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d012      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_DMA_Init+0x43c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00d      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <HAL_DMA_Init+0x440>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d008      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <HAL_DMA_Init+0x444>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d003      	beq.n	80017a0 <HAL_DMA_Init+0x3e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_DMA_Init+0x448>)
 800179e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_DMA_Init+0x44c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b40      	cmp	r3, #64	@ 0x40
 80017c6:	d021      	beq.n	800180c <HAL_DMA_Init+0x450>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b80      	cmp	r3, #128	@ 0x80
 80017ce:	d102      	bne.n	80017d6 <HAL_DMA_Init+0x41a>
 80017d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017d4:	e01b      	b.n	800180e <HAL_DMA_Init+0x452>
 80017d6:	2300      	movs	r3, #0
 80017d8:	e019      	b.n	800180e <HAL_DMA_Init+0x452>
 80017da:	bf00      	nop
 80017dc:	fe10803f 	.word	0xfe10803f
 80017e0:	5c001000 	.word	0x5c001000
 80017e4:	ffff0000 	.word	0xffff0000
 80017e8:	58025408 	.word	0x58025408
 80017ec:	5802541c 	.word	0x5802541c
 80017f0:	58025430 	.word	0x58025430
 80017f4:	58025444 	.word	0x58025444
 80017f8:	58025458 	.word	0x58025458
 80017fc:	5802546c 	.word	0x5802546c
 8001800:	58025480 	.word	0x58025480
 8001804:	58025494 	.word	0x58025494
 8001808:	fffe000f 	.word	0xfffe000f
 800180c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68d2      	ldr	r2, [r2, #12]
 8001812:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800181c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800182c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800183c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <HAL_DMA_Init+0x650>)
 8001854:	4413      	add	r3, r2
 8001856:	4a6e      	ldr	r2, [pc, #440]	@ (8001a10 <HAL_DMA_Init+0x654>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f001 fe97 	bl	8003598 <DMA_CalcBaseAndBitshift>
 800186a:	4603      	mov	r3, r0
 800186c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2201      	movs	r2, #1
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e008      	b.n	8001892 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0b7      	b.n	8001a02 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a5f      	ldr	r2, [pc, #380]	@ (8001a14 <HAL_DMA_Init+0x658>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d072      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a18 <HAL_DMA_Init+0x65c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d06d      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5c      	ldr	r2, [pc, #368]	@ (8001a1c <HAL_DMA_Init+0x660>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d068      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a20 <HAL_DMA_Init+0x664>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d063      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a59      	ldr	r2, [pc, #356]	@ (8001a24 <HAL_DMA_Init+0x668>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <HAL_DMA_Init+0x66c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d059      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_DMA_Init+0x670>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d054      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a54      	ldr	r2, [pc, #336]	@ (8001a30 <HAL_DMA_Init+0x674>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04f      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a53      	ldr	r2, [pc, #332]	@ (8001a34 <HAL_DMA_Init+0x678>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04a      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a51      	ldr	r2, [pc, #324]	@ (8001a38 <HAL_DMA_Init+0x67c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d045      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a50      	ldr	r2, [pc, #320]	@ (8001a3c <HAL_DMA_Init+0x680>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d040      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4e      	ldr	r2, [pc, #312]	@ (8001a40 <HAL_DMA_Init+0x684>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d03b      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a44 <HAL_DMA_Init+0x688>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d036      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4b      	ldr	r2, [pc, #300]	@ (8001a48 <HAL_DMA_Init+0x68c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d031      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4a      	ldr	r2, [pc, #296]	@ (8001a4c <HAL_DMA_Init+0x690>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d02c      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a48      	ldr	r2, [pc, #288]	@ (8001a50 <HAL_DMA_Init+0x694>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d027      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a47      	ldr	r2, [pc, #284]	@ (8001a54 <HAL_DMA_Init+0x698>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a45      	ldr	r2, [pc, #276]	@ (8001a58 <HAL_DMA_Init+0x69c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01d      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a44      	ldr	r2, [pc, #272]	@ (8001a5c <HAL_DMA_Init+0x6a0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d018      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a42      	ldr	r2, [pc, #264]	@ (8001a60 <HAL_DMA_Init+0x6a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <HAL_DMA_Init+0x6a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00e      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a3f      	ldr	r2, [pc, #252]	@ (8001a68 <HAL_DMA_Init+0x6ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d009      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <HAL_DMA_Init+0x6b0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_DMA_Init+0x5c6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a70 <HAL_DMA_Init+0x6b4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_DMA_Init+0x5ca>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_DMA_Init+0x5cc>
 8001986:	2300      	movs	r3, #0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d032      	beq.n	80019f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f001 ff31 	bl	80037f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b80      	cmp	r3, #128	@ 0x80
 8001998:	d102      	bne.n	80019a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_DMA_Init+0x624>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d80c      	bhi.n	80019e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 ffae 	bl	8003928 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	e008      	b.n	80019f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	a7fdabf8 	.word	0xa7fdabf8
 8001a10:	cccccccd 	.word	0xcccccccd
 8001a14:	40020010 	.word	0x40020010
 8001a18:	40020028 	.word	0x40020028
 8001a1c:	40020040 	.word	0x40020040
 8001a20:	40020058 	.word	0x40020058
 8001a24:	40020070 	.word	0x40020070
 8001a28:	40020088 	.word	0x40020088
 8001a2c:	400200a0 	.word	0x400200a0
 8001a30:	400200b8 	.word	0x400200b8
 8001a34:	40020410 	.word	0x40020410
 8001a38:	40020428 	.word	0x40020428
 8001a3c:	40020440 	.word	0x40020440
 8001a40:	40020458 	.word	0x40020458
 8001a44:	40020470 	.word	0x40020470
 8001a48:	40020488 	.word	0x40020488
 8001a4c:	400204a0 	.word	0x400204a0
 8001a50:	400204b8 	.word	0x400204b8
 8001a54:	58025408 	.word	0x58025408
 8001a58:	5802541c 	.word	0x5802541c
 8001a5c:	58025430 	.word	0x58025430
 8001a60:	58025444 	.word	0x58025444
 8001a64:	58025458 	.word	0x58025458
 8001a68:	5802546c 	.word	0x5802546c
 8001a6c:	58025480 	.word	0x58025480
 8001a70:	58025494 	.word	0x58025494

08001a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e226      	b.n	8001ede <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_DMA_Start_IT+0x2a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e21f      	b.n	8001ede <HAL_DMA_Start_IT+0x46a>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	f040 820a 	bne.w	8001ec8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a68      	ldr	r2, [pc, #416]	@ (8001c68 <HAL_DMA_Start_IT+0x1f4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04a      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a66      	ldr	r2, [pc, #408]	@ (8001c6c <HAL_DMA_Start_IT+0x1f8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d045      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_DMA_Start_IT+0x1fc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d040      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a63      	ldr	r2, [pc, #396]	@ (8001c74 <HAL_DMA_Start_IT+0x200>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d03b      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a62      	ldr	r2, [pc, #392]	@ (8001c78 <HAL_DMA_Start_IT+0x204>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d036      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a60      	ldr	r2, [pc, #384]	@ (8001c7c <HAL_DMA_Start_IT+0x208>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d031      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5f      	ldr	r2, [pc, #380]	@ (8001c80 <HAL_DMA_Start_IT+0x20c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d02c      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c84 <HAL_DMA_Start_IT+0x210>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d027      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5c      	ldr	r2, [pc, #368]	@ (8001c88 <HAL_DMA_Start_IT+0x214>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d022      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5a      	ldr	r2, [pc, #360]	@ (8001c8c <HAL_DMA_Start_IT+0x218>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01d      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a59      	ldr	r2, [pc, #356]	@ (8001c90 <HAL_DMA_Start_IT+0x21c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d018      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a57      	ldr	r2, [pc, #348]	@ (8001c94 <HAL_DMA_Start_IT+0x220>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_DMA_Start_IT+0x224>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00e      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a54      	ldr	r2, [pc, #336]	@ (8001c9c <HAL_DMA_Start_IT+0x228>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d009      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a53      	ldr	r2, [pc, #332]	@ (8001ca0 <HAL_DMA_Start_IT+0x22c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_DMA_Start_IT+0xee>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a51      	ldr	r2, [pc, #324]	@ (8001ca4 <HAL_DMA_Start_IT+0x230>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d108      	bne.n	8001b74 <HAL_DMA_Start_IT+0x100>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_DMA_Start_IT+0x110>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f001 fb58 	bl	8003240 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a34      	ldr	r2, [pc, #208]	@ (8001c68 <HAL_DMA_Start_IT+0x1f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d04a      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a33      	ldr	r2, [pc, #204]	@ (8001c6c <HAL_DMA_Start_IT+0x1f8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d045      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <HAL_DMA_Start_IT+0x1fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d040      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a30      	ldr	r2, [pc, #192]	@ (8001c74 <HAL_DMA_Start_IT+0x200>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d03b      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <HAL_DMA_Start_IT+0x204>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d036      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <HAL_DMA_Start_IT+0x208>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c80 <HAL_DMA_Start_IT+0x20c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02c      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2a      	ldr	r2, [pc, #168]	@ (8001c84 <HAL_DMA_Start_IT+0x210>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d027      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_DMA_Start_IT+0x214>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <HAL_DMA_Start_IT+0x218>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d01d      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <HAL_DMA_Start_IT+0x21c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_DMA_Start_IT+0x220>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <HAL_DMA_Start_IT+0x224>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_DMA_Start_IT+0x228>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_DMA_Start_IT+0x22c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Start_IT+0x1bc>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_DMA_Start_IT+0x230>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_DMA_Start_IT+0x1c0>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_Start_IT+0x1c2>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d036      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 021e 	bic.w	r2, r3, #30
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0216 	orr.w	r2, r2, #22
 8001c4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03e      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0208 	orr.w	r2, r2, #8
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e035      	b.n	8001cd4 <HAL_DMA_Start_IT+0x260>
 8001c68:	40020010 	.word	0x40020010
 8001c6c:	40020028 	.word	0x40020028
 8001c70:	40020040 	.word	0x40020040
 8001c74:	40020058 	.word	0x40020058
 8001c78:	40020070 	.word	0x40020070
 8001c7c:	40020088 	.word	0x40020088
 8001c80:	400200a0 	.word	0x400200a0
 8001c84:	400200b8 	.word	0x400200b8
 8001c88:	40020410 	.word	0x40020410
 8001c8c:	40020428 	.word	0x40020428
 8001c90:	40020440 	.word	0x40020440
 8001c94:	40020458 	.word	0x40020458
 8001c98:	40020470 	.word	0x40020470
 8001c9c:	40020488 	.word	0x40020488
 8001ca0:	400204a0 	.word	0x400204a0
 8001ca4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 020e 	bic.w	r2, r3, #14
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 020a 	orr.w	r2, r2, #10
 8001cba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0204 	orr.w	r2, r2, #4
 8001cd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a83      	ldr	r2, [pc, #524]	@ (8001ee8 <HAL_DMA_Start_IT+0x474>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d072      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a82      	ldr	r2, [pc, #520]	@ (8001eec <HAL_DMA_Start_IT+0x478>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d06d      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a80      	ldr	r2, [pc, #512]	@ (8001ef0 <HAL_DMA_Start_IT+0x47c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d068      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef4 <HAL_DMA_Start_IT+0x480>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d063      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef8 <HAL_DMA_Start_IT+0x484>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d05e      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001efc <HAL_DMA_Start_IT+0x488>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d059      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7a      	ldr	r2, [pc, #488]	@ (8001f00 <HAL_DMA_Start_IT+0x48c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d054      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a79      	ldr	r2, [pc, #484]	@ (8001f04 <HAL_DMA_Start_IT+0x490>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04f      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a77      	ldr	r2, [pc, #476]	@ (8001f08 <HAL_DMA_Start_IT+0x494>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d04a      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a76      	ldr	r2, [pc, #472]	@ (8001f0c <HAL_DMA_Start_IT+0x498>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d045      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a74      	ldr	r2, [pc, #464]	@ (8001f10 <HAL_DMA_Start_IT+0x49c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d040      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a73      	ldr	r2, [pc, #460]	@ (8001f14 <HAL_DMA_Start_IT+0x4a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d03b      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a71      	ldr	r2, [pc, #452]	@ (8001f18 <HAL_DMA_Start_IT+0x4a4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d036      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a70      	ldr	r2, [pc, #448]	@ (8001f1c <HAL_DMA_Start_IT+0x4a8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d031      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	@ (8001f20 <HAL_DMA_Start_IT+0x4ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02c      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f24 <HAL_DMA_Start_IT+0x4b0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d027      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6b      	ldr	r2, [pc, #428]	@ (8001f28 <HAL_DMA_Start_IT+0x4b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d022      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6a      	ldr	r2, [pc, #424]	@ (8001f2c <HAL_DMA_Start_IT+0x4b8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d01d      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a68      	ldr	r2, [pc, #416]	@ (8001f30 <HAL_DMA_Start_IT+0x4bc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d018      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a67      	ldr	r2, [pc, #412]	@ (8001f34 <HAL_DMA_Start_IT+0x4c0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a65      	ldr	r2, [pc, #404]	@ (8001f38 <HAL_DMA_Start_IT+0x4c4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00e      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a64      	ldr	r2, [pc, #400]	@ (8001f3c <HAL_DMA_Start_IT+0x4c8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a62      	ldr	r2, [pc, #392]	@ (8001f40 <HAL_DMA_Start_IT+0x4cc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x350>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a61      	ldr	r2, [pc, #388]	@ (8001f44 <HAL_DMA_Start_IT+0x4d0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x354>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_Start_IT+0x356>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <HAL_DMA_Start_IT+0x474>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d04a      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <HAL_DMA_Start_IT+0x478>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d045      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a34      	ldr	r2, [pc, #208]	@ (8001ef0 <HAL_DMA_Start_IT+0x47c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d040      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a33      	ldr	r2, [pc, #204]	@ (8001ef4 <HAL_DMA_Start_IT+0x480>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d03b      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <HAL_DMA_Start_IT+0x484>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d036      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <HAL_DMA_Start_IT+0x488>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d031      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2e      	ldr	r2, [pc, #184]	@ (8001f00 <HAL_DMA_Start_IT+0x48c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02c      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <HAL_DMA_Start_IT+0x490>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d027      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2b      	ldr	r2, [pc, #172]	@ (8001f08 <HAL_DMA_Start_IT+0x494>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d022      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2a      	ldr	r2, [pc, #168]	@ (8001f0c <HAL_DMA_Start_IT+0x498>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01d      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <HAL_DMA_Start_IT+0x49c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d018      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_DMA_Start_IT+0x4a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a25      	ldr	r2, [pc, #148]	@ (8001f18 <HAL_DMA_Start_IT+0x4a4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_DMA_Start_IT+0x4a8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <HAL_DMA_Start_IT+0x4ac>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x430>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_DMA_Start_IT+0x4b0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d108      	bne.n	8001eb6 <HAL_DMA_Start_IT+0x442>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e012      	b.n	8001edc <HAL_DMA_Start_IT+0x468>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e009      	b.n	8001edc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020010 	.word	0x40020010
 8001eec:	40020028 	.word	0x40020028
 8001ef0:	40020040 	.word	0x40020040
 8001ef4:	40020058 	.word	0x40020058
 8001ef8:	40020070 	.word	0x40020070
 8001efc:	40020088 	.word	0x40020088
 8001f00:	400200a0 	.word	0x400200a0
 8001f04:	400200b8 	.word	0x400200b8
 8001f08:	40020410 	.word	0x40020410
 8001f0c:	40020428 	.word	0x40020428
 8001f10:	40020440 	.word	0x40020440
 8001f14:	40020458 	.word	0x40020458
 8001f18:	40020470 	.word	0x40020470
 8001f1c:	40020488 	.word	0x40020488
 8001f20:	400204a0 	.word	0x400204a0
 8001f24:	400204b8 	.word	0x400204b8
 8001f28:	58025408 	.word	0x58025408
 8001f2c:	5802541c 	.word	0x5802541c
 8001f30:	58025430 	.word	0x58025430
 8001f34:	58025444 	.word	0x58025444
 8001f38:	58025458 	.word	0x58025458
 8001f3c:	5802546c 	.word	0x5802546c
 8001f40:	58025480 	.word	0x58025480
 8001f44:	58025494 	.word	0x58025494

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e237      	b.n	80023ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e22c      	b.n	80023ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5c      	ldr	r2, [pc, #368]	@ (80020e8 <HAL_DMA_Abort_IT+0x1a0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80020ec <HAL_DMA_Abort_IT+0x1a4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a59      	ldr	r2, [pc, #356]	@ (80020f0 <HAL_DMA_Abort_IT+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a58      	ldr	r2, [pc, #352]	@ (80020f4 <HAL_DMA_Abort_IT+0x1ac>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a56      	ldr	r2, [pc, #344]	@ (80020f8 <HAL_DMA_Abort_IT+0x1b0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a55      	ldr	r2, [pc, #340]	@ (80020fc <HAL_DMA_Abort_IT+0x1b4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a53      	ldr	r2, [pc, #332]	@ (8002100 <HAL_DMA_Abort_IT+0x1b8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_DMA_Abort_IT+0x1bc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a50      	ldr	r2, [pc, #320]	@ (8002108 <HAL_DMA_Abort_IT+0x1c0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	@ (800210c <HAL_DMA_Abort_IT+0x1c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002110 <HAL_DMA_Abort_IT+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8002114 <HAL_DMA_Abort_IT+0x1cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	@ (8002118 <HAL_DMA_Abort_IT+0x1d0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	@ (800211c <HAL_DMA_Abort_IT+0x1d4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a47      	ldr	r2, [pc, #284]	@ (8002120 <HAL_DMA_Abort_IT+0x1d8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_DMA_Abort_IT+0x1dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Abort_IT+0xcc>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_DMA_Abort_IT+0xce>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8086 	beq.w	8002128 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2204      	movs	r2, #4
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <HAL_DMA_Abort_IT+0x1a0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <HAL_DMA_Abort_IT+0x1a4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d045      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2c      	ldr	r2, [pc, #176]	@ (80020f0 <HAL_DMA_Abort_IT+0x1a8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d040      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2b      	ldr	r2, [pc, #172]	@ (80020f4 <HAL_DMA_Abort_IT+0x1ac>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d03b      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a29      	ldr	r2, [pc, #164]	@ (80020f8 <HAL_DMA_Abort_IT+0x1b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d036      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a28      	ldr	r2, [pc, #160]	@ (80020fc <HAL_DMA_Abort_IT+0x1b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_DMA_Abort_IT+0x1b8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02c      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <HAL_DMA_Abort_IT+0x1bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d027      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <HAL_DMA_Abort_IT+0x1c0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a22      	ldr	r2, [pc, #136]	@ (800210c <HAL_DMA_Abort_IT+0x1c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a20      	ldr	r2, [pc, #128]	@ (8002110 <HAL_DMA_Abort_IT+0x1c8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d018      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1f      	ldr	r2, [pc, #124]	@ (8002114 <HAL_DMA_Abort_IT+0x1cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <HAL_DMA_Abort_IT+0x1d0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00e      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <HAL_DMA_Abort_IT+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_DMA_Abort_IT+0x1d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x17c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <HAL_DMA_Abort_IT+0x1dc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <HAL_DMA_Abort_IT+0x18e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e178      	b.n	80023c8 <HAL_DMA_Abort_IT+0x480>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e16f      	b.n	80023c8 <HAL_DMA_Abort_IT+0x480>
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 020e 	bic.w	r2, r2, #14
 8002136:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6c      	ldr	r2, [pc, #432]	@ (80022f0 <HAL_DMA_Abort_IT+0x3a8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d04a      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6b      	ldr	r2, [pc, #428]	@ (80022f4 <HAL_DMA_Abort_IT+0x3ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d045      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a69      	ldr	r2, [pc, #420]	@ (80022f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d040      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a68      	ldr	r2, [pc, #416]	@ (80022fc <HAL_DMA_Abort_IT+0x3b4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d03b      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <HAL_DMA_Abort_IT+0x3b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d036      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_DMA_Abort_IT+0x3bc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d031      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a63      	ldr	r2, [pc, #396]	@ (8002308 <HAL_DMA_Abort_IT+0x3c0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02c      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a62      	ldr	r2, [pc, #392]	@ (800230c <HAL_DMA_Abort_IT+0x3c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d027      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a60      	ldr	r2, [pc, #384]	@ (8002310 <HAL_DMA_Abort_IT+0x3c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d022      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5f      	ldr	r2, [pc, #380]	@ (8002314 <HAL_DMA_Abort_IT+0x3cc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d01d      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <HAL_DMA_Abort_IT+0x3d0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d018      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	@ (800231c <HAL_DMA_Abort_IT+0x3d4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002320 <HAL_DMA_Abort_IT+0x3d8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00e      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a59      	ldr	r2, [pc, #356]	@ (8002324 <HAL_DMA_Abort_IT+0x3dc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a57      	ldr	r2, [pc, #348]	@ (8002328 <HAL_DMA_Abort_IT+0x3e0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x290>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a56      	ldr	r2, [pc, #344]	@ (800232c <HAL_DMA_Abort_IT+0x3e4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <HAL_DMA_Abort_IT+0x2a2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e007      	b.n	80021fa <HAL_DMA_Abort_IT+0x2b2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <HAL_DMA_Abort_IT+0x3a8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d072      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3a      	ldr	r2, [pc, #232]	@ (80022f4 <HAL_DMA_Abort_IT+0x3ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d06d      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a39      	ldr	r2, [pc, #228]	@ (80022f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d068      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a37      	ldr	r2, [pc, #220]	@ (80022fc <HAL_DMA_Abort_IT+0x3b4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d063      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a36      	ldr	r2, [pc, #216]	@ (8002300 <HAL_DMA_Abort_IT+0x3b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a34      	ldr	r2, [pc, #208]	@ (8002304 <HAL_DMA_Abort_IT+0x3bc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d059      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a33      	ldr	r2, [pc, #204]	@ (8002308 <HAL_DMA_Abort_IT+0x3c0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d054      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a31      	ldr	r2, [pc, #196]	@ (800230c <HAL_DMA_Abort_IT+0x3c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04f      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a30      	ldr	r2, [pc, #192]	@ (8002310 <HAL_DMA_Abort_IT+0x3c8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d04a      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2e      	ldr	r2, [pc, #184]	@ (8002314 <HAL_DMA_Abort_IT+0x3cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d045      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2d      	ldr	r2, [pc, #180]	@ (8002318 <HAL_DMA_Abort_IT+0x3d0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d040      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <HAL_DMA_Abort_IT+0x3d4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d03b      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <HAL_DMA_Abort_IT+0x3d8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d036      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a28      	ldr	r2, [pc, #160]	@ (8002324 <HAL_DMA_Abort_IT+0x3dc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a27      	ldr	r2, [pc, #156]	@ (8002328 <HAL_DMA_Abort_IT+0x3e0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d02c      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	@ (800232c <HAL_DMA_Abort_IT+0x3e4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d027      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a24      	ldr	r2, [pc, #144]	@ (8002330 <HAL_DMA_Abort_IT+0x3e8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	@ (8002334 <HAL_DMA_Abort_IT+0x3ec>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01d      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a21      	ldr	r2, [pc, #132]	@ (8002338 <HAL_DMA_Abort_IT+0x3f0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <HAL_DMA_Abort_IT+0x3f4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002340 <HAL_DMA_Abort_IT+0x3f8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00e      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <HAL_DMA_Abort_IT+0x3fc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_DMA_Abort_IT+0x400>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_DMA_Abort_IT+0x3a2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	@ (800234c <HAL_DMA_Abort_IT+0x404>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d132      	bne.n	8002350 <HAL_DMA_Abort_IT+0x408>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e031      	b.n	8002352 <HAL_DMA_Abort_IT+0x40a>
 80022ee:	bf00      	nop
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
 8002330:	58025408 	.word	0x58025408
 8002334:	5802541c 	.word	0x5802541c
 8002338:	58025430 	.word	0x58025430
 800233c:	58025444 	.word	0x58025444
 8002340:	58025458 	.word	0x58025458
 8002344:	5802546c 	.word	0x5802546c
 8002348:	58025480 	.word	0x58025480
 800234c:	58025494 	.word	0x58025494
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002364:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002384:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800239c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e0:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_DMA_IRQHandler+0x1ac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a67      	ldr	r2, [pc, #412]	@ (8002584 <HAL_DMA_IRQHandler+0x1b0>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5f      	ldr	r2, [pc, #380]	@ (8002588 <HAL_DMA_IRQHandler+0x1b4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5d      	ldr	r2, [pc, #372]	@ (800258c <HAL_DMA_IRQHandler+0x1b8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5c      	ldr	r2, [pc, #368]	@ (8002590 <HAL_DMA_IRQHandler+0x1bc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5a      	ldr	r2, [pc, #360]	@ (8002594 <HAL_DMA_IRQHandler+0x1c0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a59      	ldr	r2, [pc, #356]	@ (8002598 <HAL_DMA_IRQHandler+0x1c4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a57      	ldr	r2, [pc, #348]	@ (800259c <HAL_DMA_IRQHandler+0x1c8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a56      	ldr	r2, [pc, #344]	@ (80025a0 <HAL_DMA_IRQHandler+0x1cc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a54      	ldr	r2, [pc, #336]	@ (80025a4 <HAL_DMA_IRQHandler+0x1d0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a53      	ldr	r2, [pc, #332]	@ (80025a8 <HAL_DMA_IRQHandler+0x1d4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a51      	ldr	r2, [pc, #324]	@ (80025ac <HAL_DMA_IRQHandler+0x1d8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_DMA_IRQHandler+0x1dc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4e      	ldr	r2, [pc, #312]	@ (80025b4 <HAL_DMA_IRQHandler+0x1e0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a4d      	ldr	r2, [pc, #308]	@ (80025b8 <HAL_DMA_IRQHandler+0x1e4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a4b      	ldr	r2, [pc, #300]	@ (80025bc <HAL_DMA_IRQHandler+0x1e8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_DMA_IRQHandler+0x1ec>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xd2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a48      	ldr	r2, [pc, #288]	@ (80025c4 <HAL_DMA_IRQHandler+0x1f0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_IRQHandler+0xd6>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_DMA_IRQHandler+0xd8>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 842b 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2208      	movs	r2, #8
 80024bc:	409a      	lsls	r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80a2 	beq.w	800260c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002588 <HAL_DMA_IRQHandler+0x1b4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_DMA_IRQHandler+0x1b8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002590 <HAL_DMA_IRQHandler+0x1bc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_DMA_IRQHandler+0x1c0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a28      	ldr	r2, [pc, #160]	@ (8002598 <HAL_DMA_IRQHandler+0x1c4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a27      	ldr	r2, [pc, #156]	@ (800259c <HAL_DMA_IRQHandler+0x1c8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	@ (80025a0 <HAL_DMA_IRQHandler+0x1cc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <HAL_DMA_IRQHandler+0x1d0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_DMA_IRQHandler+0x1d4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <HAL_DMA_IRQHandler+0x1d8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DMA_IRQHandler+0x1dc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	@ (80025b4 <HAL_DMA_IRQHandler+0x1e0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <HAL_DMA_IRQHandler+0x1e4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_DMA_IRQHandler+0x1e8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_DMA_IRQHandler+0x1ec>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_IRQHandler+0x194>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <HAL_DMA_IRQHandler+0x1f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12f      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x1f4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e02e      	b.n	80025dc <HAL_DMA_IRQHandler+0x208>
 800257e:	bf00      	nop
 8002580:	24000000 	.word	0x24000000
 8002584:	1b4e81b5 	.word	0x1b4e81b5
 8002588:	40020010 	.word	0x40020010
 800258c:	40020028 	.word	0x40020028
 8002590:	40020040 	.word	0x40020040
 8002594:	40020058 	.word	0x40020058
 8002598:	40020070 	.word	0x40020070
 800259c:	40020088 	.word	0x40020088
 80025a0:	400200a0 	.word	0x400200a0
 80025a4:	400200b8 	.word	0x400200b8
 80025a8:	40020410 	.word	0x40020410
 80025ac:	40020428 	.word	0x40020428
 80025b0:	40020440 	.word	0x40020440
 80025b4:	40020458 	.word	0x40020458
 80025b8:	40020470 	.word	0x40020470
 80025bc:	40020488 	.word	0x40020488
 80025c0:	400204a0 	.word	0x400204a0
 80025c4:	400204b8 	.word	0x400204b8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d015      	beq.n	800260c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2208      	movs	r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06e      	beq.n	8002700 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a69      	ldr	r2, [pc, #420]	@ (80027cc <HAL_DMA_IRQHandler+0x3f8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a67      	ldr	r2, [pc, #412]	@ (80027d0 <HAL_DMA_IRQHandler+0x3fc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a66      	ldr	r2, [pc, #408]	@ (80027d4 <HAL_DMA_IRQHandler+0x400>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a64      	ldr	r2, [pc, #400]	@ (80027d8 <HAL_DMA_IRQHandler+0x404>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a63      	ldr	r2, [pc, #396]	@ (80027dc <HAL_DMA_IRQHandler+0x408>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a61      	ldr	r2, [pc, #388]	@ (80027e0 <HAL_DMA_IRQHandler+0x40c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a60      	ldr	r2, [pc, #384]	@ (80027e4 <HAL_DMA_IRQHandler+0x410>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5e      	ldr	r2, [pc, #376]	@ (80027e8 <HAL_DMA_IRQHandler+0x414>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5d      	ldr	r2, [pc, #372]	@ (80027ec <HAL_DMA_IRQHandler+0x418>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5b      	ldr	r2, [pc, #364]	@ (80027f0 <HAL_DMA_IRQHandler+0x41c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_DMA_IRQHandler+0x420>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_DMA_IRQHandler+0x424>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_DMA_IRQHandler+0x428>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a55      	ldr	r2, [pc, #340]	@ (8002800 <HAL_DMA_IRQHandler+0x42c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_DMA_IRQHandler+0x430>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x2ee>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_DMA_IRQHandler+0x434>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10a      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x304>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e003      	b.n	80026e0 <HAL_DMA_IRQHandler+0x30c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f043 0202 	orr.w	r2, r3, #2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2204      	movs	r2, #4
 800270a:	409a      	lsls	r2, r3
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 808f 	beq.w	8002834 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2c      	ldr	r2, [pc, #176]	@ (80027cc <HAL_DMA_IRQHandler+0x3f8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d04a      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2a      	ldr	r2, [pc, #168]	@ (80027d0 <HAL_DMA_IRQHandler+0x3fc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d045      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_DMA_IRQHandler+0x400>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d040      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a27      	ldr	r2, [pc, #156]	@ (80027d8 <HAL_DMA_IRQHandler+0x404>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d03b      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_DMA_IRQHandler+0x408>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d036      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_DMA_IRQHandler+0x40c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d031      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <HAL_DMA_IRQHandler+0x410>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d02c      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a21      	ldr	r2, [pc, #132]	@ (80027e8 <HAL_DMA_IRQHandler+0x414>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a20      	ldr	r2, [pc, #128]	@ (80027ec <HAL_DMA_IRQHandler+0x418>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1e      	ldr	r2, [pc, #120]	@ (80027f0 <HAL_DMA_IRQHandler+0x41c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01d      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_DMA_IRQHandler+0x420>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d018      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_DMA_IRQHandler+0x424>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_DMA_IRQHandler+0x428>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00e      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <HAL_DMA_IRQHandler+0x42c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_DMA_IRQHandler+0x430>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d004      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x3e2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <HAL_DMA_IRQHandler+0x434>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12a      	bne.n	800280c <HAL_DMA_IRQHandler+0x438>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e023      	b.n	8002814 <HAL_DMA_IRQHandler+0x440>
 80027cc:	40020010 	.word	0x40020010
 80027d0:	40020028 	.word	0x40020028
 80027d4:	40020040 	.word	0x40020040
 80027d8:	40020058 	.word	0x40020058
 80027dc:	40020070 	.word	0x40020070
 80027e0:	40020088 	.word	0x40020088
 80027e4:	400200a0 	.word	0x400200a0
 80027e8:	400200b8 	.word	0x400200b8
 80027ec:	40020410 	.word	0x40020410
 80027f0:	40020428 	.word	0x40020428
 80027f4:	40020440 	.word	0x40020440
 80027f8:	40020458 	.word	0x40020458
 80027fc:	40020470 	.word	0x40020470
 8002800:	40020488 	.word	0x40020488
 8002804:	400204a0 	.word	0x400204a0
 8002808:	400204b8 	.word	0x400204b8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2204      	movs	r2, #4
 8002822:	409a      	lsls	r2, r3
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2210      	movs	r2, #16
 800283e:	409a      	lsls	r2, r3
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a6 	beq.w	8002996 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a85      	ldr	r2, [pc, #532]	@ (8002a64 <HAL_DMA_IRQHandler+0x690>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d04a      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a83      	ldr	r2, [pc, #524]	@ (8002a68 <HAL_DMA_IRQHandler+0x694>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d045      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a82      	ldr	r2, [pc, #520]	@ (8002a6c <HAL_DMA_IRQHandler+0x698>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d040      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a80      	ldr	r2, [pc, #512]	@ (8002a70 <HAL_DMA_IRQHandler+0x69c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d03b      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7f      	ldr	r2, [pc, #508]	@ (8002a74 <HAL_DMA_IRQHandler+0x6a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d036      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7d      	ldr	r2, [pc, #500]	@ (8002a78 <HAL_DMA_IRQHandler+0x6a4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d031      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a7c <HAL_DMA_IRQHandler+0x6a8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d02c      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a7a      	ldr	r2, [pc, #488]	@ (8002a80 <HAL_DMA_IRQHandler+0x6ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a79      	ldr	r2, [pc, #484]	@ (8002a84 <HAL_DMA_IRQHandler+0x6b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a77      	ldr	r2, [pc, #476]	@ (8002a88 <HAL_DMA_IRQHandler+0x6b4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a76      	ldr	r2, [pc, #472]	@ (8002a8c <HAL_DMA_IRQHandler+0x6b8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a74      	ldr	r2, [pc, #464]	@ (8002a90 <HAL_DMA_IRQHandler+0x6bc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	@ (8002a94 <HAL_DMA_IRQHandler+0x6c0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a71      	ldr	r2, [pc, #452]	@ (8002a98 <HAL_DMA_IRQHandler+0x6c4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a70      	ldr	r2, [pc, #448]	@ (8002a9c <HAL_DMA_IRQHandler+0x6c8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_DMA_IRQHandler+0x516>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa0 <HAL_DMA_IRQHandler+0x6cc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10a      	bne.n	8002900 <HAL_DMA_IRQHandler+0x52c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e009      	b.n	8002914 <HAL_DMA_IRQHandler+0x540>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03e      	beq.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2210      	movs	r2, #16
 8002922:	409a      	lsls	r2, r3
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d024      	beq.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e01f      	b.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01b      	beq.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e016      	b.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0208 	bic.w	r2, r2, #8
 8002984:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2220      	movs	r2, #32
 80029a0:	409a      	lsls	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8110 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <HAL_DMA_IRQHandler+0x690>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04a      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <HAL_DMA_IRQHandler+0x694>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d045      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_DMA_IRQHandler+0x698>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_DMA_IRQHandler+0x69c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d03b      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a26      	ldr	r2, [pc, #152]	@ (8002a74 <HAL_DMA_IRQHandler+0x6a0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d036      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a25      	ldr	r2, [pc, #148]	@ (8002a78 <HAL_DMA_IRQHandler+0x6a4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_DMA_IRQHandler+0x6a8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d02c      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <HAL_DMA_IRQHandler+0x6ac>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d027      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <HAL_DMA_IRQHandler+0x6b0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_DMA_IRQHandler+0x6b4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01d      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <HAL_DMA_IRQHandler+0x6b8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_DMA_IRQHandler+0x6bc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_DMA_IRQHandler+0x6c0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_DMA_IRQHandler+0x6c4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_DMA_IRQHandler+0x6c8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x678>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <HAL_DMA_IRQHandler+0x6cc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d12b      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x6d0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	e02a      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x6e4>
 8002a62:	bf00      	nop
 8002a64:	40020010 	.word	0x40020010
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	40020040 	.word	0x40020040
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40020070 	.word	0x40020070
 8002a78:	40020088 	.word	0x40020088
 8002a7c:	400200a0 	.word	0x400200a0
 8002a80:	400200b8 	.word	0x400200b8
 8002a84:	40020410 	.word	0x40020410
 8002a88:	40020428 	.word	0x40020428
 8002a8c:	40020440 	.word	0x40020440
 8002a90:	40020458 	.word	0x40020458
 8002a94:	40020470 	.word	0x40020470
 8002a98:	40020488 	.word	0x40020488
 8002a9c:	400204a0 	.word	0x400204a0
 8002aa0:	400204b8 	.word	0x400204b8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8087 	beq.w	8002bcc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d139      	bne.n	8002b4e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0216 	bic.w	r2, r2, #22
 8002ae8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002af8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_DMA_IRQHandler+0x736>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	223f      	movs	r2, #63	@ 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 834a 	beq.w	80031d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
          }
          return;
 8002b4c:	e344      	b.n	80031d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d018      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d02c      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
 8002b7a:	e027      	b.n	8002bcc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
 8002b8c:	e01e      	b.n	8002bcc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0210 	bic.w	r2, r2, #16
 8002baa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8306 	beq.w	80031e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8088 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2204      	movs	r2, #4
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7a      	ldr	r2, [pc, #488]	@ (8002ddc <HAL_DMA_IRQHandler+0xa08>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04a      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a79      	ldr	r2, [pc, #484]	@ (8002de0 <HAL_DMA_IRQHandler+0xa0c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d045      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a77      	ldr	r2, [pc, #476]	@ (8002de4 <HAL_DMA_IRQHandler+0xa10>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a76      	ldr	r2, [pc, #472]	@ (8002de8 <HAL_DMA_IRQHandler+0xa14>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d03b      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a74      	ldr	r2, [pc, #464]	@ (8002dec <HAL_DMA_IRQHandler+0xa18>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a73      	ldr	r2, [pc, #460]	@ (8002df0 <HAL_DMA_IRQHandler+0xa1c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d031      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a71      	ldr	r2, [pc, #452]	@ (8002df4 <HAL_DMA_IRQHandler+0xa20>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02c      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a70      	ldr	r2, [pc, #448]	@ (8002df8 <HAL_DMA_IRQHandler+0xa24>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d027      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6e      	ldr	r2, [pc, #440]	@ (8002dfc <HAL_DMA_IRQHandler+0xa28>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e00 <HAL_DMA_IRQHandler+0xa2c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6b      	ldr	r2, [pc, #428]	@ (8002e04 <HAL_DMA_IRQHandler+0xa30>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e08 <HAL_DMA_IRQHandler+0xa34>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a68      	ldr	r2, [pc, #416]	@ (8002e0c <HAL_DMA_IRQHandler+0xa38>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a67      	ldr	r2, [pc, #412]	@ (8002e10 <HAL_DMA_IRQHandler+0xa3c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_DMA_IRQHandler+0xa40>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x8b8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a64      	ldr	r2, [pc, #400]	@ (8002e18 <HAL_DMA_IRQHandler+0xa44>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d108      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x8ca>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_DMA_IRQHandler+0x8da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d307      	bcc.n	8002cca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f2      	bne.n	8002cae <HAL_DMA_IRQHandler+0x8da>
 8002cc8:	e000      	b.n	8002ccc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002cca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ce2:	e003      	b.n	8002cec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8272 	beq.w	80031e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
 8002d06:	e26c      	b.n	80031e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a43      	ldr	r2, [pc, #268]	@ (8002e1c <HAL_DMA_IRQHandler+0xa48>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a42      	ldr	r2, [pc, #264]	@ (8002e20 <HAL_DMA_IRQHandler+0xa4c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a40      	ldr	r2, [pc, #256]	@ (8002e24 <HAL_DMA_IRQHandler+0xa50>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e28 <HAL_DMA_IRQHandler+0xa54>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3d      	ldr	r2, [pc, #244]	@ (8002e2c <HAL_DMA_IRQHandler+0xa58>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <HAL_DMA_IRQHandler+0xa5c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	@ (8002e34 <HAL_DMA_IRQHandler+0xa60>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x984>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <HAL_DMA_IRQHandler+0xa64>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x988>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0x98a>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 823f 	beq.w	80031e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2204      	movs	r2, #4
 8002d76:	409a      	lsls	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80cd 	beq.w	8002f1c <HAL_DMA_IRQHandler+0xb48>
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80c7 	beq.w	8002f1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2204      	movs	r2, #4
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d049      	beq.n	8002e3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8210 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc4:	e20a      	b.n	80031dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8206 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dd8:	e200      	b.n	80031dc <HAL_DMA_IRQHandler+0xe08>
 8002dda:	bf00      	nop
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
 8002e1c:	58025408 	.word	0x58025408
 8002e20:	5802541c 	.word	0x5802541c
 8002e24:	58025430 	.word	0x58025430
 8002e28:	58025444 	.word	0x58025444
 8002e2c:	58025458 	.word	0x58025458
 8002e30:	5802546c 	.word	0x5802546c
 8002e34:	58025480 	.word	0x58025480
 8002e38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d160      	bne.n	8002f08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003048 <HAL_DMA_IRQHandler+0xc74>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04a      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a7d      	ldr	r2, [pc, #500]	@ (800304c <HAL_DMA_IRQHandler+0xc78>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d045      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <HAL_DMA_IRQHandler+0xc7c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d040      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a7a      	ldr	r2, [pc, #488]	@ (8003054 <HAL_DMA_IRQHandler+0xc80>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d03b      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a79      	ldr	r2, [pc, #484]	@ (8003058 <HAL_DMA_IRQHandler+0xc84>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d036      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a77      	ldr	r2, [pc, #476]	@ (800305c <HAL_DMA_IRQHandler+0xc88>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d031      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a76      	ldr	r2, [pc, #472]	@ (8003060 <HAL_DMA_IRQHandler+0xc8c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02c      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a74      	ldr	r2, [pc, #464]	@ (8003064 <HAL_DMA_IRQHandler+0xc90>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d027      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a73      	ldr	r2, [pc, #460]	@ (8003068 <HAL_DMA_IRQHandler+0xc94>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a71      	ldr	r2, [pc, #452]	@ (800306c <HAL_DMA_IRQHandler+0xc98>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a70      	ldr	r2, [pc, #448]	@ (8003070 <HAL_DMA_IRQHandler+0xc9c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003074 <HAL_DMA_IRQHandler+0xca0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8003078 <HAL_DMA_IRQHandler+0xca4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800307c <HAL_DMA_IRQHandler+0xca8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6a      	ldr	r2, [pc, #424]	@ (8003080 <HAL_DMA_IRQHandler+0xcac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xb12>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a68      	ldr	r2, [pc, #416]	@ (8003084 <HAL_DMA_IRQHandler+0xcb0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0xb24>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0208 	bic.w	r2, r2, #8
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e007      	b.n	8002f08 <HAL_DMA_IRQHandler+0xb34>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8165 	beq.w	80031dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f1a:	e15f      	b.n	80031dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2202      	movs	r2, #2
 8002f26:	409a      	lsls	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80c5 	beq.w	80030bc <HAL_DMA_IRQHandler+0xce8>
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80bf 	beq.w	80030bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2202      	movs	r2, #2
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 813a 	beq.w	80031e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f74:	e134      	b.n	80031e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8130 	beq.w	80031e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f88:	e12a      	b.n	80031e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 8089 	bne.w	80030a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003048 <HAL_DMA_IRQHandler+0xc74>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04a      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a29      	ldr	r2, [pc, #164]	@ (800304c <HAL_DMA_IRQHandler+0xc78>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d045      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a28      	ldr	r2, [pc, #160]	@ (8003050 <HAL_DMA_IRQHandler+0xc7c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d040      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <HAL_DMA_IRQHandler+0xc80>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d03b      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a25      	ldr	r2, [pc, #148]	@ (8003058 <HAL_DMA_IRQHandler+0xc84>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d036      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	@ (800305c <HAL_DMA_IRQHandler+0xc88>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d031      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_DMA_IRQHandler+0xc8c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02c      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	@ (8003064 <HAL_DMA_IRQHandler+0xc90>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <HAL_DMA_IRQHandler+0xc94>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800306c <HAL_DMA_IRQHandler+0xc98>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <HAL_DMA_IRQHandler+0xc9c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1a      	ldr	r2, [pc, #104]	@ (8003074 <HAL_DMA_IRQHandler+0xca0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_DMA_IRQHandler+0xca4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_DMA_IRQHandler+0xca8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <HAL_DMA_IRQHandler+0xcac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_IRQHandler+0xc62>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a14      	ldr	r2, [pc, #80]	@ (8003084 <HAL_DMA_IRQHandler+0xcb0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d128      	bne.n	8003088 <HAL_DMA_IRQHandler+0xcb4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0214 	bic.w	r2, r2, #20
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e027      	b.n	8003098 <HAL_DMA_IRQHandler+0xcc4>
 8003048:	40020010 	.word	0x40020010
 800304c:	40020028 	.word	0x40020028
 8003050:	40020040 	.word	0x40020040
 8003054:	40020058 	.word	0x40020058
 8003058:	40020070 	.word	0x40020070
 800305c:	40020088 	.word	0x40020088
 8003060:	400200a0 	.word	0x400200a0
 8003064:	400200b8 	.word	0x400200b8
 8003068:	40020410 	.word	0x40020410
 800306c:	40020428 	.word	0x40020428
 8003070:	40020440 	.word	0x40020440
 8003074:	40020458 	.word	0x40020458
 8003078:	40020470 	.word	0x40020470
 800307c:	40020488 	.word	0x40020488
 8003080:	400204a0 	.word	0x400204a0
 8003084:	400204b8 	.word	0x400204b8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 020a 	bic.w	r2, r2, #10
 8003096:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ba:	e091      	b.n	80031e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2208      	movs	r2, #8
 80030c6:	409a      	lsls	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8088 	beq.w	80031e2 <HAL_DMA_IRQHandler+0xe0e>
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8082 	beq.w	80031e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a41      	ldr	r2, [pc, #260]	@ (80031e8 <HAL_DMA_IRQHandler+0xe14>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3f      	ldr	r2, [pc, #252]	@ (80031ec <HAL_DMA_IRQHandler+0xe18>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3e      	ldr	r2, [pc, #248]	@ (80031f0 <HAL_DMA_IRQHandler+0xe1c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3c      	ldr	r2, [pc, #240]	@ (80031f4 <HAL_DMA_IRQHandler+0xe20>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3b      	ldr	r2, [pc, #236]	@ (80031f8 <HAL_DMA_IRQHandler+0xe24>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a39      	ldr	r2, [pc, #228]	@ (80031fc <HAL_DMA_IRQHandler+0xe28>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a38      	ldr	r2, [pc, #224]	@ (8003200 <HAL_DMA_IRQHandler+0xe2c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a36      	ldr	r2, [pc, #216]	@ (8003204 <HAL_DMA_IRQHandler+0xe30>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a35      	ldr	r2, [pc, #212]	@ (8003208 <HAL_DMA_IRQHandler+0xe34>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a33      	ldr	r2, [pc, #204]	@ (800320c <HAL_DMA_IRQHandler+0xe38>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	@ (8003210 <HAL_DMA_IRQHandler+0xe3c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	@ (8003214 <HAL_DMA_IRQHandler+0xe40>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2f      	ldr	r2, [pc, #188]	@ (8003218 <HAL_DMA_IRQHandler+0xe44>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <HAL_DMA_IRQHandler+0xe48>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	@ (8003220 <HAL_DMA_IRQHandler+0xe4c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_IRQHandler+0xdaa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2a      	ldr	r2, [pc, #168]	@ (8003224 <HAL_DMA_IRQHandler+0xe50>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <HAL_DMA_IRQHandler+0xdbc>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 021c 	bic.w	r2, r2, #28
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e007      	b.n	80031a0 <HAL_DMA_IRQHandler+0xdcc>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020e 	bic.w	r2, r2, #14
 800319e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
 80031d6:	e004      	b.n	80031e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80031d8:	bf00      	nop
 80031da:	e002      	b.n	80031e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80031e2:	3728      	adds	r7, #40	@ 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40020010 	.word	0x40020010
 80031ec:	40020028 	.word	0x40020028
 80031f0:	40020040 	.word	0x40020040
 80031f4:	40020058 	.word	0x40020058
 80031f8:	40020070 	.word	0x40020070
 80031fc:	40020088 	.word	0x40020088
 8003200:	400200a0 	.word	0x400200a0
 8003204:	400200b8 	.word	0x400200b8
 8003208:	40020410 	.word	0x40020410
 800320c:	40020428 	.word	0x40020428
 8003210:	40020440 	.word	0x40020440
 8003214:	40020458 	.word	0x40020458
 8003218:	40020470 	.word	0x40020470
 800321c:	40020488 	.word	0x40020488
 8003220:	400204a0 	.word	0x400204a0
 8003224:	400204b8 	.word	0x400204b8

08003228 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7f      	ldr	r2, [pc, #508]	@ (800345c <DMA_SetConfig+0x21c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d072      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7d      	ldr	r2, [pc, #500]	@ (8003460 <DMA_SetConfig+0x220>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d06d      	beq.n	800334a <DMA_SetConfig+0x10a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7c      	ldr	r2, [pc, #496]	@ (8003464 <DMA_SetConfig+0x224>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d068      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7a      	ldr	r2, [pc, #488]	@ (8003468 <DMA_SetConfig+0x228>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d063      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a79      	ldr	r2, [pc, #484]	@ (800346c <DMA_SetConfig+0x22c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d05e      	beq.n	800334a <DMA_SetConfig+0x10a>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a77      	ldr	r2, [pc, #476]	@ (8003470 <DMA_SetConfig+0x230>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d059      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a76      	ldr	r2, [pc, #472]	@ (8003474 <DMA_SetConfig+0x234>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d054      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a74      	ldr	r2, [pc, #464]	@ (8003478 <DMA_SetConfig+0x238>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04f      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	@ (800347c <DMA_SetConfig+0x23c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d04a      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a71      	ldr	r2, [pc, #452]	@ (8003480 <DMA_SetConfig+0x240>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d045      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a70      	ldr	r2, [pc, #448]	@ (8003484 <DMA_SetConfig+0x244>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d040      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003488 <DMA_SetConfig+0x248>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03b      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6d      	ldr	r2, [pc, #436]	@ (800348c <DMA_SetConfig+0x24c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d036      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003490 <DMA_SetConfig+0x250>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003494 <DMA_SetConfig+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02c      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	@ (8003498 <DMA_SetConfig+0x258>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <DMA_SetConfig+0x10a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a67      	ldr	r2, [pc, #412]	@ (800349c <DMA_SetConfig+0x25c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a65      	ldr	r2, [pc, #404]	@ (80034a0 <DMA_SetConfig+0x260>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01d      	beq.n	800334a <DMA_SetConfig+0x10a>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a64      	ldr	r2, [pc, #400]	@ (80034a4 <DMA_SetConfig+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a62      	ldr	r2, [pc, #392]	@ (80034a8 <DMA_SetConfig+0x268>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a61      	ldr	r2, [pc, #388]	@ (80034ac <DMA_SetConfig+0x26c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <DMA_SetConfig+0x10a>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5f      	ldr	r2, [pc, #380]	@ (80034b0 <DMA_SetConfig+0x270>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5e      	ldr	r2, [pc, #376]	@ (80034b4 <DMA_SetConfig+0x274>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <DMA_SetConfig+0x10a>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5c      	ldr	r2, [pc, #368]	@ (80034b8 <DMA_SetConfig+0x278>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <DMA_SetConfig+0x10e>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <DMA_SetConfig+0x110>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800335c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800336e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a39      	ldr	r2, [pc, #228]	@ (800345c <DMA_SetConfig+0x21c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d04a      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <DMA_SetConfig+0x220>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d045      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <DMA_SetConfig+0x224>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d040      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a35      	ldr	r2, [pc, #212]	@ (8003468 <DMA_SetConfig+0x228>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d03b      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a33      	ldr	r2, [pc, #204]	@ (800346c <DMA_SetConfig+0x22c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d036      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a32      	ldr	r2, [pc, #200]	@ (8003470 <DMA_SetConfig+0x230>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d031      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <DMA_SetConfig+0x234>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02c      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003478 <DMA_SetConfig+0x238>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d027      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	@ (800347c <DMA_SetConfig+0x23c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <DMA_SetConfig+0x240>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01d      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003484 <DMA_SetConfig+0x244>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a29      	ldr	r2, [pc, #164]	@ (8003488 <DMA_SetConfig+0x248>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a27      	ldr	r2, [pc, #156]	@ (800348c <DMA_SetConfig+0x24c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a26      	ldr	r2, [pc, #152]	@ (8003490 <DMA_SetConfig+0x250>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a24      	ldr	r2, [pc, #144]	@ (8003494 <DMA_SetConfig+0x254>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <DMA_SetConfig+0x1d0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <DMA_SetConfig+0x258>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <DMA_SetConfig+0x1d4>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <DMA_SetConfig+0x1d6>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d059      	beq.n	80034ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	223f      	movs	r2, #63	@ 0x3f
 8003424:	409a      	lsls	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003438:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d138      	bne.n	80034bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800345a:	e086      	b.n	800356a <DMA_SetConfig+0x32a>
 800345c:	40020010 	.word	0x40020010
 8003460:	40020028 	.word	0x40020028
 8003464:	40020040 	.word	0x40020040
 8003468:	40020058 	.word	0x40020058
 800346c:	40020070 	.word	0x40020070
 8003470:	40020088 	.word	0x40020088
 8003474:	400200a0 	.word	0x400200a0
 8003478:	400200b8 	.word	0x400200b8
 800347c:	40020410 	.word	0x40020410
 8003480:	40020428 	.word	0x40020428
 8003484:	40020440 	.word	0x40020440
 8003488:	40020458 	.word	0x40020458
 800348c:	40020470 	.word	0x40020470
 8003490:	40020488 	.word	0x40020488
 8003494:	400204a0 	.word	0x400204a0
 8003498:	400204b8 	.word	0x400204b8
 800349c:	58025408 	.word	0x58025408
 80034a0:	5802541c 	.word	0x5802541c
 80034a4:	58025430 	.word	0x58025430
 80034a8:	58025444 	.word	0x58025444
 80034ac:	58025458 	.word	0x58025458
 80034b0:	5802546c 	.word	0x5802546c
 80034b4:	58025480 	.word	0x58025480
 80034b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
}
 80034cc:	e04d      	b.n	800356a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a29      	ldr	r2, [pc, #164]	@ (8003578 <DMA_SetConfig+0x338>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <DMA_SetConfig+0x2de>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a27      	ldr	r2, [pc, #156]	@ (800357c <DMA_SetConfig+0x33c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <DMA_SetConfig+0x2de>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <DMA_SetConfig+0x340>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <DMA_SetConfig+0x2de>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a24      	ldr	r2, [pc, #144]	@ (8003584 <DMA_SetConfig+0x344>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <DMA_SetConfig+0x2de>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <DMA_SetConfig+0x348>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <DMA_SetConfig+0x2de>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a21      	ldr	r2, [pc, #132]	@ (800358c <DMA_SetConfig+0x34c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <DMA_SetConfig+0x2de>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <DMA_SetConfig+0x350>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <DMA_SetConfig+0x2de>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1e      	ldr	r2, [pc, #120]	@ (8003594 <DMA_SetConfig+0x354>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <DMA_SetConfig+0x2e2>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <DMA_SetConfig+0x2e4>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d108      	bne.n	800355a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	60da      	str	r2, [r3, #12]
}
 8003558:	e007      	b.n	800356a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	58025408 	.word	0x58025408
 800357c:	5802541c 	.word	0x5802541c
 8003580:	58025430 	.word	0x58025430
 8003584:	58025444 	.word	0x58025444
 8003588:	58025458 	.word	0x58025458
 800358c:	5802546c 	.word	0x5802546c
 8003590:	58025480 	.word	0x58025480
 8003594:	58025494 	.word	0x58025494

08003598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a42      	ldr	r2, [pc, #264]	@ (80036b0 <DMA_CalcBaseAndBitshift+0x118>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d04a      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a41      	ldr	r2, [pc, #260]	@ (80036b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d045      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3f      	ldr	r2, [pc, #252]	@ (80036b8 <DMA_CalcBaseAndBitshift+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d040      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <DMA_CalcBaseAndBitshift+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d03b      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3c      	ldr	r2, [pc, #240]	@ (80036c0 <DMA_CalcBaseAndBitshift+0x128>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d036      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3b      	ldr	r2, [pc, #236]	@ (80036c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d031      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a39      	ldr	r2, [pc, #228]	@ (80036c8 <DMA_CalcBaseAndBitshift+0x130>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02c      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <DMA_CalcBaseAndBitshift+0x134>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d027      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a36      	ldr	r2, [pc, #216]	@ (80036d0 <DMA_CalcBaseAndBitshift+0x138>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d022      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01d      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a33      	ldr	r2, [pc, #204]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x140>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d018      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <DMA_CalcBaseAndBitshift+0x144>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d013      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x148>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <DMA_CalcBaseAndBitshift+0x150>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <DMA_CalcBaseAndBitshift+0xa8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2c      	ldr	r2, [pc, #176]	@ (80036ec <DMA_CalcBaseAndBitshift+0x154>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <DMA_CalcBaseAndBitshift+0xac>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <DMA_CalcBaseAndBitshift+0xae>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d024      	beq.n	8003694 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3b10      	subs	r3, #16
 8003652:	4a27      	ldr	r2, [pc, #156]	@ (80036f0 <DMA_CalcBaseAndBitshift+0x158>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d908      	bls.n	8003684 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <DMA_CalcBaseAndBitshift+0x160>)
 800367a:	4013      	ands	r3, r2
 800367c:	1d1a      	adds	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	@ 0x58
 8003682:	e00d      	b.n	80036a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <DMA_CalcBaseAndBitshift+0x160>)
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6593      	str	r3, [r2, #88]	@ 0x58
 8003692:	e005      	b.n	80036a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40020010 	.word	0x40020010
 80036b4:	40020028 	.word	0x40020028
 80036b8:	40020040 	.word	0x40020040
 80036bc:	40020058 	.word	0x40020058
 80036c0:	40020070 	.word	0x40020070
 80036c4:	40020088 	.word	0x40020088
 80036c8:	400200a0 	.word	0x400200a0
 80036cc:	400200b8 	.word	0x400200b8
 80036d0:	40020410 	.word	0x40020410
 80036d4:	40020428 	.word	0x40020428
 80036d8:	40020440 	.word	0x40020440
 80036dc:	40020458 	.word	0x40020458
 80036e0:	40020470 	.word	0x40020470
 80036e4:	40020488 	.word	0x40020488
 80036e8:	400204a0 	.word	0x400204a0
 80036ec:	400204b8 	.word	0x400204b8
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	08007924 	.word	0x08007924
 80036f8:	fffffc00 	.word	0xfffffc00

080036fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d120      	bne.n	8003752 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	2b03      	cmp	r3, #3
 8003716:	d858      	bhi.n	80037ca <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <DMA_CheckFifoParam+0x24>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037cb 	.word	0x080037cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d048      	beq.n	80037ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003740:	e045      	b.n	80037ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800374a:	d142      	bne.n	80037d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003750:	e03f      	b.n	80037d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800375a:	d123      	bne.n	80037a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	2b03      	cmp	r3, #3
 8003762:	d838      	bhi.n	80037d6 <DMA_CheckFifoParam+0xda>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <DMA_CheckFifoParam+0x70>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	08003783 	.word	0x08003783
 8003774:	0800377d 	.word	0x0800377d
 8003778:	08003795 	.word	0x08003795
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
        break;
 8003780:	e030      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d025      	beq.n	80037da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003792:	e022      	b.n	80037da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800379c:	d11f      	bne.n	80037de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037a2:	e01c      	b.n	80037de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d902      	bls.n	80037b2 <DMA_CheckFifoParam+0xb6>
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d003      	beq.n	80037b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80037b0:	e018      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
        break;
 80037b6:	e015      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
    break;
 80037c8:	e00b      	b.n	80037e2 <DMA_CheckFifoParam+0xe6>
        break;
 80037ca:	bf00      	nop
 80037cc:	e00a      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        break;
 80037ce:	bf00      	nop
 80037d0:	e008      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        break;
 80037d2:	bf00      	nop
 80037d4:	e006      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        break;
 80037d6:	bf00      	nop
 80037d8:	e004      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
        break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <DMA_CheckFifoParam+0xe8>
    break;
 80037e2:	bf00      	nop
    }
  }

  return status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a38      	ldr	r2, [pc, #224]	@ (80038e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a36      	ldr	r2, [pc, #216]	@ (80038ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a35      	ldr	r2, [pc, #212]	@ (80038f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a32      	ldr	r2, [pc, #200]	@ (80038f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2f      	ldr	r2, [pc, #188]	@ (8003900 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2d      	ldr	r2, [pc, #180]	@ (8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01a      	beq.n	8003892 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3b08      	subs	r3, #8
 8003864:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4b26      	ldr	r3, [pc, #152]	@ (800390c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a24      	ldr	r2, [pc, #144]	@ (8003910 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003880:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003890:	e024      	b.n	80038dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3b10      	subs	r3, #16
 800389a:	4a1e      	ldr	r2, [pc, #120]	@ (8003914 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d806      	bhi.n	80038ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a1b      	ldr	r2, [pc, #108]	@ (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d902      	bls.n	80038ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3308      	adds	r3, #8
 80038b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80038cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	2201      	movs	r2, #1
 80038d6:	409a      	lsls	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	58025408 	.word	0x58025408
 80038ec:	5802541c 	.word	0x5802541c
 80038f0:	58025430 	.word	0x58025430
 80038f4:	58025444 	.word	0x58025444
 80038f8:	58025458 	.word	0x58025458
 80038fc:	5802546c 	.word	0x5802546c
 8003900:	58025480 	.word	0x58025480
 8003904:	58025494 	.word	0x58025494
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	16009600 	.word	0x16009600
 8003910:	58025880 	.word	0x58025880
 8003914:	aaaaaaab 	.word	0xaaaaaaab
 8003918:	400204b8 	.word	0x400204b8
 800391c:	4002040f 	.word	0x4002040f
 8003920:	10008200 	.word	0x10008200
 8003924:	40020880 	.word	0x40020880

08003928 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04a      	beq.n	80039d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d847      	bhi.n	80039d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a25      	ldr	r2, [pc, #148]	@ (80039e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d022      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a24      	ldr	r2, [pc, #144]	@ (80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d01d      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a15      	ldr	r2, [pc, #84]	@ (8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80039b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80039b2:	e009      	b.n	80039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4b14      	ldr	r3, [pc, #80]	@ (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a11      	ldr	r2, [pc, #68]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80039c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	58025408 	.word	0x58025408
 80039e4:	5802541c 	.word	0x5802541c
 80039e8:	58025430 	.word	0x58025430
 80039ec:	58025444 	.word	0x58025444
 80039f0:	58025458 	.word	0x58025458
 80039f4:	5802546c 	.word	0x5802546c
 80039f8:	58025480 	.word	0x58025480
 80039fc:	58025494 	.word	0x58025494
 8003a00:	1600963f 	.word	0x1600963f
 8003a04:	58025940 	.word	0x58025940
 8003a08:	1000823f 	.word	0x1000823f
 8003a0c:	40020940 	.word	0x40020940

08003a10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	011a      	lsls	r2, r3, #4
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_EXTI_IRQHandler+0x5c>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4798      	blx	r3
    }
  }
}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	58000088 	.word	0x58000088

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	@ 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <HAL_GPIO_Init+0x234>)
 8003a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a82:	e194      	b.n	8003dae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8186 	beq.w	8003da8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d005      	beq.n	8003ab4 <HAL_GPIO_Init+0x44>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d130      	bne.n	8003b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aea:	2201      	movs	r2, #1
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f003 0201 	and.w	r2, r3, #1
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d017      	beq.n	8003b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d123      	bne.n	8003ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0203 	and.w	r2, r3, #3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80e0 	beq.w	8003da8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_GPIO_Init+0x238>)
 8003bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bee:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca8 <HAL_GPIO_Init+0x238>)
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca8 <HAL_GPIO_Init+0x238>)
 8003bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c06:	4a29      	ldr	r2, [pc, #164]	@ (8003cac <HAL_GPIO_Init+0x23c>)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_GPIO_Init+0x240>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d052      	beq.n	8003cd8 <HAL_GPIO_Init+0x268>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_GPIO_Init+0x244>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_GPIO_Init+0x22e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <HAL_GPIO_Init+0x248>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02b      	beq.n	8003c9a <HAL_GPIO_Init+0x22a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <HAL_GPIO_Init+0x24c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d025      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <HAL_GPIO_Init+0x250>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01f      	beq.n	8003c92 <HAL_GPIO_Init+0x222>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <HAL_GPIO_Init+0x254>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d019      	beq.n	8003c8e <HAL_GPIO_Init+0x21e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_GPIO_Init+0x258>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_GPIO_Init+0x21a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <HAL_GPIO_Init+0x25c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <HAL_GPIO_Init+0x216>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_GPIO_Init+0x260>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <HAL_GPIO_Init+0x212>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <HAL_GPIO_Init+0x264>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_GPIO_Init+0x20e>
 8003c7a:	2309      	movs	r3, #9
 8003c7c:	e02d      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c7e:	230a      	movs	r3, #10
 8003c80:	e02b      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c82:	2308      	movs	r3, #8
 8003c84:	e029      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c86:	2307      	movs	r3, #7
 8003c88:	e027      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c8a:	2306      	movs	r3, #6
 8003c8c:	e025      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c8e:	2305      	movs	r3, #5
 8003c90:	e023      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c92:	2304      	movs	r3, #4
 8003c94:	e021      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e01f      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e01d      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e01b      	b.n	8003cda <HAL_GPIO_Init+0x26a>
 8003ca2:	bf00      	nop
 8003ca4:	58000080 	.word	0x58000080
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58000400 	.word	0x58000400
 8003cb0:	58020000 	.word	0x58020000
 8003cb4:	58020400 	.word	0x58020400
 8003cb8:	58020800 	.word	0x58020800
 8003cbc:	58020c00 	.word	0x58020c00
 8003cc0:	58021000 	.word	0x58021000
 8003cc4:	58021400 	.word	0x58021400
 8003cc8:	58021800 	.word	0x58021800
 8003ccc:	58021c00 	.word	0x58021c00
 8003cd0:	58022000 	.word	0x58022000
 8003cd4:	58022400 	.word	0x58022400
 8003cd8:	2300      	movs	r3, #0
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	f002 0203 	and.w	r2, r2, #3
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	4093      	lsls	r3, r2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cea:	4938      	ldr	r1, [pc, #224]	@ (8003dcc <HAL_GPIO_Init+0x35c>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f ae63 	bne.w	8003a84 <HAL_GPIO_Init+0x14>
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	3724      	adds	r7, #36	@ 0x24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	58000400 	.word	0x58000400

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_PWREx_ConfigSupply+0x70>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d00a      	beq.n	8003e2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <HAL_PWREx_ConfigSupply+0x70>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d001      	beq.n	8003e2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e01f      	b.n	8003e6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e01d      	b.n	8003e6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_PWREx_ConfigSupply+0x70>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 0207 	bic.w	r2, r3, #7
 8003e36:	490f      	ldr	r1, [pc, #60]	@ (8003e74 <HAL_PWREx_ConfigSupply+0x70>)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e3e:	f7fd f971 	bl	8001124 <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e44:	e009      	b.n	8003e5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e46:	f7fd f96d 	bl	8001124 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e54:	d901      	bls.n	8003e5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <HAL_PWREx_ConfigSupply+0x70>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e66:	d1ee      	bne.n	8003e46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024800 	.word	0x58024800

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	@ 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f000 bc48 	b.w	800471c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8088 	beq.w	8003faa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b99      	ldr	r3, [pc, #612]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ea4:	4b96      	ldr	r3, [pc, #600]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x48>
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	2b18      	cmp	r3, #24
 8003eb4:	d111      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d06d      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x130>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d169      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 bc21 	b.w	800471c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x7a>
 8003ee4:	4b86      	ldr	r3, [pc, #536]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a85      	ldr	r2, [pc, #532]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e02e      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x9c>
 8003efa:	4b81      	ldr	r3, [pc, #516]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a80      	ldr	r2, [pc, #512]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b7e      	ldr	r3, [pc, #504]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	4b78      	ldr	r3, [pc, #480]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a77      	ldr	r2, [pc, #476]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b75      	ldr	r3, [pc, #468]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a74      	ldr	r2, [pc, #464]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f38:	4b71      	ldr	r3, [pc, #452]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a70      	ldr	r2, [pc, #448]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b6e      	ldr	r3, [pc, #440]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6d      	ldr	r2, [pc, #436]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd f8e4 	bl	8001124 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd f8e0 	bl	8001124 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e3d4      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f72:	4b63      	ldr	r3, [pc, #396]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xe8>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd f8d0 	bl	8001124 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd f8cc 	bl	8001124 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	@ 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e3c0      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9a:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x110>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80ca 	beq.w	800414c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb8:	4b51      	ldr	r3, [pc, #324]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_RCC_OscConfig+0x166>
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	2b18      	cmp	r3, #24
 8003fd2:	d156      	bne.n	8004082 <HAL_RCC_OscConfig+0x20a>
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d151      	bne.n	8004082 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fde:	4b48      	ldr	r3, [pc, #288]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x17e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e392      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ff6:	4b42      	ldr	r3, [pc, #264]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0219 	bic.w	r2, r3, #25
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	493f      	ldr	r1, [pc, #252]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd f88c 	bl	8001124 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd f888 	bl	8001124 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e37c      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	f7fd f8a9 	bl	8001184 <HAL_GetREVID>
 8004032:	4603      	mov	r3, r0
 8004034:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004038:	4293      	cmp	r3, r2
 800403a:	d817      	bhi.n	800406c <HAL_RCC_OscConfig+0x1f4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b40      	cmp	r3, #64	@ 0x40
 8004042:	d108      	bne.n	8004056 <HAL_RCC_OscConfig+0x1de>
 8004044:	4b2e      	ldr	r3, [pc, #184]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800404c:	4a2c      	ldr	r2, [pc, #176]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 800404e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004052:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	e07a      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	031b      	lsls	r3, r3, #12
 8004064:	4926      	ldr	r1, [pc, #152]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406a:	e06f      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	4921      	ldr	r1, [pc, #132]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004080:	e064      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d047      	beq.n	800411a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800408a:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 0219 	bic.w	r2, r3, #25
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	491a      	ldr	r1, [pc, #104]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd f842 	bl	8001124 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a4:	f7fd f83e 	bl	8001124 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e332      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b6:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	f7fd f85f 	bl	8001184 <HAL_GetREVID>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d819      	bhi.n	8004104 <HAL_RCC_OscConfig+0x28c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d108      	bne.n	80040ea <HAL_RCC_OscConfig+0x272>
 80040d8:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80040e0:	4a07      	ldr	r2, [pc, #28]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 80040e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040e6:	6053      	str	r3, [r2, #4]
 80040e8:	e030      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	031b      	lsls	r3, r3, #12
 80040f8:	4901      	ldr	r1, [pc, #4]	@ (8004100 <HAL_RCC_OscConfig+0x288>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]
 80040fe:	e025      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
 8004100:	58024400 	.word	0x58024400
 8004104:	4b9a      	ldr	r3, [pc, #616]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	4997      	ldr	r1, [pc, #604]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
 8004118:	e018      	b.n	800414c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b95      	ldr	r3, [pc, #596]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a94      	ldr	r2, [pc, #592]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fc fffd 	bl	8001124 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fc fff9 	bl	8001124 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e2ed      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004140:	4b8b      	ldr	r3, [pc, #556]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a9 	beq.w	80042ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415a:	4b85      	ldr	r3, [pc, #532]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004162:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004164:	4b82      	ldr	r3, [pc, #520]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d007      	beq.n	8004180 <HAL_RCC_OscConfig+0x308>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b18      	cmp	r3, #24
 8004174:	d13a      	bne.n	80041ec <HAL_RCC_OscConfig+0x374>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d135      	bne.n	80041ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004180:	4b7b      	ldr	r3, [pc, #492]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_OscConfig+0x320>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b80      	cmp	r3, #128	@ 0x80
 8004192:	d001      	beq.n	8004198 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e2c1      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004198:	f7fc fff4 	bl	8001184 <HAL_GetREVID>
 800419c:	4603      	mov	r3, r0
 800419e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d817      	bhi.n	80041d6 <HAL_RCC_OscConfig+0x35e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d108      	bne.n	80041c0 <HAL_RCC_OscConfig+0x348>
 80041ae:	4b70      	ldr	r3, [pc, #448]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041be:	e075      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	069b      	lsls	r3, r3, #26
 80041ce:	4968      	ldr	r1, [pc, #416]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041d4:	e06a      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041d6:	4b66      	ldr	r3, [pc, #408]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	4962      	ldr	r1, [pc, #392]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ea:	e05f      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d042      	beq.n	800427a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fc ff90 	bl	8001124 <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004208:	f7fc ff8c 	bl	8001124 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e280      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800421a:	4b55      	ldr	r3, [pc, #340]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004226:	f7fc ffad 	bl	8001184 <HAL_GetREVID>
 800422a:	4603      	mov	r3, r0
 800422c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004230:	4293      	cmp	r3, r2
 8004232:	d817      	bhi.n	8004264 <HAL_RCC_OscConfig+0x3ec>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	2b20      	cmp	r3, #32
 800423a:	d108      	bne.n	800424e <HAL_RCC_OscConfig+0x3d6>
 800423c:	4b4c      	ldr	r3, [pc, #304]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004244:	4a4a      	ldr	r2, [pc, #296]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004246:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800424a:	6053      	str	r3, [r2, #4]
 800424c:	e02e      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
 800424e:	4b48      	ldr	r3, [pc, #288]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	4944      	ldr	r1, [pc, #272]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
 8004262:	e023      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
 8004264:	4b42      	ldr	r3, [pc, #264]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	493f      	ldr	r1, [pc, #252]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
 8004278:	e018      	b.n	80042ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800427a:	4b3d      	ldr	r3, [pc, #244]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3c      	ldr	r2, [pc, #240]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fc ff4d 	bl	8001124 <HAL_GetTick>
 800428a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800428e:	f7fc ff49 	bl	8001124 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e23d      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a0:	4b33      	ldr	r3, [pc, #204]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d036      	beq.n	8004326 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d019      	beq.n	80042f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fc ff2a 	bl	8001124 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fc ff26 	bl	8001124 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e21a      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042e6:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x45c>
 80042f2:	e018      	b.n	8004326 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fc ff10 	bl	8001124 <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fc ff0c 	bl	8001124 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e200      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800431a:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d039      	beq.n	80043a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01c      	beq.n	8004374 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004344:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004346:	f7fc feed 	bl	8001124 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434e:	f7fc fee9 	bl	8001124 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1dd      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x4d6>
 800436c:	e01b      	b.n	80043a6 <HAL_RCC_OscConfig+0x52e>
 800436e:	bf00      	nop
 8004370:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004374:	4b9b      	ldr	r3, [pc, #620]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a9a      	ldr	r2, [pc, #616]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800437a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800437e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004380:	f7fc fed0 	bl	8001124 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004388:	f7fc fecc 	bl	8001124 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1c0      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439a:	4b92      	ldr	r3, [pc, #584]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8081 	beq.w	80044b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043b4:	4b8c      	ldr	r3, [pc, #560]	@ (80045e8 <HAL_RCC_OscConfig+0x770>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a8b      	ldr	r2, [pc, #556]	@ (80045e8 <HAL_RCC_OscConfig+0x770>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c0:	f7fc feb0 	bl	8001124 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fc feac 	bl	8001124 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1a0      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043da:	4b83      	ldr	r3, [pc, #524]	@ (80045e8 <HAL_RCC_OscConfig+0x770>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x584>
 80043ee:	4b7d      	ldr	r3, [pc, #500]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	4a7c      	ldr	r2, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fa:	e02d      	b.n	8004458 <HAL_RCC_OscConfig+0x5e0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <HAL_RCC_OscConfig+0x5a6>
 8004404:	4b77      	ldr	r3, [pc, #476]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	4a76      	ldr	r2, [pc, #472]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004410:	4b74      	ldr	r3, [pc, #464]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a73      	ldr	r2, [pc, #460]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004416:	f023 0304 	bic.w	r3, r3, #4
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
 800441c:	e01c      	b.n	8004458 <HAL_RCC_OscConfig+0x5e0>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b05      	cmp	r3, #5
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c8>
 8004426:	4b6f      	ldr	r3, [pc, #444]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	4a6e      	ldr	r2, [pc, #440]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	@ 0x70
 8004432:	4b6c      	ldr	r3, [pc, #432]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	4a6b      	ldr	r2, [pc, #428]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6713      	str	r3, [r2, #112]	@ 0x70
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0x5e0>
 8004440:	4b68      	ldr	r3, [pc, #416]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	4a67      	ldr	r2, [pc, #412]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	@ 0x70
 800444c:	4b65      	ldr	r3, [pc, #404]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	4a64      	ldr	r2, [pc, #400]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004452:	f023 0304 	bic.w	r3, r3, #4
 8004456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fc fe60 	bl	8001124 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fc fe5c 	bl	8001124 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e14e      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800447e:	4b59      	ldr	r3, [pc, #356]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ee      	beq.n	8004468 <HAL_RCC_OscConfig+0x5f0>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fc fe4a 	bl	8001124 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004492:	e00a      	b.n	80044aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f7fc fe46 	bl	8001124 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e138      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044aa:	4b4e      	ldr	r3, [pc, #312]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ee      	bne.n	8004494 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 812d 	beq.w	800471a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044c0:	4b48      	ldr	r3, [pc, #288]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	f000 80bd 	beq.w	8004648 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	f040 809e 	bne.w	8004614 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b42      	ldr	r3, [pc, #264]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a41      	ldr	r2, [pc, #260]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fc fe1e 	bl	8001124 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fc fe1a 	bl	8001124 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e10e      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fe:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800450c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800450e:	4b37      	ldr	r3, [pc, #220]	@ (80045ec <HAL_RCC_OscConfig+0x774>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800451a:	0112      	lsls	r2, r2, #4
 800451c:	430a      	orrs	r2, r1
 800451e:	4931      	ldr	r1, [pc, #196]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	628b      	str	r3, [r1, #40]	@ 0x28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	3b01      	subs	r3, #1
 800452a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004532:	3b01      	subs	r3, #1
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	b29b      	uxth	r3, r3
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	3b01      	subs	r3, #1
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004554:	4923      	ldr	r1, [pc, #140]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800455a:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004566:	4b1f      	ldr	r3, [pc, #124]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456a:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <HAL_RCC_OscConfig+0x778>)
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	491b      	ldr	r1, [pc, #108]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800457a:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	f023 020c 	bic.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	4917      	ldr	r1, [pc, #92]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800458c:	4b15      	ldr	r3, [pc, #84]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	f023 0202 	bic.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004598:	4912      	ldr	r1, [pc, #72]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 800459a:	4313      	orrs	r3, r2
 800459c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800459e:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	4a10      	ldr	r2, [pc, #64]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045aa:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	4a0a      	ldr	r2, [pc, #40]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045c2:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ce:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a04      	ldr	r2, [pc, #16]	@ (80045e4 <HAL_RCC_OscConfig+0x76c>)
 80045d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fc fda3 	bl	8001124 <HAL_GetTick>
 80045de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e0:	e011      	b.n	8004606 <HAL_RCC_OscConfig+0x78e>
 80045e2:	bf00      	nop
 80045e4:	58024400 	.word	0x58024400
 80045e8:	58024800 	.word	0x58024800
 80045ec:	fffffc0c 	.word	0xfffffc0c
 80045f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fc fd96 	bl	8001124 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e08a      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x77c>
 8004612:	e082      	b.n	800471a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a42      	ldr	r2, [pc, #264]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 800461a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800461e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fc fd80 	bl	8001124 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fc fd7c 	bl	8001124 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e070      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800463a:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x7b0>
 8004646:	e068      	b.n	800471a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004648:	4b36      	ldr	r3, [pc, #216]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800464e:	4b35      	ldr	r3, [pc, #212]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d031      	beq.n	80046c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f003 0203 	and.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d12a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d122      	bne.n	80046c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d11a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004696:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d111      	bne.n	80046c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d108      	bne.n	80046c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0e1b      	lsrs	r3, r3, #24
 80046b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e02b      	b.n	800471c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046c4:	4b17      	ldr	r3, [pc, #92]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 80046c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d01f      	beq.n	800471a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046da:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046e6:	f7fc fd1d 	bl	8001124 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046ec:	bf00      	nop
 80046ee:	f7fc fd19 	bl	8001124 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d0f9      	beq.n	80046ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 80046fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <HAL_RCC_OscConfig+0x8b0>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004706:	00d2      	lsls	r2, r2, #3
 8004708:	4906      	ldr	r1, [pc, #24]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 800470a:	4313      	orrs	r3, r2
 800470c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <HAL_RCC_OscConfig+0x8ac>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	@ 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	ffff0007 	.word	0xffff0007

0800472c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e19c      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b8a      	ldr	r3, [pc, #552]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d910      	bls.n	8004770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b87      	ldr	r3, [pc, #540]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 020f 	bic.w	r2, r3, #15
 8004756:	4985      	ldr	r1, [pc, #532]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b83      	ldr	r3, [pc, #524]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e184      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	4b7b      	ldr	r3, [pc, #492]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004788:	429a      	cmp	r2, r3
 800478a:	d908      	bls.n	800479e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800478c:	4b78      	ldr	r3, [pc, #480]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	4975      	ldr	r1, [pc, #468]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800479a:	4313      	orrs	r3, r2
 800479c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	4b70      	ldr	r3, [pc, #448]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d908      	bls.n	80047cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	496a      	ldr	r1, [pc, #424]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	4b64      	ldr	r3, [pc, #400]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d908      	bls.n	80047fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047e8:	4b61      	ldr	r3, [pc, #388]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	495e      	ldr	r1, [pc, #376]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	4b59      	ldr	r3, [pc, #356]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004812:	429a      	cmp	r2, r3
 8004814:	d908      	bls.n	8004828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004816:	4b56      	ldr	r3, [pc, #344]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4953      	ldr	r1, [pc, #332]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004824:	4313      	orrs	r3, r2
 8004826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	4b4d      	ldr	r3, [pc, #308]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	429a      	cmp	r2, r3
 8004842:	d908      	bls.n	8004856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f023 020f 	bic.w	r2, r3, #15
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4947      	ldr	r1, [pc, #284]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004852:	4313      	orrs	r3, r2
 8004854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d055      	beq.n	800490e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004862:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4940      	ldr	r1, [pc, #256]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004870:	4313      	orrs	r3, r2
 8004872:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800487c:	4b3c      	ldr	r3, [pc, #240]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d121      	bne.n	80048cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0f6      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004894:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d115      	bne.n	80048cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0ea      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ac:	4b30      	ldr	r3, [pc, #192]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0de      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0d6      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048cc:	4b28      	ldr	r3, [pc, #160]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f023 0207 	bic.w	r2, r3, #7
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4925      	ldr	r1, [pc, #148]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048de:	f7fc fc21 	bl	8001124 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e6:	f7fc fc1d 	bl	8001124 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0be      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	429a      	cmp	r2, r3
 800490c:	d1eb      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d010      	beq.n	800493c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	429a      	cmp	r2, r3
 8004928:	d208      	bcs.n	800493c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492a:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f023 020f 	bic.w	r2, r3, #15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	490e      	ldr	r1, [pc, #56]	@ (8004970 <HAL_RCC_ClockConfig+0x244>)
 8004938:	4313      	orrs	r3, r2
 800493a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d214      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	4906      	ldr	r1, [pc, #24]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b04      	ldr	r3, [pc, #16]	@ (800496c <HAL_RCC_ClockConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e086      	b.n	8004a7a <HAL_RCC_ClockConfig+0x34e>
 800496c:	52002000 	.word	0x52002000
 8004970:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d010      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	4b3f      	ldr	r3, [pc, #252]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498c:	429a      	cmp	r2, r3
 800498e:	d208      	bcs.n	80049a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004990:	4b3c      	ldr	r3, [pc, #240]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4939      	ldr	r1, [pc, #228]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d208      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049be:	4b31      	ldr	r3, [pc, #196]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	492e      	ldr	r1, [pc, #184]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d208      	bcs.n	80049fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	4922      	ldr	r1, [pc, #136]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d208      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4917      	ldr	r1, [pc, #92]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a2c:	f000 f834 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	4912      	ldr	r1, [pc, #72]	@ (8004a88 <HAL_RCC_ClockConfig+0x35c>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a84 <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	4a0d      	ldr	r2, [pc, #52]	@ (8004a88 <HAL_RCC_ClockConfig+0x35c>)
 8004a54:	5cd3      	ldrb	r3, [r2, r3]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	4a0a      	ldr	r2, [pc, #40]	@ (8004a8c <HAL_RCC_ClockConfig+0x360>)
 8004a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a64:	4a0a      	ldr	r2, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x364>)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <HAL_RCC_ClockConfig+0x368>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc fb0e 	bl	8001090 <HAL_InitTick>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
 8004a88:	08007914 	.word	0x08007914
 8004a8c:	24000004 	.word	0x24000004
 8004a90:	24000000 	.word	0x24000000
 8004a94:	24000008 	.word	0x24000008

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	@ 0x24
 8004a9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa6:	2b18      	cmp	r3, #24
 8004aa8:	f200 8155 	bhi.w	8004d56 <HAL_RCC_GetSysClockFreq+0x2be>
 8004aac:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004d57 	.word	0x08004d57
 8004abc:	08004d57 	.word	0x08004d57
 8004ac0:	08004d57 	.word	0x08004d57
 8004ac4:	08004d57 	.word	0x08004d57
 8004ac8:	08004d57 	.word	0x08004d57
 8004acc:	08004d57 	.word	0x08004d57
 8004ad0:	08004d57 	.word	0x08004d57
 8004ad4:	08004b3f 	.word	0x08004b3f
 8004ad8:	08004d57 	.word	0x08004d57
 8004adc:	08004d57 	.word	0x08004d57
 8004ae0:	08004d57 	.word	0x08004d57
 8004ae4:	08004d57 	.word	0x08004d57
 8004ae8:	08004d57 	.word	0x08004d57
 8004aec:	08004d57 	.word	0x08004d57
 8004af0:	08004d57 	.word	0x08004d57
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004d57 	.word	0x08004d57
 8004afc:	08004d57 	.word	0x08004d57
 8004b00:	08004d57 	.word	0x08004d57
 8004b04:	08004d57 	.word	0x08004d57
 8004b08:	08004d57 	.word	0x08004d57
 8004b0c:	08004d57 	.word	0x08004d57
 8004b10:	08004d57 	.word	0x08004d57
 8004b14:	08004b4b 	.word	0x08004b4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b94      	ldr	r3, [pc, #592]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b24:	4b91      	ldr	r3, [pc, #580]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	4a90      	ldr	r2, [pc, #576]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b36:	e111      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b38:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b3a:	61bb      	str	r3, [r7, #24]
      break;
 8004b3c:	e10e      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b40:	61bb      	str	r3, [r7, #24]
      break;
 8004b42:	e10b      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b44:	4b8c      	ldr	r3, [pc, #560]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b46:	61bb      	str	r3, [r7, #24]
      break;
 8004b48:	e108      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b4a:	4b88      	ldr	r3, [pc, #544]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b54:	4b85      	ldr	r3, [pc, #532]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b60:	4b82      	ldr	r3, [pc, #520]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b6a:	4b80      	ldr	r3, [pc, #512]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80e1 	beq.w	8004d50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f000 8083 	beq.w	8004c9c <HAL_RCC_GetSysClockFreq+0x204>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f200 80a1 	bhi.w	8004ce0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x114>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d056      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004baa:	e099      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bac:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02d      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	ee07 3a90 	vmov	s15, r3
 8004bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b62      	ldr	r3, [pc, #392]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c12:	e087      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c26:	4b51      	ldr	r3, [pc, #324]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2e:	ee07 3a90 	vmov	s15, r3
 8004c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c56:	e065      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6a:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c9a:	e043      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cae:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cde:	e021      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d24:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d28:	0a5b      	lsrs	r3, r3, #9
 8004d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2e:	3301      	adds	r3, #1
 8004d30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d48:	ee17 3a90 	vmov	r3, s15
 8004d4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d4e:	e005      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
      break;
 8004d54:	e002      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d56:	4b07      	ldr	r3, [pc, #28]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d58:	61bb      	str	r3, [r7, #24]
      break;
 8004d5a:	bf00      	nop
  }

  return sysclockfreq;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3724      	adds	r7, #36	@ 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	03d09000 	.word	0x03d09000
 8004d74:	003d0900 	.word	0x003d0900
 8004d78:	007a1200 	.word	0x007a1200
 8004d7c:	46000000 	.word	0x46000000
 8004d80:	4c742400 	.word	0x4c742400
 8004d84:	4a742400 	.word	0x4a742400
 8004d88:	4af42400 	.word	0x4af42400

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d90:	b0ca      	sub	sp, #296	@ 0x128
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004db0:	2500      	movs	r5, #0
 8004db2:	ea54 0305 	orrs.w	r3, r4, r5
 8004db6:	d049      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dc2:	d02f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004dc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dc8:	d828      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dce:	d01a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dd4:	d822      	bhi.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dde:	d007      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004de0:	e01c      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de2:	4bb8      	ldr	r3, [pc, #736]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	4ab7      	ldr	r2, [pc, #732]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dee:	e01a      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	3308      	adds	r3, #8
 8004df6:	2102      	movs	r1, #2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 f9d1 	bl	80061a0 <RCCEx_PLL2_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e04:	e00f      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0a:	3328      	adds	r3, #40	@ 0x28
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fa78 	bl	8006304 <RCCEx_PLL3_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e2e:	4ba5      	ldr	r3, [pc, #660]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e3c:	4aa1      	ldr	r2, [pc, #644]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	ea58 0309 	orrs.w	r3, r8, r9
 8004e60:	d047      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d82a      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004ead 	.word	0x08004ead
 8004e80:	08004ecb 	.word	0x08004ecb
 8004e84:	08004ecb 	.word	0x08004ecb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4b8e      	ldr	r3, [pc, #568]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	4a8d      	ldr	r2, [pc, #564]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e94:	e01a      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 f97e 	bl	80061a0 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eaa:	e00f      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb0:	3328      	adds	r3, #40	@ 0x28
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fa25 	bl	8006304 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e004      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed8:	f023 0107 	bic.w	r1, r3, #7
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee2:	4a78      	ldr	r2, [pc, #480]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ee8:	e003      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004efe:	f04f 0b00 	mov.w	fp, #0
 8004f02:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f06:	d04c      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f12:	d030      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f18:	d829      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f1c:	d02d      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f20:	d825      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f22:	2b80      	cmp	r3, #128	@ 0x80
 8004f24:	d018      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f26:	2b80      	cmp	r3, #128	@ 0x80
 8004f28:	d821      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d007      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f32:	e01c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f34:	4b63      	ldr	r3, [pc, #396]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	4a62      	ldr	r2, [pc, #392]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f40:	e01c      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f46:	3308      	adds	r3, #8
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 f928 	bl	80061a0 <RCCEx_PLL2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f56:	e011      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	3328      	adds	r3, #40	@ 0x28
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 f9cf 	bl	8006304 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f6c:	e006      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f84:	4b4f      	ldr	r3, [pc, #316]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f92:	4a4c      	ldr	r2, [pc, #304]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004fae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004fb8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d053      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fce:	d035      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004fd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fd4:	d82e      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fda:	d031      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004fdc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004fe0:	d828      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe6:	d01a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fec:	d822      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ff6:	d007      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ff8:	e01c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffa:	4b32      	ldr	r3, [pc, #200]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	4a31      	ldr	r2, [pc, #196]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005006:	e01c      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500c:	3308      	adds	r3, #8
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 f8c5 	bl	80061a0 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800501c:	e011      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800501e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005022:	3328      	adds	r3, #40	@ 0x28
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f96c 	bl	8006304 <RCCEx_PLL3_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800504a:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800505a:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800505c:	430b      	orrs	r3, r1
 800505e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005060:	e003      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005076:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005080:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005084:	460b      	mov	r3, r1
 8005086:	4313      	orrs	r3, r2
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005092:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005096:	d038      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800509c:	d831      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800509e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a2:	d034      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80050a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a8:	d82b      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ae:	d01d      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80050b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050b4:	d825      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d006      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80050ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80050c0:	e01f      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d4:	e01c      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	3308      	adds	r3, #8
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 f85e 	bl	80061a0 <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050ea:	e011      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	3328      	adds	r3, #40	@ 0x28
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 f905 	bl	8006304 <RCCEx_PLL3_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005100:	e006      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800510a:	bf00      	nop
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800510e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005118:	4b8e      	ldr	r3, [pc, #568]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005128:	4a8a      	ldr	r2, [pc, #552]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800512a:	430b      	orrs	r3, r1
 800512c:	6593      	str	r3, [r2, #88]	@ 0x58
 800512e:	e003      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005148:	2300      	movs	r3, #0
 800514a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800514e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005152:	460b      	mov	r3, r1
 8005154:	4313      	orrs	r3, r2
 8005156:	d03a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515e:	2b30      	cmp	r3, #48	@ 0x30
 8005160:	d01f      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005162:	2b30      	cmp	r3, #48	@ 0x30
 8005164:	d819      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005166:	2b20      	cmp	r3, #32
 8005168:	d00c      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800516a:	2b20      	cmp	r3, #32
 800516c:	d815      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005172:	2b10      	cmp	r3, #16
 8005174:	d111      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005176:	4b77      	ldr	r3, [pc, #476]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	4a76      	ldr	r2, [pc, #472]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800517c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005182:	e011      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	3308      	adds	r3, #8
 800518a:	2102      	movs	r1, #2
 800518c:	4618      	mov	r0, r3
 800518e:	f001 f807 	bl	80061a0 <RCCEx_PLL2_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051b0:	4b68      	ldr	r3, [pc, #416]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	4a65      	ldr	r2, [pc, #404]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80051da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4313      	orrs	r3, r2
 80051ec:	d051      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f8:	d035      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051fe:	d82e      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005204:	d031      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005206:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800520a:	d828      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005210:	d01a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005216:	d822      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005220:	d007      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005222:	e01c      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005224:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	4a4a      	ldr	r2, [pc, #296]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800522a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005230:	e01c      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	3308      	adds	r3, #8
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ffb0 	bl	80061a0 <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005246:	e011      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	3328      	adds	r3, #40	@ 0x28
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f001 f857 	bl	8006304 <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005264:	e002      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800526a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005274:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800527c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	4a34      	ldr	r2, [pc, #208]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6513      	str	r3, [r2, #80]	@ 0x50
 8005288:	e003      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800529e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80052a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d056      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052bc:	d033      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80052be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c2:	d82c      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052c8:	d02f      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80052ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ce:	d826      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052d4:	d02b      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80052d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052da:	d820      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052e0:	d012      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80052e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052e6:	d81a      	bhi.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d022      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d115      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	3308      	adds	r3, #8
 80052f8:	2101      	movs	r1, #1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ff50 	bl	80061a0 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005306:	e015      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	3328      	adds	r3, #40	@ 0x28
 800530e:	2101      	movs	r1, #1
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fff7 	bl	8006304 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800531c:	e00a      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005324:	e006      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005326:	bf00      	nop
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800533e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005340:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800534a:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005370:	2300      	movs	r3, #0
 8005372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005376:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d055      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800538c:	d033      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800538e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005392:	d82c      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d02f      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539e:	d826      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053a4:	d02b      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80053a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053aa:	d820      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b0:	d012      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80053b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b6:	d81a      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d022      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80053bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c0:	d115      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c6:	3308      	adds	r3, #8
 80053c8:	2101      	movs	r1, #1
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fee8 	bl	80061a0 <RCCEx_PLL2_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053d6:	e015      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053dc:	3328      	adds	r3, #40	@ 0x28
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 ff8f 	bl	8006304 <RCCEx_PLL3_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053ec:	e00a      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800540c:	4ba3      	ldr	r3, [pc, #652]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800540e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005410:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800541c:	4a9f      	ldr	r2, [pc, #636]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6593      	str	r3, [r2, #88]	@ 0x58
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d037      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005456:	d00e      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800545c:	d816      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005466:	d111      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005468:	4b8c      	ldr	r3, [pc, #560]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	4a8b      	ldr	r2, [pc, #556]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800546e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005474:	e00f      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	3308      	adds	r3, #8
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fe8e 	bl	80061a0 <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800549e:	4b7f      	ldr	r3, [pc, #508]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ac:	4a7b      	ldr	r2, [pc, #492]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80054b2:	e003      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d039      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d81c      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005529 	.word	0x08005529
 80054f0:	080054fd 	.word	0x080054fd
 80054f4:	0800550b 	.word	0x0800550b
 80054f8:	08005529 	.word	0x08005529
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fc:	4b67      	ldr	r3, [pc, #412]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	4a66      	ldr	r2, [pc, #408]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005508:	e00f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	3308      	adds	r3, #8
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fe44 	bl	80061a0 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800551e:	e004      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005532:	4b5a      	ldr	r3, [pc, #360]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	f023 0103 	bic.w	r1, r3, #3
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005540:	4a56      	ldr	r2, [pc, #344]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005542:	430b      	orrs	r3, r1
 8005544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005546:	e003      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800555c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005566:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	f000 809f 	beq.w	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005572:	4b4b      	ldr	r3, [pc, #300]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a4a      	ldr	r2, [pc, #296]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800557e:	f7fb fdd1 	bl	8001124 <HAL_GetTick>
 8005582:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005586:	e00b      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005588:	f7fb fdcc 	bl	8001124 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	@ 0x64
 8005596:	d903      	bls.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800559e:	e005      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a0:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ed      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80055ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d179      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055b4:	4b39      	ldr	r3, [pc, #228]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c0:	4053      	eors	r3, r2
 80055c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ca:	4b34      	ldr	r3, [pc, #208]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d6:	4b31      	ldr	r3, [pc, #196]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	4a30      	ldr	r2, [pc, #192]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e2:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	4a2d      	ldr	r2, [pc, #180]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055ee:	4a2b      	ldr	r2, [pc, #172]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005602:	d118      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fb fd8e 	bl	8001124 <HAL_GetTick>
 8005608:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800560c:	e00d      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560e:	f7fb fd89 	bl	8001124 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800561e:	429a      	cmp	r2, r3
 8005620:	d903      	bls.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005628:	e005      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800562a:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0eb      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800563a:	2b00      	cmp	r3, #0
 800563c:	d129      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800564e:	d10e      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005650:	4b12      	ldr	r3, [pc, #72]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005660:	091a      	lsrs	r2, r3, #4
 8005662:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005664:	4013      	ands	r3, r2
 8005666:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005668:	430b      	orrs	r3, r1
 800566a:	6113      	str	r3, [r2, #16]
 800566c:	e005      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800566e:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005674:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005678:	6113      	str	r3, [r2, #16]
 800567a:	4b08      	ldr	r3, [pc, #32]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800567c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568a:	4a04      	ldr	r2, [pc, #16]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800568c:	430b      	orrs	r3, r1
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005690:	e00e      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800569a:	e009      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800569c:	58024400 	.word	0x58024400
 80056a0:	58024800 	.word	0x58024800
 80056a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f002 0301 	and.w	r3, r2, #1
 80056bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f000 8089 	beq.w	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056d8:	2b28      	cmp	r3, #40	@ 0x28
 80056da:	d86b      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	080057bd 	.word	0x080057bd
 80056e8:	080057b5 	.word	0x080057b5
 80056ec:	080057b5 	.word	0x080057b5
 80056f0:	080057b5 	.word	0x080057b5
 80056f4:	080057b5 	.word	0x080057b5
 80056f8:	080057b5 	.word	0x080057b5
 80056fc:	080057b5 	.word	0x080057b5
 8005700:	080057b5 	.word	0x080057b5
 8005704:	08005789 	.word	0x08005789
 8005708:	080057b5 	.word	0x080057b5
 800570c:	080057b5 	.word	0x080057b5
 8005710:	080057b5 	.word	0x080057b5
 8005714:	080057b5 	.word	0x080057b5
 8005718:	080057b5 	.word	0x080057b5
 800571c:	080057b5 	.word	0x080057b5
 8005720:	080057b5 	.word	0x080057b5
 8005724:	0800579f 	.word	0x0800579f
 8005728:	080057b5 	.word	0x080057b5
 800572c:	080057b5 	.word	0x080057b5
 8005730:	080057b5 	.word	0x080057b5
 8005734:	080057b5 	.word	0x080057b5
 8005738:	080057b5 	.word	0x080057b5
 800573c:	080057b5 	.word	0x080057b5
 8005740:	080057b5 	.word	0x080057b5
 8005744:	080057bd 	.word	0x080057bd
 8005748:	080057b5 	.word	0x080057b5
 800574c:	080057b5 	.word	0x080057b5
 8005750:	080057b5 	.word	0x080057b5
 8005754:	080057b5 	.word	0x080057b5
 8005758:	080057b5 	.word	0x080057b5
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057b5 	.word	0x080057b5
 8005764:	080057bd 	.word	0x080057bd
 8005768:	080057b5 	.word	0x080057b5
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057b5 	.word	0x080057b5
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057b5 	.word	0x080057b5
 800577c:	080057b5 	.word	0x080057b5
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080057bd 	.word	0x080057bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	3308      	adds	r3, #8
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fd05 	bl	80061a0 <RCCEx_PLL2_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800579c:	e00f      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	3328      	adds	r3, #40	@ 0x28
 80057a4:	2101      	movs	r1, #1
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fdac 	bl	8006304 <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057b2:	e004      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80057bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057c6:	4bbf      	ldr	r3, [pc, #764]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057d4:	4abb      	ldr	r2, [pc, #748]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057d6:	430b      	orrs	r3, r1
 80057d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f002 0302 	and.w	r3, r2, #2
 80057f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057fe:	460b      	mov	r3, r1
 8005800:	4313      	orrs	r3, r2
 8005802:	d041      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800580a:	2b05      	cmp	r3, #5
 800580c:	d824      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800580e:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005861 	.word	0x08005861
 8005818:	0800582d 	.word	0x0800582d
 800581c:	08005843 	.word	0x08005843
 8005820:	08005861 	.word	0x08005861
 8005824:	08005861 	.word	0x08005861
 8005828:	08005861 	.word	0x08005861
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005830:	3308      	adds	r3, #8
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fcb3 	bl	80061a0 <RCCEx_PLL2_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005840:	e00f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	3328      	adds	r3, #40	@ 0x28
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fd5a 	bl	8006304 <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800586a:	4b96      	ldr	r3, [pc, #600]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f023 0107 	bic.w	r1, r3, #7
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005878:	4a92      	ldr	r2, [pc, #584]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6553      	str	r3, [r2, #84]	@ 0x54
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f002 0304 	and.w	r3, r2, #4
 8005894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800589e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d044      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d825      	bhi.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80058b4:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	08005909 	.word	0x08005909
 80058c0:	080058d5 	.word	0x080058d5
 80058c4:	080058eb 	.word	0x080058eb
 80058c8:	08005909 	.word	0x08005909
 80058cc:	08005909 	.word	0x08005909
 80058d0:	08005909 	.word	0x08005909
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	3308      	adds	r3, #8
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fc5f 	bl	80061a0 <RCCEx_PLL2_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058e8:	e00f      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	3328      	adds	r3, #40	@ 0x28
 80058f0:	2101      	movs	r1, #1
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fd06 	bl	8006304 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058fe:	e004      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005912:	4b6c      	ldr	r3, [pc, #432]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	f023 0107 	bic.w	r1, r3, #7
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005922:	4a68      	ldr	r2, [pc, #416]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005924:	430b      	orrs	r3, r1
 8005926:	6593      	str	r3, [r2, #88]	@ 0x58
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f002 0320 	and.w	r3, r2, #32
 800593e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d055      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800595e:	d033      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005964:	d82c      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596a:	d02f      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005970:	d826      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005976:	d02b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005978:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800597c:	d820      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800597e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005988:	d81a      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d022      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800598e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005992:	d115      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	3308      	adds	r3, #8
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fbff 	bl	80061a0 <RCCEx_PLL2_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059a8:	e015      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	3328      	adds	r3, #40	@ 0x28
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fca6 	bl	8006304 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059be:	e00a      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059c6:	e006      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059c8:	bf00      	nop
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059cc:	bf00      	nop
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059de:	4b39      	ldr	r3, [pc, #228]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ee:	4a35      	ldr	r2, [pc, #212]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d058      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a2a:	d033      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005a30:	d82c      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a36:	d02f      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3c:	d826      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a42:	d02b      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a48:	d820      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a4e:	d012      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a54:	d81a      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d022      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d115      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a64:	3308      	adds	r3, #8
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb99 	bl	80061a0 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a74:	e015      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7a:	3328      	adds	r3, #40	@ 0x28
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fc40 	bl	8006304 <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a92:	e006      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a94:	bf00      	nop
 8005a96:	e004      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a98:	bf00      	nop
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aba:	4a02      	ldr	r2, [pc, #8]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac0:	e006      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005ac2:	bf00      	nop
 8005ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ae6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d055      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005af8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005afc:	d033      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005afe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b02:	d82c      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b08:	d02f      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0e:	d826      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b10:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b14:	d02b      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005b16:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b1a:	d820      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b20:	d012      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b26:	d81a      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d022      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b30:	d115      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	3308      	adds	r3, #8
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fb30 	bl	80061a0 <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b46:	e015      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	3328      	adds	r3, #40	@ 0x28
 8005b4e:	2102      	movs	r1, #2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fbd7 	bl	8006304 <RCCEx_PLL3_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b64:	e006      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b80:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b8c:	4a9d      	ldr	r2, [pc, #628]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f002 0308 	and.w	r3, r2, #8
 8005ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d01e      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3328      	adds	r3, #40	@ 0x28
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb96 	bl	8006304 <RCCEx_PLL3_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005be4:	4b87      	ldr	r3, [pc, #540]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf4:	4a83      	ldr	r2, [pc, #524]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f002 0310 	and.w	r3, r2, #16
 8005c06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c14:	460b      	mov	r3, r1
 8005c16:	4313      	orrs	r3, r2
 8005c18:	d01e      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2c:	3328      	adds	r3, #40	@ 0x28
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb67 	bl	8006304 <RCCEx_PLL3_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c42:	4b70      	ldr	r3, [pc, #448]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c52:	4a6c      	ldr	r2, [pc, #432]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d03e      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c84:	d022      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c8a:	d81b      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c94:	d00b      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c96:	e015      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fa7d 	bl	80061a0 <RCCEx_PLL2_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cac:	e00f      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	3328      	adds	r3, #40	@ 0x28
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fb24 	bl	8006304 <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cc2:	e004      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ce6:	4a47      	ldr	r2, [pc, #284]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d04:	2300      	movs	r3, #0
 8005d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d1e:	d01f      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005d20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d24:	d818      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005d2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d30:	d007      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d32:	e011      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4b33      	ldr	r3, [pc, #204]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4a32      	ldr	r2, [pc, #200]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d40:	e00f      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	3328      	adds	r3, #40	@ 0x28
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fada 	bl	8006304 <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6a:	4b26      	ldr	r3, [pc, #152]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	4a22      	ldr	r2, [pc, #136]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d98:	2300      	movs	r3, #0
 8005d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005da0:	460b      	mov	r3, r1
 8005da2:	4313      	orrs	r3, r2
 8005da4:	d034      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db4:	d007      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005db6:	e011      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4a11      	ldr	r2, [pc, #68]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dc4:	e00e      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3308      	adds	r3, #8
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f9e6 	bl	80061a0 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	4a02      	ldr	r2, [pc, #8]	@ (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e02:	bf00      	nop
 8005e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e1e:	2300      	movs	r3, #0
 8005e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d00c      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	3328      	adds	r3, #40	@ 0x28
 8005e32:	2102      	movs	r1, #2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fa65 	bl	8006304 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005e52:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e54:	2300      	movs	r3, #0
 8005e56:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d038      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e6e:	d018      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e74:	d811      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7a:	d014      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d80b      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d011      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8c:	4bc3      	ldr	r3, [pc, #780]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	4ac2      	ldr	r2, [pc, #776]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e98:	e008      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea0:	e004      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb4:	4bb9      	ldr	r3, [pc, #740]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec4:	4ab5      	ldr	r2, [pc, #724]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eca:	e003      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005eea:	460b      	mov	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ef0:	4baa      	ldr	r3, [pc, #680]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efe:	4aa7      	ldr	r2, [pc, #668]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005f10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f12:	2300      	movs	r3, #0
 8005f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f20:	4b9e      	ldr	r3, [pc, #632]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f30:	4a9a      	ldr	r2, [pc, #616]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f44:	2300      	movs	r3, #0
 8005f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f52:	4b92      	ldr	r3, [pc, #584]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f60:	4a8e      	ldr	r2, [pc, #568]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f74:	2300      	movs	r3, #0
 8005f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f82:	4b86      	ldr	r3, [pc, #536]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4a85      	ldr	r2, [pc, #532]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f8c:	6113      	str	r3, [r2, #16]
 8005f8e:	4b83      	ldr	r3, [pc, #524]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f90:	6919      	ldr	r1, [r3, #16]
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f9a:	4a80      	ldr	r2, [pc, #512]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fbc:	4b77      	ldr	r3, [pc, #476]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	4a74      	ldr	r2, [pc, #464]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fec:	4b6b      	ldr	r3, [pc, #428]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ffc:	4a67      	ldr	r2, [pc, #412]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	2100      	movs	r1, #0
 800600c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006014:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d011      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	3308      	adds	r3, #8
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f8ba 	bl	80061a0 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	2100      	movs	r1, #0
 800604c:	6239      	str	r1, [r7, #32]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	d011      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	3308      	adds	r3, #8
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f89a 	bl	80061a0 <RCCEx_PLL2_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	2100      	movs	r1, #0
 800608c:	61b9      	str	r1, [r7, #24]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d011      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a2:	3308      	adds	r3, #8
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f87a 	bl	80061a0 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	2100      	movs	r1, #0
 80060cc:	6139      	str	r1, [r7, #16]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d011      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	3328      	adds	r3, #40	@ 0x28
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f90c 	bl	8006304 <RCCEx_PLL3_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80060f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	2100      	movs	r1, #0
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006118:	460b      	mov	r3, r1
 800611a:	4313      	orrs	r3, r2
 800611c:	d011      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	3328      	adds	r3, #40	@ 0x28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f8ec 	bl	8006304 <RCCEx_PLL3_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	2100      	movs	r1, #0
 800614c:	6039      	str	r1, [r7, #0]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d011      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f8cc 	bl	8006304 <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006182:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
}
 8006190:	4618      	mov	r0, r3
 8006192:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619c:	58024400 	.word	0x58024400

080061a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061ae:	4b53      	ldr	r3, [pc, #332]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d101      	bne.n	80061be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e099      	b.n	80062f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061be:	4b4f      	ldr	r3, [pc, #316]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a4e      	ldr	r2, [pc, #312]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80061c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ca:	f7fa ffab 	bl	8001124 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061d0:	e008      	b.n	80061e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061d2:	f7fa ffa7 	bl	8001124 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e086      	b.n	80062f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061e4:	4b45      	ldr	r3, [pc, #276]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061f0:	4b42      	ldr	r3, [pc, #264]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	493f      	ldr	r1, [pc, #252]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006200:	4313      	orrs	r3, r2
 8006202:	628b      	str	r3, [r1, #40]	@ 0x28
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	3b01      	subs	r3, #1
 800620a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	3b01      	subs	r3, #1
 8006214:	025b      	lsls	r3, r3, #9
 8006216:	b29b      	uxth	r3, r3
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	3b01      	subs	r3, #1
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006234:	4931      	ldr	r1, [pc, #196]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800623a:	4b30      	ldr	r3, [pc, #192]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	492d      	ldr	r1, [pc, #180]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800624c:	4b2b      	ldr	r3, [pc, #172]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	f023 0220 	bic.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	4928      	ldr	r1, [pc, #160]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800625e:	4b27      	ldr	r3, [pc, #156]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	4a26      	ldr	r2, [pc, #152]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006264:	f023 0310 	bic.w	r3, r3, #16
 8006268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800626a:	4b24      	ldr	r3, [pc, #144]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 800626c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800626e:	4b24      	ldr	r3, [pc, #144]	@ (8006300 <RCCEx_PLL2_Config+0x160>)
 8006270:	4013      	ands	r3, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	69d2      	ldr	r2, [r2, #28]
 8006276:	00d2      	lsls	r2, r2, #3
 8006278:	4920      	ldr	r1, [pc, #128]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800627e:	4b1f      	ldr	r3, [pc, #124]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	4a1e      	ldr	r2, [pc, #120]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006284:	f043 0310 	orr.w	r3, r3, #16
 8006288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d106      	bne.n	800629e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006290:	4b1a      	ldr	r3, [pc, #104]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	4a19      	ldr	r2, [pc, #100]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 8006296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800629a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800629c:	e00f      	b.n	80062be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d106      	bne.n	80062b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062a4:	4b15      	ldr	r3, [pc, #84]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062b0:	e005      	b.n	80062be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	4a11      	ldr	r2, [pc, #68]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062be:	4b0f      	ldr	r3, [pc, #60]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a0e      	ldr	r2, [pc, #56]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fa ff2b 	bl	8001124 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062d2:	f7fa ff27 	bl	8001124 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e006      	b.n	80062f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062e4:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <RCCEx_PLL2_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400
 8006300:	ffff0007 	.word	0xffff0007

08006304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006312:	4b53      	ldr	r3, [pc, #332]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d101      	bne.n	8006322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e099      	b.n	8006456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006322:	4b4f      	ldr	r3, [pc, #316]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a4e      	ldr	r2, [pc, #312]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800632c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632e:	f7fa fef9 	bl	8001124 <HAL_GetTick>
 8006332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006334:	e008      	b.n	8006348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006336:	f7fa fef5 	bl	8001124 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e086      	b.n	8006456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006348:	4b45      	ldr	r3, [pc, #276]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1f0      	bne.n	8006336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006354:	4b42      	ldr	r3, [pc, #264]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	051b      	lsls	r3, r3, #20
 8006362:	493f      	ldr	r1, [pc, #252]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	628b      	str	r3, [r1, #40]	@ 0x28
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	3b01      	subs	r3, #1
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	b29b      	uxth	r3, r3
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	3b01      	subs	r3, #1
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	3b01      	subs	r3, #1
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006398:	4931      	ldr	r1, [pc, #196]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800639a:	4313      	orrs	r3, r2
 800639c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800639e:	4b30      	ldr	r3, [pc, #192]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	492d      	ldr	r1, [pc, #180]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4928      	ldr	r1, [pc, #160]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063c2:	4b27      	ldr	r3, [pc, #156]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c6:	4a26      	ldr	r2, [pc, #152]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ce:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d2:	4b24      	ldr	r3, [pc, #144]	@ (8006464 <RCCEx_PLL3_Config+0x160>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	69d2      	ldr	r2, [r2, #28]
 80063da:	00d2      	lsls	r2, r2, #3
 80063dc:	4920      	ldr	r1, [pc, #128]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006400:	e00f      	b.n	8006422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d106      	bne.n	8006416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006408:	4b15      	ldr	r3, [pc, #84]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	4a14      	ldr	r2, [pc, #80]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800640e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006414:	e005      	b.n	8006422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006416:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641a:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800641c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006422:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a0e      	ldr	r2, [pc, #56]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642e:	f7fa fe79 	bl	8001124 <HAL_GetTick>
 8006432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006434:	e008      	b.n	8006448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006436:	f7fa fe75 	bl	8001124 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e006      	b.n	8006456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <RCCEx_PLL3_Config+0x15c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	58024400 	.word	0x58024400
 8006464:	ffff0007 	.word	0xffff0007

08006468 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e10f      	b.n	800669a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a87      	ldr	r2, [pc, #540]	@ (80066a4 <HAL_SPI_Init+0x23c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <HAL_SPI_Init+0x42>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a86      	ldr	r2, [pc, #536]	@ (80066a8 <HAL_SPI_Init+0x240>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00a      	beq.n	80064aa <HAL_SPI_Init+0x42>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a84      	ldr	r2, [pc, #528]	@ (80066ac <HAL_SPI_Init+0x244>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d005      	beq.n	80064aa <HAL_SPI_Init+0x42>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b0f      	cmp	r3, #15
 80064a4:	d901      	bls.n	80064aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0f7      	b.n	800669a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f9de 	bl	800786c <SPI_GetPacketSize>
 80064b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a7b      	ldr	r2, [pc, #492]	@ (80066a4 <HAL_SPI_Init+0x23c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00c      	beq.n	80064d6 <HAL_SPI_Init+0x6e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a79      	ldr	r2, [pc, #484]	@ (80066a8 <HAL_SPI_Init+0x240>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d007      	beq.n	80064d6 <HAL_SPI_Init+0x6e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a78      	ldr	r2, [pc, #480]	@ (80066ac <HAL_SPI_Init+0x244>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Init+0x6e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d811      	bhi.n	80064fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064da:	4a72      	ldr	r2, [pc, #456]	@ (80066a4 <HAL_SPI_Init+0x23c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a70      	ldr	r2, [pc, #448]	@ (80066a8 <HAL_SPI_Init+0x240>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_SPI_Init+0x8c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a6f      	ldr	r2, [pc, #444]	@ (80066ac <HAL_SPI_Init+0x244>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d104      	bne.n	80064fe <HAL_SPI_Init+0x96>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d901      	bls.n	80064fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e0cd      	b.n	800669a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fa fb6c 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800653a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006544:	d119      	bne.n	800657a <HAL_SPI_Init+0x112>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800654e:	d103      	bne.n	8006558 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10c      	bne.n	800657a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006568:	d107      	bne.n	800657a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006578:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00f      	beq.n	80065a6 <HAL_SPI_Init+0x13e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b06      	cmp	r3, #6
 800658c:	d90b      	bls.n	80065a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e007      	b.n	80065b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065be:	431a      	orrs	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	ea42 0103 	orr.w	r1, r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	ea42 0103 	orr.w	r1, r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d113      	bne.n	8006656 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006640:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006654:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0201 	bic.w	r2, r2, #1
 8006664:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40013000 	.word	0x40013000
 80066a8:	40003800 	.word	0x40003800
 80066ac:	40003c00 	.word	0x40003c00

080066b0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3320      	adds	r3, #32
 80066c6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c8:	f7fa fd2c 	bl	8001124 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
 80066dc:	e1d1      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_SPI_Transmit+0x3a>
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e1c9      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_SPI_Transmit+0x4c>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e1c2      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2203      	movs	r2, #3
 8006708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006754:	d108      	bne.n	8006768 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e009      	b.n	800677c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800677a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	4b96      	ldr	r3, [pc, #600]	@ (80069dc <HAL_SPI_Transmit+0x32c>)
 8006784:	4013      	ands	r3, r2
 8006786:	88f9      	ldrh	r1, [r7, #6]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a8:	d107      	bne.n	80067ba <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d947      	bls.n	8006852 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067c2:	e03f      	b.n	8006844 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d114      	bne.n	80067fc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067fa:	e023      	b.n	8006844 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067fc:	f7fa fc92 	bl	8001124 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d803      	bhi.n	8006814 <HAL_SPI_Transmit+0x164>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d102      	bne.n	800681a <HAL_SPI_Transmit+0x16a>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d114      	bne.n	8006844 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 ff58 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006826:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e11e      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1b9      	bne.n	80067c4 <HAL_SPI_Transmit+0x114>
 8006850:	e0f1      	b.n	8006a36 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b07      	cmp	r3, #7
 8006858:	f240 80e6 	bls.w	8006a28 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800685c:	e05d      	b.n	800691a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d132      	bne.n	80068d2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d918      	bls.n	80068aa <HAL_SPI_Transmit+0x1fa>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b02      	subs	r3, #2
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068a8:	e037      	b.n	800691a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ae:	881a      	ldrh	r2, [r3, #0]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b8:	1c9a      	adds	r2, r3, #2
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068d0:	e023      	b.n	800691a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d2:	f7fa fc27 	bl	8001124 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d803      	bhi.n	80068ea <HAL_SPI_Transmit+0x23a>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d102      	bne.n	80068f0 <HAL_SPI_Transmit+0x240>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d114      	bne.n	800691a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 feed 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e0b3      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d19b      	bne.n	800685e <HAL_SPI_Transmit+0x1ae>
 8006926:	e086      	b.n	8006a36 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d154      	bne.n	80069e0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b03      	cmp	r3, #3
 8006940:	d918      	bls.n	8006974 <HAL_SPI_Transmit+0x2c4>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006946:	2b40      	cmp	r3, #64	@ 0x40
 8006948:	d914      	bls.n	8006974 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b04      	subs	r3, #4
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006972:	e059      	b.n	8006a28 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d917      	bls.n	80069b0 <HAL_SPI_Transmit+0x300>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698c:	881a      	ldrh	r2, [r3, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006996:	1c9a      	adds	r2, r3, #2
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b02      	subs	r3, #2
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069ae:	e03b      	b.n	8006a28 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3320      	adds	r3, #32
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80069da:	e025      	b.n	8006a28 <HAL_SPI_Transmit+0x378>
 80069dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e0:	f7fa fba0 	bl	8001124 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d803      	bhi.n	80069f8 <HAL_SPI_Transmit+0x348>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d102      	bne.n	80069fe <HAL_SPI_Transmit+0x34e>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d114      	bne.n	8006a28 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fe66 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e02c      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f af79 	bne.w	8006928 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2108      	movs	r1, #8
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fee5 	bl	8007810 <SPI_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a52:	f043 0220 	orr.w	r2, r3, #32
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fe37 	bl	80076d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop

08006a8c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3330      	adds	r3, #48	@ 0x30
 8006aae:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab0:	f7fa fb38 	bl	8001124 <HAL_GetTick>
 8006ab4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d001      	beq.n	8006ac6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e250      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Receive+0x46>
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e248      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_SPI_Receive+0x58>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e241      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2204      	movs	r2, #4
 8006af0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b3c:	d108      	bne.n	8006b50 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e009      	b.n	8006b64 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	4b95      	ldr	r3, [pc, #596]	@ (8006dc0 <HAL_SPI_Receive+0x334>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	88f9      	ldrh	r1, [r7, #6]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b90:	d107      	bne.n	8006ba2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d96c      	bls.n	8006c84 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006baa:	e064      	b.n	8006c76 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d114      	bne.n	8006bec <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bcc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bea:	e044      	b.n	8006c76 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	8bfa      	ldrh	r2, [r7, #30]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d919      	bls.n	8006c2e <HAL_SPI_Receive+0x1a2>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d014      	beq.n	8006c2e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c0e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c14:	1d1a      	adds	r2, r3, #4
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c2c:	e023      	b.n	8006c76 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c2e:	f7fa fa79 	bl	8001124 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d803      	bhi.n	8006c46 <HAL_SPI_Receive+0x1ba>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d102      	bne.n	8006c4c <HAL_SPI_Receive+0x1c0>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d114      	bne.n	8006c76 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fd3f 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e178      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d194      	bne.n	8006bac <HAL_SPI_Receive+0x120>
 8006c82:	e15e      	b.n	8006f42 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b07      	cmp	r3, #7
 8006c8a:	f240 8153 	bls.w	8006f34 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006c8e:	e08f      	b.n	8006db0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d114      	bne.n	8006cd0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	8812      	ldrh	r2, [r2, #0]
 8006cae:	b292      	uxth	r2, r2
 8006cb0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cce:	e06f      	b.n	8006db0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8bfa      	ldrh	r2, [r7, #30]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d924      	bls.n	8006d28 <HAL_SPI_Receive+0x29c>
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01f      	beq.n	8006d28 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	8812      	ldrh	r2, [r2, #0]
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	8812      	ldrh	r2, [r2, #0]
 8006d06:	b292      	uxth	r2, r2
 8006d08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b02      	subs	r3, #2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d26:	e043      	b.n	8006db0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d119      	bne.n	8006d68 <HAL_SPI_Receive+0x2dc>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d014      	beq.n	8006d68 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	8812      	ldrh	r2, [r2, #0]
 8006d46:	b292      	uxth	r2, r2
 8006d48:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d66:	e023      	b.n	8006db0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d68:	f7fa f9dc 	bl	8001124 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d803      	bhi.n	8006d80 <HAL_SPI_Receive+0x2f4>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d102      	bne.n	8006d86 <HAL_SPI_Receive+0x2fa>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d114      	bne.n	8006db0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fca2 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0db      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f af69 	bne.w	8006c90 <HAL_SPI_Receive+0x204>
 8006dbe:	e0c0      	b.n	8006f42 <HAL_SPI_Receive+0x4b6>
 8006dc0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d117      	bne.n	8006e0a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006e08:	e094      	b.n	8006f34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8bfa      	ldrh	r2, [r7, #30]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d946      	bls.n	8006ea6 <HAL_SPI_Receive+0x41a>
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d041      	beq.n	8006ea6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b04      	subs	r3, #4
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ea4:	e046      	b.n	8006f34 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d81c      	bhi.n	8006eec <HAL_SPI_Receive+0x460>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ec8:	7812      	ldrb	r2, [r2, #0]
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006eea:	e023      	b.n	8006f34 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eec:	f7fa f91a 	bl	8001124 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d803      	bhi.n	8006f04 <HAL_SPI_Receive+0x478>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d102      	bne.n	8006f0a <HAL_SPI_Receive+0x47e>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d114      	bne.n	8006f34 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fbe0 	bl	80076d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e019      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f47f af41 	bne.w	8006dc4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fbc4 	bl	80076d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e126      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_SPI_Transmit_DMA+0x2a>
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e11e      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_SPI_Transmit_DMA+0x3c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e117      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x26c>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	88fa      	ldrh	r2, [r7, #6]
 8006fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007004:	d108      	bne.n	8007018 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e009      	b.n	800702c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800702a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d905      	bls.n	8007040 <HAL_SPI_Transmit_DMA+0xd0>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800703e:	d10f      	bne.n	8007060 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007044:	2b07      	cmp	r3, #7
 8007046:	d911      	bls.n	800706c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007052:	d00b      	beq.n	800706c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007058:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800705a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800705e:	d005      	beq.n	800706c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0b7      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b07      	cmp	r3, #7
 8007072:	d820      	bhi.n	80070b6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800707e:	d109      	bne.n	8007094 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007086:	b29b      	uxth	r3, r3
 8007088:	3301      	adds	r3, #1
 800708a:	105b      	asrs	r3, r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800709e:	d11e      	bne.n	80070de <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3303      	adds	r3, #3
 80070aa:	109b      	asrs	r3, r3, #2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80070b4:	e013      	b.n	80070de <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b0f      	cmp	r3, #15
 80070bc:	d80f      	bhi.n	80070de <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070c8:	d109      	bne.n	80070de <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3301      	adds	r3, #1
 80070d4:	105b      	asrs	r3, r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070e2:	4a40      	ldr	r2, [pc, #256]	@ (80071e4 <HAL_SPI_Transmit_DMA+0x274>)
 80070e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ea:	4a3f      	ldr	r2, [pc, #252]	@ (80071e8 <HAL_SPI_Transmit_DMA+0x278>)
 80070ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070f2:	4a3e      	ldr	r2, [pc, #248]	@ (80071ec <HAL_SPI_Transmit_DMA+0x27c>)
 80070f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070fa:	2200      	movs	r2, #0
 80070fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800710c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007116:	4619      	mov	r1, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3320      	adds	r3, #32
 800711e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007126:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007128:	f7fa fca4 	bl	8001a74 <HAL_DMA_Start_IT>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007138:	f043 0210 	orr.w	r2, r3, #16
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e042      	b.n	80071dc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007160:	d108      	bne.n	8007174 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <HAL_SPI_Transmit_DMA+0x280>)
 800716e:	400b      	ands	r3, r1
 8007170:	6053      	str	r3, [r2, #4]
 8007172:	e009      	b.n	8007188 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4b1d      	ldr	r3, [pc, #116]	@ (80071f0 <HAL_SPI_Transmit_DMA+0x280>)
 800717c:	4013      	ands	r3, r2
 800717e:	88f9      	ldrh	r1, [r7, #6]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	430b      	orrs	r3, r1
 8007186:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007196:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80071a6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071c0:	d107      	bne.n	80071d2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	0800763b 	.word	0x0800763b
 80071e8:	080075f5 	.word	0x080075f5
 80071ec:	08007657 	.word	0x08007657
 80071f0:	ffff0000 	.word	0xffff0000

080071f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	@ 0x28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800720c:	6a3a      	ldr	r2, [r7, #32]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4013      	ands	r3, r2
 8007212:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007226:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3330      	adds	r3, #48	@ 0x30
 800722e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <HAL_SPI_IRQHandler+0x68>
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007252:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9c3 	bl	80075e0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800725a:	e192      	b.n	8007582 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d113      	bne.n	800728e <HAL_SPI_IRQHandler+0x9a>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10e      	bne.n	800728e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007276:	2b00      	cmp	r3, #0
 8007278:	d009      	beq.n	800728e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
    handled = 1UL;
 800728a:	2301      	movs	r3, #1
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10f      	bne.n	80072b8 <HAL_SPI_IRQHandler+0xc4>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
    handled = 1UL;
 80072b4:	2301      	movs	r3, #1
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10f      	bne.n	80072e2 <HAL_SPI_IRQHandler+0xee>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
    handled = 1UL;
 80072de:	2301      	movs	r3, #1
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8147 	bne.w	8007578 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 808b 	beq.w	800740c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0208 	orr.w	r2, r2, #8
 8007304:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0210 	orr.w	r2, r2, #16
 8007314:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007324:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d13d      	bne.n	80073c0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007344:	e036      	b.n	80073b4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d90b      	bls.n	8007366 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007356:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007358:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	665a      	str	r2, [r3, #100]	@ 0x64
 8007364:	e01d      	b.n	80073a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b07      	cmp	r3, #7
 800736c:	d90b      	bls.n	8007386 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	8812      	ldrh	r2, [r2, #0]
 8007376:	b292      	uxth	r2, r2
 8007378:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	665a      	str	r2, [r3, #100]	@ 0x64
 8007384:	e00d      	b.n	80073a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1c2      	bne.n	8007346 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f985 	bl	80076d0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f8f7 	bl	80075cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073de:	e0d0      	b.n	8007582 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d103      	bne.n	80073ee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8dc 	bl	80075a4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80073ec:	e0c6      	b.n	800757c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d103      	bne.n	80073fc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8cb 	bl	8007590 <HAL_SPI_RxCpltCallback>
    return;
 80073fa:	e0bf      	b.n	800757c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f040 80bc 	bne.w	800757c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7f9 fa0b 	bl	8000820 <HAL_SPI_TxCpltCallback>
    return;
 800740a:	e0b7      	b.n	800757c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80b5 	beq.w	8007582 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007428:	f043 0204 	orr.w	r2, r3, #4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007440:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007452:	f043 0201 	orr.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00f      	beq.n	8007496 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747c:	f043 0208 	orr.w	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007494:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00f      	beq.n	80074c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0220 	orr.w	r2, r2, #32
 80074be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d05a      	beq.n	8007580 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6919      	ldr	r1, [r3, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b28      	ldr	r3, [pc, #160]	@ (8007588 <HAL_SPI_IRQHandler+0x394>)
 80074e6:	400b      	ands	r3, r1
 80074e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80074f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80074f4:	d138      	bne.n	8007568 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007504:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007512:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <HAL_SPI_IRQHandler+0x398>)
 8007514:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fd14 	bl	8001f48 <HAL_DMA_Abort_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800752c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800753a:	2b00      	cmp	r3, #0
 800753c:	d020      	beq.n	8007580 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007542:	4a12      	ldr	r2, [pc, #72]	@ (800758c <HAL_SPI_IRQHandler+0x398>)
 8007544:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800754a:	4618      	mov	r0, r3
 800754c:	f7fa fcfc 	bl	8001f48 <HAL_DMA_Abort_IT>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007566:	e00b      	b.n	8007580 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f82b 	bl	80075cc <HAL_SPI_ErrorCallback>
    return;
 8007576:	e003      	b.n	8007580 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007578:	bf00      	nop
 800757a:	e002      	b.n	8007582 <HAL_SPI_IRQHandler+0x38e>
    return;
 800757c:	bf00      	nop
 800757e:	e000      	b.n	8007582 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007580:	bf00      	nop
  }
}
 8007582:	3728      	adds	r7, #40	@ 0x28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	fffffc94 	.word	0xfffffc94
 800758c:	0800769d 	.word	0x0800769d

08007590 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b07      	cmp	r3, #7
 800760c:	d011      	beq.n	8007632 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007618:	d103      	bne.n	8007622 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7f9 f900 	bl	8000820 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007620:	e007      	b.n	8007632 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0208 	orr.w	r2, r2, #8
 8007630:	611a      	str	r2, [r3, #16]
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff ffb5 	bl	80075b8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7fb fddf 	bl	8003228 <HAL_DMA_GetError>
 800766a:	4603      	mov	r3, r0
 800766c:	2b02      	cmp	r3, #2
 800766e:	d011      	beq.n	8007694 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f82d 	bl	80076d0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800767c:	f043 0210 	orr.w	r2, r3, #16
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff9c 	bl	80075cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff ff82 	bl	80075cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0208 	orr.w	r2, r2, #8
 80076ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0210 	orr.w	r2, r2, #16
 80076fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6919      	ldr	r1, [r3, #16]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b3c      	ldr	r3, [pc, #240]	@ (800780c <SPI_CloseTransfer+0x13c>)
 800771c:	400b      	ands	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800772e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b04      	cmp	r3, #4
 800773a:	d014      	beq.n	8007766 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00f      	beq.n	8007766 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800774c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0220 	orr.w	r2, r2, #32
 8007764:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d014      	beq.n	800779c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00f      	beq.n	800779c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007782:	f043 0204 	orr.w	r2, r3, #4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800779a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00f      	beq.n	80077c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ac:	f043 0201 	orr.w	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00f      	beq.n	80077f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d6:	f043 0208 	orr.w	r2, r3, #8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	fffffc90 	.word	0xfffffc90

08007810 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007820:	e010      	b.n	8007844 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007822:	f7f9 fc7f 	bl	8001124 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d803      	bhi.n	800783a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d102      	bne.n	8007840 <SPI_WaitOnFlagUntilTimeout+0x30>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e00f      	b.n	8007864 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	bf0c      	ite	eq
 8007854:	2301      	moveq	r3, #1
 8007856:	2300      	movne	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	429a      	cmp	r2, r3
 8007860:	d0df      	beq.n	8007822 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3307      	adds	r3, #7
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	fb02 f303 	mul.w	r3, r2, r3
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <memset>:
 80078a2:	4402      	add	r2, r0
 80078a4:	4603      	mov	r3, r0
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d100      	bne.n	80078ac <memset+0xa>
 80078aa:	4770      	bx	lr
 80078ac:	f803 1b01 	strb.w	r1, [r3], #1
 80078b0:	e7f9      	b.n	80078a6 <memset+0x4>
	...

080078b4 <__libc_init_array>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4d0d      	ldr	r5, [pc, #52]	@ (80078ec <__libc_init_array+0x38>)
 80078b8:	4c0d      	ldr	r4, [pc, #52]	@ (80078f0 <__libc_init_array+0x3c>)
 80078ba:	1b64      	subs	r4, r4, r5
 80078bc:	10a4      	asrs	r4, r4, #2
 80078be:	2600      	movs	r6, #0
 80078c0:	42a6      	cmp	r6, r4
 80078c2:	d109      	bne.n	80078d8 <__libc_init_array+0x24>
 80078c4:	4d0b      	ldr	r5, [pc, #44]	@ (80078f4 <__libc_init_array+0x40>)
 80078c6:	4c0c      	ldr	r4, [pc, #48]	@ (80078f8 <__libc_init_array+0x44>)
 80078c8:	f000 f818 	bl	80078fc <_init>
 80078cc:	1b64      	subs	r4, r4, r5
 80078ce:	10a4      	asrs	r4, r4, #2
 80078d0:	2600      	movs	r6, #0
 80078d2:	42a6      	cmp	r6, r4
 80078d4:	d105      	bne.n	80078e2 <__libc_init_array+0x2e>
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
 80078d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078dc:	4798      	blx	r3
 80078de:	3601      	adds	r6, #1
 80078e0:	e7ee      	b.n	80078c0 <__libc_init_array+0xc>
 80078e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e6:	4798      	blx	r3
 80078e8:	3601      	adds	r6, #1
 80078ea:	e7f2      	b.n	80078d2 <__libc_init_array+0x1e>
 80078ec:	0800792c 	.word	0x0800792c
 80078f0:	0800792c 	.word	0x0800792c
 80078f4:	0800792c 	.word	0x0800792c
 80078f8:	08007930 	.word	0x08007930

080078fc <_init>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr

08007908 <_fini>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr
