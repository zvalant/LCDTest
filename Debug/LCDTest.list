
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007140  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080073f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  24000010  08007408  00009010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400013c  08007408  0000913c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ef9b  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000022c7  00000000  00000000  00017fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b30  00000000  00000000  0001a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000864  00000000  00000000  0001add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000370fa  00000000  00000000  0001b634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000100b7  00000000  00000000  0005272e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e042  00000000  00000000  000627e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c0827  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cec  00000000  00000000  001c086c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001c3558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080073c0 	.word	0x080073c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080073c0 	.word	0x080073c0

080002d8 <ILI9341_CS_Low>:
volatile bool DMA_Transfer_Complete = false;



// Low-level functions
void ILI9341_CS_Low(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002e2:	4802      	ldr	r0, [pc, #8]	@ (80002ec <ILI9341_CS_Low+0x14>)
 80002e4:	f003 fd48 	bl	8003d78 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	58021800 	.word	0x58021800

080002f0 <ILI9341_CS_High>:

void ILI9341_CS_High(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002fa:	4802      	ldr	r0, [pc, #8]	@ (8000304 <ILI9341_CS_High+0x14>)
 80002fc:	f003 fd3c 	bl	8003d78 <HAL_GPIO_WritePin>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	58021800 	.word	0x58021800

08000308 <ILI9341_DC_Low>:

void ILI9341_DC_Low(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2102      	movs	r1, #2
 8000310:	4802      	ldr	r0, [pc, #8]	@ (800031c <ILI9341_DC_Low+0x14>)
 8000312:	f003 fd31 	bl	8003d78 <HAL_GPIO_WritePin>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	58021800 	.word	0x58021800

08000320 <ILI9341_DC_High>:

void ILI9341_DC_High(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2102      	movs	r1, #2
 8000328:	4802      	ldr	r0, [pc, #8]	@ (8000334 <ILI9341_DC_High+0x14>)
 800032a:	f003 fd25 	bl	8003d78 <HAL_GPIO_WritePin>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	58021800 	.word	0x58021800

08000338 <ILI9341_Reset>:

void ILI9341_Reset(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000342:	4808      	ldr	r0, [pc, #32]	@ (8000364 <ILI9341_Reset+0x2c>)
 8000344:	f003 fd18 	bl	8003d78 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000348:	200a      	movs	r0, #10
 800034a:	f000 fecb 	bl	80010e4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000354:	4803      	ldr	r0, [pc, #12]	@ (8000364 <ILI9341_Reset+0x2c>)
 8000356:	f003 fd0f 	bl	8003d78 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800035a:	2078      	movs	r0, #120	@ 0x78
 800035c:	f000 fec2 	bl	80010e4 <HAL_Delay>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	58021800 	.word	0x58021800

08000368 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 8000372:	f7ff ffb1 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_Low();  // Command mode
 8000376:	f7ff ffc7 	bl	8000308 <ILI9341_DC_Low>
    HAL_Delay(1);
 800037a:	2001      	movs	r0, #1
 800037c:	f000 feb2 	bl	80010e4 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000380:	1df9      	adds	r1, r7, #7
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2201      	movs	r2, #1
 8000388:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <ILI9341_WriteCommand+0x38>)
 800038a:	f006 f965 	bl	8006658 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fea8 	bl	80010e4 <HAL_Delay>
    ILI9341_CS_High();
 8000394:	f7ff ffac 	bl	80002f0 <ILI9341_CS_High>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2400002c 	.word	0x2400002c

080003a4 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 80003ae:	f7ff ff93 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_High(); // Data mode
 80003b2:	f7ff ffb5 	bl	8000320 <ILI9341_DC_High>
    HAL_Delay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f000 fe94 	bl	80010e4 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80003bc:	1df9      	adds	r1, r7, #7
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2201      	movs	r2, #1
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <ILI9341_WriteData+0x38>)
 80003c6:	f006 f947 	bl	8006658 <HAL_SPI_Transmit>
    HAL_Delay(1);
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fe8a 	bl	80010e4 <HAL_Delay>
    ILI9341_CS_High();
 80003d0:	f7ff ff8e 	bl	80002f0 <ILI9341_CS_High>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2400002c 	.word	0x2400002c

080003e0 <ILI9341_WriteData16>:

void ILI9341_WriteData16(uint16_t data) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;    // High byte
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;  // Low byte
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	737b      	strb	r3, [r7, #13]
    ILI9341_CS_Low();
 80003fa:	f7ff ff6d 	bl	80002d8 <ILI9341_CS_Low>
    ILI9341_DC_High();
 80003fe:	f7ff ff8f 	bl	8000320 <ILI9341_DC_High>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000402:	f107 010c 	add.w	r1, r7, #12
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
 800040a:	2202      	movs	r2, #2
 800040c:	4803      	ldr	r0, [pc, #12]	@ (800041c <ILI9341_WriteData16+0x3c>)
 800040e:	f006 f923 	bl	8006658 <HAL_SPI_Transmit>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2400002c 	.word	0x2400002c

08000420 <ILI9341_WritePixelData>:
void ILI9341_WritePixelData(int i , uint8_t r, uint8_t g, uint8_t b, uint8_t* frameBuffer){
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	4608      	mov	r0, r1
 800042a:	4611      	mov	r1, r2
 800042c:	461a      	mov	r2, r3
 800042e:	4603      	mov	r3, r0
 8000430:	70fb      	strb	r3, [r7, #3]
 8000432:	460b      	mov	r3, r1
 8000434:	70bb      	strb	r3, [r7, #2]
 8000436:	4613      	mov	r3, r2
 8000438:	707b      	strb	r3, [r7, #1]
	uint16_t data = ((r>>3)<<11)|((g>>2)<<5)|(b>>3);
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	b21b      	sxth	r3, r3
 8000442:	02db      	lsls	r3, r3, #11
 8000444:	b21a      	sxth	r2, r3
 8000446:	78bb      	ldrb	r3, [r7, #2]
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	b21b      	sxth	r3, r3
 800044e:	015b      	lsls	r3, r3, #5
 8000450:	b21b      	sxth	r3, r3
 8000452:	4313      	orrs	r3, r2
 8000454:	b21a      	sxth	r2, r3
 8000456:	787b      	ldrb	r3, [r7, #1]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	b21b      	sxth	r3, r3
 800045e:	4313      	orrs	r3, r2
 8000460:	b21b      	sxth	r3, r3
 8000462:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2];
	uint8_t dataBit1 = data>>8;
 8000464:	89fb      	ldrh	r3, [r7, #14]
 8000466:	0a1b      	lsrs	r3, r3, #8
 8000468:	b29b      	uxth	r3, r3
 800046a:	737b      	strb	r3, [r7, #13]
	uint8_t dataBit2 = data&0xFF;
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	733b      	strb	r3, [r7, #12]
	frameBuffer[2*i] = dataBit1;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4413      	add	r3, r2
 800047a:	7b7a      	ldrb	r2, [r7, #13]
 800047c:	701a      	strb	r2, [r3, #0]
	frameBuffer[(2*i)+1] = dataBit2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	3301      	adds	r3, #1
 8000484:	69ba      	ldr	r2, [r7, #24]
 8000486:	4413      	add	r3, r2
 8000488:	7b3a      	ldrb	r2, [r7, #12]
 800048a:	701a      	strb	r2, [r3, #0]



}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <ILI9341_Init>:



void ILI9341_Init(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 800049c:	f7ff ff4c 	bl	8000338 <ILI9341_Reset>

    // Software reset
    ILI9341_WriteCommand(ILI9341_SWRESET);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff ff61 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(150);
 80004a6:	2096      	movs	r0, #150	@ 0x96
 80004a8:	f000 fe1c 	bl	80010e4 <HAL_Delay>

    // Sleep out
    ILI9341_WriteCommand(ILI9341_SLPOUT);
 80004ac:	2011      	movs	r0, #17
 80004ae:	f7ff ff5b 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80004b2:	2078      	movs	r0, #120	@ 0x78
 80004b4:	f000 fe16 	bl	80010e4 <HAL_Delay>
    ILI9341_WriteCommand(0x3A);
 80004b8:	203a      	movs	r0, #58	@ 0x3a
 80004ba:	f7ff ff55 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);
 80004be:	2055      	movs	r0, #85	@ 0x55
 80004c0:	f7ff ff70 	bl	80003a4 <ILI9341_WriteData>
    ILI9341_WriteCommand(0x36);
 80004c4:	2036      	movs	r0, #54	@ 0x36
 80004c6:	f7ff ff4f 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 80004ca:	2008      	movs	r0, #8
 80004cc:	f7ff ff6a 	bl	80003a4 <ILI9341_WriteData>

    // Display on
    ILI9341_WriteCommand(ILI9341_DISPON);
 80004d0:	2029      	movs	r0, #41	@ 0x29
 80004d2:	f7ff ff49 	bl	8000368 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80004d6:	2078      	movs	r0, #120	@ 0x78
 80004d8:	f000 fe04 	bl	80010e4 <HAL_Delay>

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4604      	mov	r4, r0
 80004e8:	4608      	mov	r0, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4623      	mov	r3, r4
 80004f0:	80fb      	strh	r3, [r7, #6]
 80004f2:	4603      	mov	r3, r0
 80004f4:	80bb      	strh	r3, [r7, #4]
 80004f6:	460b      	mov	r3, r1
 80004f8:	807b      	strh	r3, [r7, #2]
 80004fa:	4613      	mov	r3, r2
 80004fc:	803b      	strh	r3, [r7, #0]
    // Column address set
    ILI9341_WriteCommand(ILI9341_CASET);
 80004fe:	202a      	movs	r0, #42	@ 0x2a
 8000500:	f7ff ff32 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData16(x0);
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff6a 	bl	80003e0 <ILI9341_WriteData16>
    ILI9341_WriteData16(x1);
 800050c:	887b      	ldrh	r3, [r7, #2]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff66 	bl	80003e0 <ILI9341_WriteData16>

    // Page address set
    ILI9341_WriteCommand(ILI9341_PASET);
 8000514:	202b      	movs	r0, #43	@ 0x2b
 8000516:	f7ff ff27 	bl	8000368 <ILI9341_WriteCommand>
    ILI9341_WriteData16(y0);
 800051a:	88bb      	ldrh	r3, [r7, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff5f 	bl	80003e0 <ILI9341_WriteData16>
    ILI9341_WriteData16(y1);
 8000522:	883b      	ldrh	r3, [r7, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff5b 	bl	80003e0 <ILI9341_WriteData16>

    // Memory write
    ILI9341_WriteCommand(ILI9341_RAMWR);
 800052a:	202c      	movs	r0, #44	@ 0x2c
 800052c:	f7ff ff1c 	bl	8000368 <ILI9341_WriteCommand>
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bd90      	pop	{r4, r7, pc}

08000538 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color, uint8_t rowCounter) {
 8000538:	b580      	push	{r7, lr}
 800053a:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af02      	add	r7, sp, #8
 8000542:	4602      	mov	r2, r0
 8000544:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000548:	f6a3 031a 	subw	r3, r3, #2074	@ 0x81a
 800054c:	801a      	strh	r2, [r3, #0]
 800054e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000552:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 8000556:	460a      	mov	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]

    uint8_t color1 = 255;
 800055a:	23ff      	movs	r3, #255	@ 0xff
 800055c:	4a74      	ldr	r2, [pc, #464]	@ (8000730 <ILI9341_FillScreen+0x1f8>)
 800055e:	443a      	add	r2, r7
 8000560:	7013      	strb	r3, [r2, #0]
    uint8_t color2 = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	4a73      	ldr	r2, [pc, #460]	@ (8000734 <ILI9341_FillScreen+0x1fc>)
 8000566:	443a      	add	r2, r7
 8000568:	7013      	strb	r3, [r2, #0]
    uint8_t color3 = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	4a72      	ldr	r2, [pc, #456]	@ (8000738 <ILI9341_FillScreen+0x200>)
 800056e:	443a      	add	r2, r7
 8000570:	7013      	strb	r3, [r2, #0]
    uint8_t frameBuffer[153600];
    int section = 51200;
 8000572:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8000576:	4a71      	ldr	r2, [pc, #452]	@ (800073c <ILI9341_FillScreen+0x204>)
 8000578:	443a      	add	r2, r7
 800057a:	6013      	str	r3, [r2, #0]
    int sectionCount = 153600/section;
 800057c:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8000580:	4b6e      	ldr	r3, [pc, #440]	@ (800073c <ILI9341_FillScreen+0x204>)
 8000582:	443b      	add	r3, r7
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	fb92 f3f3 	sdiv	r3, r2, r3
 800058a:	4a6d      	ldr	r2, [pc, #436]	@ (8000740 <ILI9341_FillScreen+0x208>)
 800058c:	443a      	add	r2, r7
 800058e:	6013      	str	r3, [r2, #0]

    for(int i = 0; i < 76800; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	4a6c      	ldr	r2, [pc, #432]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 8000594:	443a      	add	r2, r7
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	e077      	b.n	800068a <ILI9341_FillScreen+0x152>
    	if(i%1920==0){
 800059a:	4b6a      	ldr	r3, [pc, #424]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 800059c:	443b      	add	r3, r7
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b69      	ldr	r3, [pc, #420]	@ (8000748 <ILI9341_FillScreen+0x210>)
 80005a2:	fb83 1302 	smull	r1, r3, r3, r2
 80005a6:	4413      	add	r3, r2
 80005a8:	1299      	asrs	r1, r3, #10
 80005aa:	17d3      	asrs	r3, r2, #31
 80005ac:	1ac9      	subs	r1, r1, r3
 80005ae:	460b      	mov	r3, r1
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	1a5b      	subs	r3, r3, r1
 80005b4:	01db      	lsls	r3, r3, #7
 80005b6:	1ad1      	subs	r1, r2, r3
 80005b8:	2900      	cmp	r1, #0
 80005ba:	d149      	bne.n	8000650 <ILI9341_FillScreen+0x118>
    		rowCounter++;
 80005bc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80005c0:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80005ca:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 80005ce:	3201      	adds	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
    		switch(rowCounter%3){
 80005d2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80005d6:	f6a3 031b 	subw	r3, r3, #2075	@ 0x81b
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	4b5b      	ldr	r3, [pc, #364]	@ (800074c <ILI9341_FillScreen+0x214>)
 80005de:	fba3 1302 	umull	r1, r3, r3, r2
 80005e2:	0859      	lsrs	r1, r3, #1
 80005e4:	460b      	mov	r3, r1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	440b      	add	r3, r1
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d020      	beq.n	8000634 <ILI9341_FillScreen+0xfc>
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	dc2b      	bgt.n	800064e <ILI9341_FillScreen+0x116>
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <ILI9341_FillScreen+0xc8>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00d      	beq.n	800061a <ILI9341_FillScreen+0xe2>
    			color1 = 255;
    			color2 = 245;
    			color3 = 238;
    			break;
    		default:
    			break;
 80005fe:	e026      	b.n	800064e <ILI9341_FillScreen+0x116>
    			color1 = 255;
 8000600:	23ff      	movs	r3, #255	@ 0xff
 8000602:	4a4b      	ldr	r2, [pc, #300]	@ (8000730 <ILI9341_FillScreen+0x1f8>)
 8000604:	443a      	add	r2, r7
 8000606:	7013      	strb	r3, [r2, #0]
    			color2 = 127;
 8000608:	237f      	movs	r3, #127	@ 0x7f
 800060a:	4a4a      	ldr	r2, [pc, #296]	@ (8000734 <ILI9341_FillScreen+0x1fc>)
 800060c:	443a      	add	r2, r7
 800060e:	7013      	strb	r3, [r2, #0]
    			color3 = 80;
 8000610:	2350      	movs	r3, #80	@ 0x50
 8000612:	4a49      	ldr	r2, [pc, #292]	@ (8000738 <ILI9341_FillScreen+0x200>)
 8000614:	443a      	add	r2, r7
 8000616:	7013      	strb	r3, [r2, #0]
    			break;
 8000618:	e01a      	b.n	8000650 <ILI9341_FillScreen+0x118>
    			color1 = 46;
 800061a:	232e      	movs	r3, #46	@ 0x2e
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <ILI9341_FillScreen+0x1f8>)
 800061e:	443a      	add	r2, r7
 8000620:	7013      	strb	r3, [r2, #0]
    			color2 = 139;
 8000622:	238b      	movs	r3, #139	@ 0x8b
 8000624:	4a43      	ldr	r2, [pc, #268]	@ (8000734 <ILI9341_FillScreen+0x1fc>)
 8000626:	443a      	add	r2, r7
 8000628:	7013      	strb	r3, [r2, #0]
    			color3 = 87;
 800062a:	2357      	movs	r3, #87	@ 0x57
 800062c:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <ILI9341_FillScreen+0x200>)
 800062e:	443a      	add	r2, r7
 8000630:	7013      	strb	r3, [r2, #0]
    			break;
 8000632:	e00d      	b.n	8000650 <ILI9341_FillScreen+0x118>
    			color1 = 255;
 8000634:	23ff      	movs	r3, #255	@ 0xff
 8000636:	4a3e      	ldr	r2, [pc, #248]	@ (8000730 <ILI9341_FillScreen+0x1f8>)
 8000638:	443a      	add	r2, r7
 800063a:	7013      	strb	r3, [r2, #0]
    			color2 = 245;
 800063c:	23f5      	movs	r3, #245	@ 0xf5
 800063e:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <ILI9341_FillScreen+0x1fc>)
 8000640:	443a      	add	r2, r7
 8000642:	7013      	strb	r3, [r2, #0]
    			color3 = 238;
 8000644:	23ee      	movs	r3, #238	@ 0xee
 8000646:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <ILI9341_FillScreen+0x200>)
 8000648:	443a      	add	r2, r7
 800064a:	7013      	strb	r3, [r2, #0]
    			break;
 800064c:	e000      	b.n	8000650 <ILI9341_FillScreen+0x118>
    			break;
 800064e:	bf00      	nop
    		}

    	}
    	//ILI9341_WriteData16(color);

        ILI9341_WritePixelData(i, color1,color2,color3, frameBuffer);
 8000650:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <ILI9341_FillScreen+0x200>)
 8000652:	443b      	add	r3, r7
 8000654:	7818      	ldrb	r0, [r3, #0]
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <ILI9341_FillScreen+0x1fc>)
 8000658:	443b      	add	r3, r7
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <ILI9341_FillScreen+0x1f8>)
 800065e:	443b      	add	r3, r7
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <ILI9341_FillScreen+0x218>)
 8000664:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000668:	f103 0320 	add.w	r3, r3, #32
 800066c:	443b      	add	r3, r7
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4603      	mov	r3, r0
 8000672:	4834      	ldr	r0, [pc, #208]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 8000674:	4438      	add	r0, r7
 8000676:	6800      	ldr	r0, [r0, #0]
 8000678:	f7ff fed2 	bl	8000420 <ILI9341_WritePixelData>
    for(int i = 0; i < 76800; i++) {
 800067c:	4b31      	ldr	r3, [pc, #196]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 800067e:	443b      	add	r3, r7
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a2f      	ldr	r2, [pc, #188]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 8000686:	443a      	add	r2, r7
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <ILI9341_FillScreen+0x20c>)
 800068c:	443b      	add	r3, r7
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000694:	db81      	blt.n	800059a <ILI9341_FillScreen+0x62>

    }// 240 * 320 pixels
    ILI9341_SetWindow(0, 0, 239, 319);
 8000696:	f240 133f 	movw	r3, #319	@ 0x13f
 800069a:	22ef      	movs	r2, #239	@ 0xef
 800069c:	2100      	movs	r1, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff1e 	bl	80004e0 <ILI9341_SetWindow>
	ILI9341_CS_Low();
 80006a4:	f7ff fe18 	bl	80002d8 <ILI9341_CS_Low>
	ILI9341_DC_High();
 80006a8:	f7ff fe3a 	bl	8000320 <ILI9341_DC_High>
    for (int i = 0; i <sectionCount;i++){
 80006ac:	2300      	movs	r3, #0
 80006ae:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <ILI9341_FillScreen+0x21c>)
 80006b0:	443a      	add	r2, r7
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e029      	b.n	800070a <ILI9341_FillScreen+0x1d2>
    	HAL_SPI_Transmit_DMA(&hspi1, &frameBuffer[i*section], section);
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <ILI9341_FillScreen+0x21c>)
 80006b8:	443b      	add	r3, r7
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <ILI9341_FillScreen+0x204>)
 80006be:	443a      	add	r2, r7
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	fb03 f202 	mul.w	r2, r3, r2
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <ILI9341_FillScreen+0x218>)
 80006c8:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80006cc:	f103 0320 	add.w	r3, r3, #32
 80006d0:	443b      	add	r3, r7
 80006d2:	4413      	add	r3, r2
 80006d4:	4a19      	ldr	r2, [pc, #100]	@ (800073c <ILI9341_FillScreen+0x204>)
 80006d6:	443a      	add	r2, r7
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	b292      	uxth	r2, r2
 80006dc:	4619      	mov	r1, r3
 80006de:	481e      	ldr	r0, [pc, #120]	@ (8000758 <ILI9341_FillScreen+0x220>)
 80006e0:	f006 f9a8 	bl	8006a34 <HAL_SPI_Transmit_DMA>
        while(!DMA_Transfer_Complete);
 80006e4:	bf00      	nop
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <ILI9341_FillScreen+0x224>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f083 0301 	eor.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f7      	bne.n	80006e6 <ILI9341_FillScreen+0x1ae>
        DMA_Transfer_Complete = false;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <ILI9341_FillScreen+0x224>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <sectionCount;i++){
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <ILI9341_FillScreen+0x21c>)
 80006fe:	443b      	add	r3, r7
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <ILI9341_FillScreen+0x21c>)
 8000706:	443a      	add	r2, r7
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <ILI9341_FillScreen+0x21c>)
 800070c:	443b      	add	r3, r7
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <ILI9341_FillScreen+0x208>)
 8000712:	443b      	add	r3, r7
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbcd      	blt.n	80006b6 <ILI9341_FillScreen+0x17e>
    }

	ILI9341_CS_High();
 800071a:	f7ff fde9 	bl	80002f0 <ILI9341_CS_High>
	HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	@ 0x64
 8000720:	f000 fce0 	bl	80010e4 <HAL_Delay>
}
 8000724:	bf00      	nop
 8000726:	f507 3716 	add.w	r7, r7, #153600	@ 0x25800
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	0002581f 	.word	0x0002581f
 8000734:	0002581e 	.word	0x0002581e
 8000738:	0002581d 	.word	0x0002581d
 800073c:	00025810 	.word	0x00025810
 8000740:	0002580c 	.word	0x0002580c
 8000744:	00025818 	.word	0x00025818
 8000748:	88888889 	.word	0x88888889
 800074c:	aaaaaaab 	.word	0xaaaaaaab
 8000750:	fffda7ec 	.word	0xfffda7ec
 8000754:	00025814 	.word	0x00025814
 8000758:	2400002c 	.word	0x2400002c
 800075c:	240000b4 	.word	0x240000b4

08000760 <ILI9341_TestPattern>:
    ILI9341_SetWindow(x, y, x, y);
    ILI9341_WriteData16(color);
}

// Simple test pattern
void ILI9341_TestPattern(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    // Fill screen with different colors to test
	int frameCounter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
	while(1){
		frameCounter++;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
	    ILI9341_FillScreen(COLOR_RED, frameCounter);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800077a:	f7ff fedd 	bl	8000538 <ILI9341_FillScreen>
		frameCounter++;
 800077e:	bf00      	nop
 8000780:	e7f3      	b.n	800076a <ILI9341_TestPattern+0xa>
	...

08000784 <Test_SPI_Data>:
        }
    }
}

// Simple test to verify SPI data transmission
void Test_SPI_Data(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xFF;
 800078a:	23ff      	movs	r3, #255	@ 0xff
 800078c:	70fb      	strb	r3, [r7, #3]

    for(int i = 0; i < 20; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	e012      	b.n	80007ba <Test_SPI_Data+0x36>
        ILI9341_CS_Low();
 8000794:	f7ff fda0 	bl	80002d8 <ILI9341_CS_Low>
        ILI9341_DC_High();
 8000798:	f7ff fdc2 	bl	8000320 <ILI9341_DC_High>
        HAL_SPI_Transmit(&hspi1, &test_data, 1, HAL_MAX_DELAY);
 800079c:	1cf9      	adds	r1, r7, #3
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	2201      	movs	r2, #1
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <Test_SPI_Data+0x48>)
 80007a6:	f005 ff57 	bl	8006658 <HAL_SPI_Transmit>
        ILI9341_CS_High();
 80007aa:	f7ff fda1 	bl	80002f0 <ILI9341_CS_High>
        HAL_Delay(200);
 80007ae:	20c8      	movs	r0, #200	@ 0xc8
 80007b0:	f000 fc98 	bl	80010e4 <HAL_Delay>
    for(int i = 0; i < 20; i++) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b13      	cmp	r3, #19
 80007be:	dde9      	ble.n	8000794 <Test_SPI_Data+0x10>
    }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2400002c 	.word	0x2400002c

080007d0 <HAL_SPI_TxCpltCallback>:
void SPITest(void){
	ILI9341_CS_Low();
	ILI9341_DC_High();

}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <HAL_SPI_TxCpltCallback+0x24>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d102      	bne.n	80007e8 <HAL_SPI_TxCpltCallback+0x18>
    	DMA_Transfer_Complete = true;  // YOU set your own flag
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_SPI_TxCpltCallback+0x28>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
    }
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40013000 	.word	0x40013000
 80007f8:	240000b4 	.word	0x240000b4

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fbde 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f812 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f90a 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800080c:	f000 f8e8 	bl	80009e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000810:	f000 f888 	bl	8000924 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // First test raw SPI data transmission


  // Initialize display
  ILI9341_Init();
 8000814:	f7ff fe40 	bl	8000498 <ILI9341_Init>
  Test_SPI_Data();
 8000818:	f7ff ffb4 	bl	8000784 <Test_SPI_Data>



  // Run test pattern
  while(1) {
      ILI9341_TestPattern();
 800081c:	f7ff ffa0 	bl	8000760 <ILI9341_TestPattern>
      HAL_Delay(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000824:	f000 fc5e 	bl	80010e4 <HAL_Delay>
      ILI9341_TestPattern();
 8000828:	bf00      	nop
 800082a:	e7f7      	b.n	800081c <main+0x20>

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09c      	sub	sp, #112	@ 0x70
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	224c      	movs	r2, #76	@ 0x4c
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fd93 	bl	8007366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2220      	movs	r2, #32
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fd8d 	bl	8007366 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800084c:	2002      	movs	r0, #2
 800084e:	f003 faad 	bl	8003dac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b31      	ldr	r3, [pc, #196]	@ (800091c <SystemClock_Config+0xf0>)
 8000858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085a:	4a30      	ldr	r2, [pc, #192]	@ (800091c <SystemClock_Config+0xf0>)
 800085c:	f023 0301 	bic.w	r3, r3, #1
 8000860:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <SystemClock_Config+0xf0>)
 8000864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <SystemClock_Config+0xf4>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000874:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <SystemClock_Config+0xf4>)
 8000876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <SystemClock_Config+0xf4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000888:	bf00      	nop
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <SystemClock_Config+0xf4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000896:	d1f8      	bne.n	800088a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008ae:	2348      	movs	r3, #72	@ 0x48
 80008b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008b6:	2306      	movs	r3, #6
 80008b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008be:	2308      	movs	r3, #8
 80008c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 faa6 	bl	8003e20 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008da:	f000 f93d 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	@ 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2101      	movs	r1, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fee6 	bl	80046d4 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800090e:	f000 f923 	bl	8000b58 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3770      	adds	r7, #112	@ 0x70
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	58000400 	.word	0x58000400
 8000920:	58024800 	.word	0x58024800

08000924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800092a:	4a2c      	ldr	r2, [pc, #176]	@ (80009dc <MX_SPI1_Init+0xb8>)
 800092c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092e:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000930:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000938:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800093c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000940:	2207      	movs	r2, #7
 8000942:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000952:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000956:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000986:	2200      	movs	r2, #0
 8000988:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000992:	2200      	movs	r2, #0
 8000994:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009b6:	f005 fd2b 	bl	8006410 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80009c0:	f000 f8ca 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <MX_SPI1_Init+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2400002c 	.word	0x2400002c
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <MX_DMA_Init+0x3c>)
 80009e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ec:	4a0b      	ldr	r2, [pc, #44]	@ (8000a1c <MX_DMA_Init+0x3c>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_DMA_Init+0x3c>)
 80009f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	200b      	movs	r0, #11
 8000a0a:	f000 fc76 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a0e:	200b      	movs	r0, #11
 8000a10:	f000 fc8d 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	58024400 	.word	0x58024400

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	@ 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b45      	ldr	r3, [pc, #276]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3c:	4a43      	ldr	r2, [pc, #268]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a46:	4b41      	ldr	r3, [pc, #260]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a54:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a64:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	4a34      	ldr	r2, [pc, #208]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a82:	4b32      	ldr	r3, [pc, #200]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a90:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	4a25      	ldr	r2, [pc, #148]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abe:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	4818      	ldr	r0, [pc, #96]	@ (8000b50 <MX_GPIO_Init+0x130>)
 8000af0:	f003 f942 	bl	8003d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ILI9341_RST_Pin|ILI9341_CS_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000afa:	4815      	ldr	r0, [pc, #84]	@ (8000b50 <MX_GPIO_Init+0x130>)
 8000afc:	f003 f93c 	bl	8003d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2102      	movs	r1, #2
 8000b04:	4813      	ldr	r0, [pc, #76]	@ (8000b54 <MX_GPIO_Init+0x134>)
 8000b06:	f003 f937 	bl	8003d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RST_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RST_Pin|ILI9341_CS_Pin;
 8000b0a:	f249 0302 	movw	r3, #36866	@ 0x9002
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <MX_GPIO_Init+0x130>)
 8000b24:	f002 ff78 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_GPIO_Init+0x134>)
 8000b40:	f002 ff6a 	bl	8003a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	@ 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58021800 	.word	0x58021800
 8000b54:	58021000 	.word	0x58021000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_MspInit+0x30>)
 8000b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b70:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_MspInit+0x30>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	58024400 	.word	0x58024400

08000b98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	22c0      	movs	r2, #192	@ 0xc0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fbd4 	bl	8007366 <memset>
  if(hspi->Instance==SPI1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a58      	ldr	r2, [pc, #352]	@ (8000d24 <HAL_SPI_MspInit+0x18c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	f040 80a8 	bne.w	8000d1a <HAL_SPI_MspInit+0x182>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f8a8 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000bea:	f7ff ffb5 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bee:	4b4e      	ldr	r3, [pc, #312]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bf4:	4a4c      	ldr	r2, [pc, #304]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a45      	ldr	r2, [pc, #276]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a3d      	ldr	r2, [pc, #244]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <HAL_SPI_MspInit+0x190>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c60:	2305      	movs	r3, #5
 8000c62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	482f      	ldr	r0, [pc, #188]	@ (8000d2c <HAL_SPI_MspInit+0x194>)
 8000c6e:	f002 fed3 	bl	8003a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c72:	2380      	movs	r3, #128	@ 0x80
 8000c74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c94:	4619      	mov	r1, r3
 8000c96:	4826      	ldr	r0, [pc, #152]	@ (8000d30 <HAL_SPI_MspInit+0x198>)
 8000c98:	f002 febe 	bl	8003a18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000c9e:	4a26      	ldr	r2, [pc, #152]	@ (8000d38 <HAL_SPI_MspInit+0x1a0>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000ca4:	2226      	movs	r2, #38	@ 0x26
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000caa:	2240      	movs	r2, #64	@ 0x40
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cd4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000cf0:	f000 fb38 	bl	8001364 <HAL_DMA_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8000cfa:	f7ff ff2d 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000d02:	679a      	str	r2, [r3, #120]	@ 0x78
 8000d04:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <HAL_SPI_MspInit+0x19c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2023      	movs	r0, #35	@ 0x23
 8000d10:	f000 faf3 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d14:	2023      	movs	r0, #35	@ 0x23
 8000d16:	f000 fb0a 	bl	800132e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	37f0      	adds	r7, #240	@ 0xf0
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40013000 	.word	0x40013000
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58020000 	.word	0x58020000
 8000d30:	58020c00 	.word	0x58020c00
 8000d34:	240000b8 	.word	0x240000b8
 8000d38:	40020010 	.word	0x40020010

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 f987 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <DMA1_Stream0_IRQHandler+0x10>)
 8000da2:	f001 faeb 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	240000b8 	.word	0x240000b8

08000db0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <SPI1_IRQHandler+0x10>)
 8000db6:	f005 ff7f 	bl	8006cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2400002c 	.word	0x2400002c

08000dc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f8e7 	bl	8000f9c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <SystemInit+0x114>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a42      	ldr	r2, [pc, #264]	@ (8000ee8 <SystemInit+0x114>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de8:	4b40      	ldr	r3, [pc, #256]	@ (8000eec <SystemInit+0x118>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	2b06      	cmp	r3, #6
 8000df2:	d807      	bhi.n	8000e04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000df4:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <SystemInit+0x118>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 030f 	bic.w	r3, r3, #15
 8000dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8000eec <SystemInit+0x118>)
 8000dfe:	f043 0307 	orr.w	r3, r3, #7
 8000e02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <SystemInit+0x11c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a39      	ldr	r2, [pc, #228]	@ (8000ef0 <SystemInit+0x11c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e10:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <SystemInit+0x11c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <SystemInit+0x11c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4935      	ldr	r1, [pc, #212]	@ (8000ef0 <SystemInit+0x11c>)
 8000e1c:	4b35      	ldr	r3, [pc, #212]	@ (8000ef4 <SystemInit+0x120>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e22:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <SystemInit+0x118>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000eec <SystemInit+0x118>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 030f 	bic.w	r3, r3, #15
 8000e36:	4a2d      	ldr	r2, [pc, #180]	@ (8000eec <SystemInit+0x118>)
 8000e38:	f043 0307 	orr.w	r3, r3, #7
 8000e3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <SystemInit+0x11c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e44:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <SystemInit+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <SystemInit+0x11c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <SystemInit+0x11c>)
 8000e52:	4a29      	ldr	r2, [pc, #164]	@ (8000ef8 <SystemInit+0x124>)
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e56:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <SystemInit+0x11c>)
 8000e58:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <SystemInit+0x128>)
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <SystemInit+0x11c>)
 8000e5e:	4a28      	ldr	r2, [pc, #160]	@ (8000f00 <SystemInit+0x12c>)
 8000e60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e62:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <SystemInit+0x11c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e68:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <SystemInit+0x11c>)
 8000e6a:	4a25      	ldr	r2, [pc, #148]	@ (8000f00 <SystemInit+0x12c>)
 8000e6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <SystemInit+0x11c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <SystemInit+0x11c>)
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <SystemInit+0x12c>)
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <SystemInit+0x11c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <SystemInit+0x11c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <SystemInit+0x11c>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <SystemInit+0x11c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <SystemInit+0x130>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <SystemInit+0x134>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e9e:	d202      	bcs.n	8000ea6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <SystemInit+0x138>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <SystemInit+0x11c>)
 8000ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d113      	bne.n	8000edc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <SystemInit+0x11c>)
 8000eb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <SystemInit+0x11c>)
 8000ebc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ec0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <SystemInit+0x13c>)
 8000ec6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <SystemInit+0x11c>)
 8000ece:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ed2:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <SystemInit+0x11c>)
 8000ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ed8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	52002000 	.word	0x52002000
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef8:	02020200 	.word	0x02020200
 8000efc:	01ff0000 	.word	0x01ff0000
 8000f00:	01010280 	.word	0x01010280
 8000f04:	5c001000 	.word	0x5c001000
 8000f08:	ffff0000 	.word	0xffff0000
 8000f0c:	51008108 	.word	0x51008108
 8000f10:	52004000 	.word	0x52004000

08000f14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f24:	bf00      	nop
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f9      	beq.n	8000f26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	58024800 	.word	0x58024800

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f48:	f7ff ffe4 	bl	8000f14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f4c:	f7ff ff42 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
   ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f006 f9ff 	bl	8007378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fc3f 	bl	80007fc <main>
  bx  lr
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f88:	24000010 	.word	0x24000010
   ldr r2, =_sidata
 8000f8c:	080073f8 	.word	0x080073f8
  ldr r2, =_sbss
 8000f90:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f94:	2400013c 	.word	0x2400013c

08000f98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC3_IRQHandler>
	...

08000f9c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <BSP_PB_IRQHandler+0x20>)
 8000fac:	4413      	add	r3, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fd02 	bl	80039b8 <HAL_EXTI_IRQHandler>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	24000130 	.word	0x24000130

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f000 f98c 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fcc:	f003 fd38 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_Init+0x68>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	4913      	ldr	r1, [pc, #76]	@ (800102c <HAL_Init+0x6c>)
 8000fde:	5ccb      	ldrb	r3, [r1, r3]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_Init+0x68>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <HAL_Init+0x6c>)
 8000ff4:	5cd3      	ldrb	r3, [r2, r3]
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <HAL_Init+0x70>)
 8001002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_Init+0x74>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f814 	bl	8001038 <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e002      	b.n	8001020 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101a:	f7ff fda3 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58024400 	.word	0x58024400
 800102c:	080073d8 	.word	0x080073d8
 8001030:	24000004 	.word	0x24000004
 8001034:	24000000 	.word	0x24000000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_InitTick+0x60>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e021      	b.n	8001090 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <HAL_InitTick+0x64>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_InitTick+0x60>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f971 	bl	800134a <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f93b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <HAL_InitTick+0x68>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2400000c 	.word	0x2400000c
 800109c:	24000000 	.word	0x24000000
 80010a0:	24000008 	.word	0x24000008

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2400000c 	.word	0x2400000c
 80010c8:	24000138 	.word	0x24000138

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	24000138 	.word	0x24000138

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2400000c 	.word	0x2400000c

0800112c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_GetREVID+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0c1b      	lsrs	r3, r3, #16
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	5c001000 	.word	0x5c001000

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	4313      	orrs	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	05fa0000 	.word	0x05fa0000

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff40 	bl	800118c <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff33 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa4 	bl	80012a0 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff feae 	bl	80010cc <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e316      	b.n	80019aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a66      	ldr	r2, [pc, #408]	@ (800151c <HAL_DMA_Init+0x1b8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d04a      	beq.n	800141c <HAL_DMA_Init+0xb8>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a65      	ldr	r2, [pc, #404]	@ (8001520 <HAL_DMA_Init+0x1bc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d045      	beq.n	800141c <HAL_DMA_Init+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a63      	ldr	r2, [pc, #396]	@ (8001524 <HAL_DMA_Init+0x1c0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d040      	beq.n	800141c <HAL_DMA_Init+0xb8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a62      	ldr	r2, [pc, #392]	@ (8001528 <HAL_DMA_Init+0x1c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d03b      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a60      	ldr	r2, [pc, #384]	@ (800152c <HAL_DMA_Init+0x1c8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d036      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001530 <HAL_DMA_Init+0x1cc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d031      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001534 <HAL_DMA_Init+0x1d0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02c      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001538 <HAL_DMA_Init+0x1d4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d027      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5a      	ldr	r2, [pc, #360]	@ (800153c <HAL_DMA_Init+0x1d8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d022      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a59      	ldr	r2, [pc, #356]	@ (8001540 <HAL_DMA_Init+0x1dc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d01d      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <HAL_DMA_Init+0x1e0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d018      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a56      	ldr	r2, [pc, #344]	@ (8001548 <HAL_DMA_Init+0x1e4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d013      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a54      	ldr	r2, [pc, #336]	@ (800154c <HAL_DMA_Init+0x1e8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00e      	beq.n	800141c <HAL_DMA_Init+0xb8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a53      	ldr	r2, [pc, #332]	@ (8001550 <HAL_DMA_Init+0x1ec>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d009      	beq.n	800141c <HAL_DMA_Init+0xb8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a51      	ldr	r2, [pc, #324]	@ (8001554 <HAL_DMA_Init+0x1f0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d004      	beq.n	800141c <HAL_DMA_Init+0xb8>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a50      	ldr	r2, [pc, #320]	@ (8001558 <HAL_DMA_Init+0x1f4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_DMA_Init+0xbc>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_DMA_Init+0xbe>
 8001420:	2300      	movs	r3, #0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 813b 	beq.w	800169e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a37      	ldr	r2, [pc, #220]	@ (800151c <HAL_DMA_Init+0x1b8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d04a      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a36      	ldr	r2, [pc, #216]	@ (8001520 <HAL_DMA_Init+0x1bc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d045      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a34      	ldr	r2, [pc, #208]	@ (8001524 <HAL_DMA_Init+0x1c0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d040      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a33      	ldr	r2, [pc, #204]	@ (8001528 <HAL_DMA_Init+0x1c4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d03b      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a31      	ldr	r2, [pc, #196]	@ (800152c <HAL_DMA_Init+0x1c8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d036      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a30      	ldr	r2, [pc, #192]	@ (8001530 <HAL_DMA_Init+0x1cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d031      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_DMA_Init+0x1d0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02c      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2d      	ldr	r2, [pc, #180]	@ (8001538 <HAL_DMA_Init+0x1d4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d027      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2b      	ldr	r2, [pc, #172]	@ (800153c <HAL_DMA_Init+0x1d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d022      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2a      	ldr	r2, [pc, #168]	@ (8001540 <HAL_DMA_Init+0x1dc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d01d      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <HAL_DMA_Init+0x1e0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d018      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <HAL_DMA_Init+0x1e4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a25      	ldr	r2, [pc, #148]	@ (800154c <HAL_DMA_Init+0x1e8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00e      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a24      	ldr	r2, [pc, #144]	@ (8001550 <HAL_DMA_Init+0x1ec>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <HAL_DMA_Init+0x1f0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Init+0x174>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_DMA_Init+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d108      	bne.n	80014ea <HAL_DMA_Init+0x186>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e007      	b.n	80014fa <HAL_DMA_Init+0x196>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014fa:	e02f      	b.n	800155c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fc:	f7ff fde6 	bl	80010cc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d928      	bls.n	800155c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2220      	movs	r2, #32
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e246      	b.n	80019aa <HAL_DMA_Init+0x646>
 800151c:	40020010 	.word	0x40020010
 8001520:	40020028 	.word	0x40020028
 8001524:	40020040 	.word	0x40020040
 8001528:	40020058 	.word	0x40020058
 800152c:	40020070 	.word	0x40020070
 8001530:	40020088 	.word	0x40020088
 8001534:	400200a0 	.word	0x400200a0
 8001538:	400200b8 	.word	0x400200b8
 800153c:	40020410 	.word	0x40020410
 8001540:	40020428 	.word	0x40020428
 8001544:	40020440 	.word	0x40020440
 8001548:	40020458 	.word	0x40020458
 800154c:	40020470 	.word	0x40020470
 8001550:	40020488 	.word	0x40020488
 8001554:	400204a0 	.word	0x400204a0
 8001558:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1c8      	bne.n	80014fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4b83      	ldr	r3, [pc, #524]	@ (8001784 <HAL_DMA_Init+0x420>)
 8001576:	4013      	ands	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001582:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d107      	bne.n	80015c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4313      	orrs	r3, r2
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80015c0:	4b71      	ldr	r3, [pc, #452]	@ (8001788 <HAL_DMA_Init+0x424>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b71      	ldr	r3, [pc, #452]	@ (800178c <HAL_DMA_Init+0x428>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015cc:	d328      	bcc.n	8001620 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b28      	cmp	r3, #40	@ 0x28
 80015d4:	d903      	bls.n	80015de <HAL_DMA_Init+0x27a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b2e      	cmp	r3, #46	@ 0x2e
 80015dc:	d917      	bls.n	800160e <HAL_DMA_Init+0x2aa>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80015e4:	d903      	bls.n	80015ee <HAL_DMA_Init+0x28a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b42      	cmp	r3, #66	@ 0x42
 80015ec:	d90f      	bls.n	800160e <HAL_DMA_Init+0x2aa>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b46      	cmp	r3, #70	@ 0x46
 80015f4:	d903      	bls.n	80015fe <HAL_DMA_Init+0x29a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b48      	cmp	r3, #72	@ 0x48
 80015fc:	d907      	bls.n	800160e <HAL_DMA_Init+0x2aa>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b4e      	cmp	r3, #78	@ 0x4e
 8001604:	d905      	bls.n	8001612 <HAL_DMA_Init+0x2ae>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b52      	cmp	r3, #82	@ 0x52
 800160c:	d801      	bhi.n	8001612 <HAL_DMA_Init+0x2ae>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_DMA_Init+0x2b0>
 8001612:	2300      	movs	r3, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800161e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f023 0307 	bic.w	r3, r3, #7
 8001636:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4313      	orrs	r3, r2
 8001640:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	2b04      	cmp	r3, #4
 8001648:	d117      	bne.n	800167a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f002 f821 	bl	80036a4 <DMA_CheckFifoParam>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e197      	b.n	80019aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f001 ff5c 	bl	8003540 <DMA_CalcBaseAndBitshift>
 8001688:	4603      	mov	r3, r0
 800168a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	223f      	movs	r2, #63	@ 0x3f
 8001696:	409a      	lsls	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	e0cd      	b.n	800183a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001790 <HAL_DMA_Init+0x42c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a39      	ldr	r2, [pc, #228]	@ (8001794 <HAL_DMA_Init+0x430>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01d      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a38      	ldr	r2, [pc, #224]	@ (8001798 <HAL_DMA_Init+0x434>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d018      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a36      	ldr	r2, [pc, #216]	@ (800179c <HAL_DMA_Init+0x438>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a35      	ldr	r2, [pc, #212]	@ (80017a0 <HAL_DMA_Init+0x43c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00e      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a33      	ldr	r2, [pc, #204]	@ (80017a4 <HAL_DMA_Init+0x440>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d009      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a32      	ldr	r2, [pc, #200]	@ (80017a8 <HAL_DMA_Init+0x444>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d004      	beq.n	80016ee <HAL_DMA_Init+0x38a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a30      	ldr	r2, [pc, #192]	@ (80017ac <HAL_DMA_Init+0x448>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_DMA_Init+0x38e>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_Init+0x390>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8097 	beq.w	8001828 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <HAL_DMA_Init+0x42c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d021      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <HAL_DMA_Init+0x430>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01c      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a21      	ldr	r2, [pc, #132]	@ (8001798 <HAL_DMA_Init+0x434>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d017      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <HAL_DMA_Init+0x438>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d012      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <HAL_DMA_Init+0x43c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <HAL_DMA_Init+0x440>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d008      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_DMA_Init+0x444>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d003      	beq.n	8001748 <HAL_DMA_Init+0x3e4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_DMA_Init+0x448>)
 8001746:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <HAL_DMA_Init+0x44c>)
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b40      	cmp	r3, #64	@ 0x40
 800176e:	d021      	beq.n	80017b4 <HAL_DMA_Init+0x450>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b80      	cmp	r3, #128	@ 0x80
 8001776:	d102      	bne.n	800177e <HAL_DMA_Init+0x41a>
 8001778:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800177c:	e01b      	b.n	80017b6 <HAL_DMA_Init+0x452>
 800177e:	2300      	movs	r3, #0
 8001780:	e019      	b.n	80017b6 <HAL_DMA_Init+0x452>
 8001782:	bf00      	nop
 8001784:	fe10803f 	.word	0xfe10803f
 8001788:	5c001000 	.word	0x5c001000
 800178c:	ffff0000 	.word	0xffff0000
 8001790:	58025408 	.word	0x58025408
 8001794:	5802541c 	.word	0x5802541c
 8001798:	58025430 	.word	0x58025430
 800179c:	58025444 	.word	0x58025444
 80017a0:	58025458 	.word	0x58025458
 80017a4:	5802546c 	.word	0x5802546c
 80017a8:	58025480 	.word	0x58025480
 80017ac:	58025494 	.word	0x58025494
 80017b0:	fffe000f 	.word	0xfffe000f
 80017b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68d2      	ldr	r2, [r2, #12]
 80017ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b6e      	ldr	r3, [pc, #440]	@ (80019b4 <HAL_DMA_Init+0x650>)
 80017fc:	4413      	add	r3, r2
 80017fe:	4a6e      	ldr	r2, [pc, #440]	@ (80019b8 <HAL_DMA_Init+0x654>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f001 fe97 	bl	8003540 <DMA_CalcBaseAndBitshift>
 8001812:	4603      	mov	r3, r0
 8001814:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2201      	movs	r2, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e008      	b.n	800183a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2240      	movs	r2, #64	@ 0x40
 800182c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0b7      	b.n	80019aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a5f      	ldr	r2, [pc, #380]	@ (80019bc <HAL_DMA_Init+0x658>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d072      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a5d      	ldr	r2, [pc, #372]	@ (80019c0 <HAL_DMA_Init+0x65c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d06d      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5c      	ldr	r2, [pc, #368]	@ (80019c4 <HAL_DMA_Init+0x660>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d068      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5a      	ldr	r2, [pc, #360]	@ (80019c8 <HAL_DMA_Init+0x664>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d063      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a59      	ldr	r2, [pc, #356]	@ (80019cc <HAL_DMA_Init+0x668>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d05e      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a57      	ldr	r2, [pc, #348]	@ (80019d0 <HAL_DMA_Init+0x66c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d059      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a56      	ldr	r2, [pc, #344]	@ (80019d4 <HAL_DMA_Init+0x670>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d054      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a54      	ldr	r2, [pc, #336]	@ (80019d8 <HAL_DMA_Init+0x674>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d04f      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a53      	ldr	r2, [pc, #332]	@ (80019dc <HAL_DMA_Init+0x678>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04a      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a51      	ldr	r2, [pc, #324]	@ (80019e0 <HAL_DMA_Init+0x67c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d045      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a50      	ldr	r2, [pc, #320]	@ (80019e4 <HAL_DMA_Init+0x680>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d040      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4e      	ldr	r2, [pc, #312]	@ (80019e8 <HAL_DMA_Init+0x684>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d03b      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4d      	ldr	r2, [pc, #308]	@ (80019ec <HAL_DMA_Init+0x688>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d036      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a4b      	ldr	r2, [pc, #300]	@ (80019f0 <HAL_DMA_Init+0x68c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d031      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4a      	ldr	r2, [pc, #296]	@ (80019f4 <HAL_DMA_Init+0x690>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d02c      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a48      	ldr	r2, [pc, #288]	@ (80019f8 <HAL_DMA_Init+0x694>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d027      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a47      	ldr	r2, [pc, #284]	@ (80019fc <HAL_DMA_Init+0x698>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d022      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <HAL_DMA_Init+0x69c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01d      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a44      	ldr	r2, [pc, #272]	@ (8001a04 <HAL_DMA_Init+0x6a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d018      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_DMA_Init+0x6a4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a41      	ldr	r2, [pc, #260]	@ (8001a0c <HAL_DMA_Init+0x6a8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00e      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3f      	ldr	r2, [pc, #252]	@ (8001a10 <HAL_DMA_Init+0x6ac>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d009      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a14 <HAL_DMA_Init+0x6b0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_DMA_Init+0x5c6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a3c      	ldr	r2, [pc, #240]	@ (8001a18 <HAL_DMA_Init+0x6b4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_DMA_Init+0x5ca>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_DMA_Init+0x5cc>
 800192e:	2300      	movs	r3, #0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d032      	beq.n	800199a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f001 ff31 	bl	800379c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b80      	cmp	r3, #128	@ 0x80
 8001940:	d102      	bne.n	8001948 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800195c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <HAL_DMA_Init+0x624>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d80c      	bhi.n	8001988 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 ffae 	bl	80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	e008      	b.n	800199a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	a7fdabf8 	.word	0xa7fdabf8
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	40020010 	.word	0x40020010
 80019c0:	40020028 	.word	0x40020028
 80019c4:	40020040 	.word	0x40020040
 80019c8:	40020058 	.word	0x40020058
 80019cc:	40020070 	.word	0x40020070
 80019d0:	40020088 	.word	0x40020088
 80019d4:	400200a0 	.word	0x400200a0
 80019d8:	400200b8 	.word	0x400200b8
 80019dc:	40020410 	.word	0x40020410
 80019e0:	40020428 	.word	0x40020428
 80019e4:	40020440 	.word	0x40020440
 80019e8:	40020458 	.word	0x40020458
 80019ec:	40020470 	.word	0x40020470
 80019f0:	40020488 	.word	0x40020488
 80019f4:	400204a0 	.word	0x400204a0
 80019f8:	400204b8 	.word	0x400204b8
 80019fc:	58025408 	.word	0x58025408
 8001a00:	5802541c 	.word	0x5802541c
 8001a04:	58025430 	.word	0x58025430
 8001a08:	58025444 	.word	0x58025444
 8001a0c:	58025458 	.word	0x58025458
 8001a10:	5802546c 	.word	0x5802546c
 8001a14:	58025480 	.word	0x58025480
 8001a18:	58025494 	.word	0x58025494

08001a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e226      	b.n	8001e86 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_DMA_Start_IT+0x2a>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e21f      	b.n	8001e86 <HAL_DMA_Start_IT+0x46a>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 820a 	bne.w	8001e70 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a68      	ldr	r2, [pc, #416]	@ (8001c10 <HAL_DMA_Start_IT+0x1f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d04a      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	@ (8001c14 <HAL_DMA_Start_IT+0x1f8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d045      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_DMA_Start_IT+0x1fc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d040      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a63      	ldr	r2, [pc, #396]	@ (8001c1c <HAL_DMA_Start_IT+0x200>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d03b      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a62      	ldr	r2, [pc, #392]	@ (8001c20 <HAL_DMA_Start_IT+0x204>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d036      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a60      	ldr	r2, [pc, #384]	@ (8001c24 <HAL_DMA_Start_IT+0x208>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d031      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8001c28 <HAL_DMA_Start_IT+0x20c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d02c      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c2c <HAL_DMA_Start_IT+0x210>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d027      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5c      	ldr	r2, [pc, #368]	@ (8001c30 <HAL_DMA_Start_IT+0x214>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d022      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c34 <HAL_DMA_Start_IT+0x218>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01d      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a59      	ldr	r2, [pc, #356]	@ (8001c38 <HAL_DMA_Start_IT+0x21c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d018      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a57      	ldr	r2, [pc, #348]	@ (8001c3c <HAL_DMA_Start_IT+0x220>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a56      	ldr	r2, [pc, #344]	@ (8001c40 <HAL_DMA_Start_IT+0x224>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00e      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a54      	ldr	r2, [pc, #336]	@ (8001c44 <HAL_DMA_Start_IT+0x228>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d009      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a53      	ldr	r2, [pc, #332]	@ (8001c48 <HAL_DMA_Start_IT+0x22c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d004      	beq.n	8001b0a <HAL_DMA_Start_IT+0xee>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a51      	ldr	r2, [pc, #324]	@ (8001c4c <HAL_DMA_Start_IT+0x230>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d108      	bne.n	8001b1c <HAL_DMA_Start_IT+0x100>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_DMA_Start_IT+0x110>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f001 fb58 	bl	80031e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a34      	ldr	r2, [pc, #208]	@ (8001c10 <HAL_DMA_Start_IT+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d04a      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a33      	ldr	r2, [pc, #204]	@ (8001c14 <HAL_DMA_Start_IT+0x1f8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d045      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <HAL_DMA_Start_IT+0x1fc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a30      	ldr	r2, [pc, #192]	@ (8001c1c <HAL_DMA_Start_IT+0x200>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d03b      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2e      	ldr	r2, [pc, #184]	@ (8001c20 <HAL_DMA_Start_IT+0x204>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c24 <HAL_DMA_Start_IT+0x208>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d031      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2b      	ldr	r2, [pc, #172]	@ (8001c28 <HAL_DMA_Start_IT+0x20c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02c      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2a      	ldr	r2, [pc, #168]	@ (8001c2c <HAL_DMA_Start_IT+0x210>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d027      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <HAL_DMA_Start_IT+0x214>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a27      	ldr	r2, [pc, #156]	@ (8001c34 <HAL_DMA_Start_IT+0x218>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_DMA_Start_IT+0x21c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <HAL_DMA_Start_IT+0x220>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a22      	ldr	r2, [pc, #136]	@ (8001c40 <HAL_DMA_Start_IT+0x224>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <HAL_DMA_Start_IT+0x228>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <HAL_DMA_Start_IT+0x22c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x1bc>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c4c <HAL_DMA_Start_IT+0x230>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Start_IT+0x1c0>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_DMA_Start_IT+0x1c2>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d036      	beq.n	8001c50 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 021e 	bic.w	r2, r3, #30
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0216 	orr.w	r2, r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d03e      	beq.n	8001c7c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0208 	orr.w	r2, r2, #8
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e035      	b.n	8001c7c <HAL_DMA_Start_IT+0x260>
 8001c10:	40020010 	.word	0x40020010
 8001c14:	40020028 	.word	0x40020028
 8001c18:	40020040 	.word	0x40020040
 8001c1c:	40020058 	.word	0x40020058
 8001c20:	40020070 	.word	0x40020070
 8001c24:	40020088 	.word	0x40020088
 8001c28:	400200a0 	.word	0x400200a0
 8001c2c:	400200b8 	.word	0x400200b8
 8001c30:	40020410 	.word	0x40020410
 8001c34:	40020428 	.word	0x40020428
 8001c38:	40020440 	.word	0x40020440
 8001c3c:	40020458 	.word	0x40020458
 8001c40:	40020470 	.word	0x40020470
 8001c44:	40020488 	.word	0x40020488
 8001c48:	400204a0 	.word	0x400204a0
 8001c4c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 020e 	bic.w	r2, r3, #14
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 020a 	orr.w	r2, r2, #10
 8001c62:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0204 	orr.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a83      	ldr	r2, [pc, #524]	@ (8001e90 <HAL_DMA_Start_IT+0x474>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d072      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a82      	ldr	r2, [pc, #520]	@ (8001e94 <HAL_DMA_Start_IT+0x478>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d06d      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a80      	ldr	r2, [pc, #512]	@ (8001e98 <HAL_DMA_Start_IT+0x47c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d068      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7f      	ldr	r2, [pc, #508]	@ (8001e9c <HAL_DMA_Start_IT+0x480>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d063      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea0 <HAL_DMA_Start_IT+0x484>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d05e      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea4 <HAL_DMA_Start_IT+0x488>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d059      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8001ea8 <HAL_DMA_Start_IT+0x48c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d054      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a79      	ldr	r2, [pc, #484]	@ (8001eac <HAL_DMA_Start_IT+0x490>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d04f      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a77      	ldr	r2, [pc, #476]	@ (8001eb0 <HAL_DMA_Start_IT+0x494>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d04a      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a76      	ldr	r2, [pc, #472]	@ (8001eb4 <HAL_DMA_Start_IT+0x498>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d045      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a74      	ldr	r2, [pc, #464]	@ (8001eb8 <HAL_DMA_Start_IT+0x49c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d040      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a73      	ldr	r2, [pc, #460]	@ (8001ebc <HAL_DMA_Start_IT+0x4a0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d03b      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a71      	ldr	r2, [pc, #452]	@ (8001ec0 <HAL_DMA_Start_IT+0x4a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d036      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a70      	ldr	r2, [pc, #448]	@ (8001ec4 <HAL_DMA_Start_IT+0x4a8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d031      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_DMA_Start_IT+0x4ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02c      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6d      	ldr	r2, [pc, #436]	@ (8001ecc <HAL_DMA_Start_IT+0x4b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d027      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed0 <HAL_DMA_Start_IT+0x4b4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d022      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed4 <HAL_DMA_Start_IT+0x4b8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d01d      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a68      	ldr	r2, [pc, #416]	@ (8001ed8 <HAL_DMA_Start_IT+0x4bc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d018      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a67      	ldr	r2, [pc, #412]	@ (8001edc <HAL_DMA_Start_IT+0x4c0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a65      	ldr	r2, [pc, #404]	@ (8001ee0 <HAL_DMA_Start_IT+0x4c4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00e      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a64      	ldr	r2, [pc, #400]	@ (8001ee4 <HAL_DMA_Start_IT+0x4c8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a62      	ldr	r2, [pc, #392]	@ (8001ee8 <HAL_DMA_Start_IT+0x4cc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_DMA_Start_IT+0x350>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a61      	ldr	r2, [pc, #388]	@ (8001eec <HAL_DMA_Start_IT+0x4d0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Start_IT+0x354>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_DMA_Start_IT+0x356>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01a      	beq.n	8001dac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d92:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001daa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a37      	ldr	r2, [pc, #220]	@ (8001e90 <HAL_DMA_Start_IT+0x474>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d04a      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a36      	ldr	r2, [pc, #216]	@ (8001e94 <HAL_DMA_Start_IT+0x478>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d045      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a34      	ldr	r2, [pc, #208]	@ (8001e98 <HAL_DMA_Start_IT+0x47c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d040      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a33      	ldr	r2, [pc, #204]	@ (8001e9c <HAL_DMA_Start_IT+0x480>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d03b      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a31      	ldr	r2, [pc, #196]	@ (8001ea0 <HAL_DMA_Start_IT+0x484>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d036      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a30      	ldr	r2, [pc, #192]	@ (8001ea4 <HAL_DMA_Start_IT+0x488>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d031      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea8 <HAL_DMA_Start_IT+0x48c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02c      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <HAL_DMA_Start_IT+0x490>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d027      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_DMA_Start_IT+0x494>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d022      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb4 <HAL_DMA_Start_IT+0x498>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d01d      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a28      	ldr	r2, [pc, #160]	@ (8001eb8 <HAL_DMA_Start_IT+0x49c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <HAL_DMA_Start_IT+0x4a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <HAL_DMA_Start_IT+0x4a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <HAL_DMA_Start_IT+0x4a8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ec8 <HAL_DMA_Start_IT+0x4ac>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_DMA_Start_IT+0x430>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <HAL_DMA_Start_IT+0x4b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <HAL_DMA_Start_IT+0x442>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e012      	b.n	8001e84 <HAL_DMA_Start_IT+0x468>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e009      	b.n	8001e84 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020010 	.word	0x40020010
 8001e94:	40020028 	.word	0x40020028
 8001e98:	40020040 	.word	0x40020040
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	40020070 	.word	0x40020070
 8001ea4:	40020088 	.word	0x40020088
 8001ea8:	400200a0 	.word	0x400200a0
 8001eac:	400200b8 	.word	0x400200b8
 8001eb0:	40020410 	.word	0x40020410
 8001eb4:	40020428 	.word	0x40020428
 8001eb8:	40020440 	.word	0x40020440
 8001ebc:	40020458 	.word	0x40020458
 8001ec0:	40020470 	.word	0x40020470
 8001ec4:	40020488 	.word	0x40020488
 8001ec8:	400204a0 	.word	0x400204a0
 8001ecc:	400204b8 	.word	0x400204b8
 8001ed0:	58025408 	.word	0x58025408
 8001ed4:	5802541c 	.word	0x5802541c
 8001ed8:	58025430 	.word	0x58025430
 8001edc:	58025444 	.word	0x58025444
 8001ee0:	58025458 	.word	0x58025458
 8001ee4:	5802546c 	.word	0x5802546c
 8001ee8:	58025480 	.word	0x58025480
 8001eec:	58025494 	.word	0x58025494

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e237      	b.n	8002372 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e22c      	b.n	8002372 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002090 <HAL_DMA_Abort_IT+0x1a0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d04a      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_DMA_Abort_IT+0x1a4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d045      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a59      	ldr	r2, [pc, #356]	@ (8002098 <HAL_DMA_Abort_IT+0x1a8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d040      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a58      	ldr	r2, [pc, #352]	@ (800209c <HAL_DMA_Abort_IT+0x1ac>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d03b      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a56      	ldr	r2, [pc, #344]	@ (80020a0 <HAL_DMA_Abort_IT+0x1b0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d036      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a55      	ldr	r2, [pc, #340]	@ (80020a4 <HAL_DMA_Abort_IT+0x1b4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d031      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a53      	ldr	r2, [pc, #332]	@ (80020a8 <HAL_DMA_Abort_IT+0x1b8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02c      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a52      	ldr	r2, [pc, #328]	@ (80020ac <HAL_DMA_Abort_IT+0x1bc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d027      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a50      	ldr	r2, [pc, #320]	@ (80020b0 <HAL_DMA_Abort_IT+0x1c0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d022      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4f      	ldr	r2, [pc, #316]	@ (80020b4 <HAL_DMA_Abort_IT+0x1c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d01d      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a4d      	ldr	r2, [pc, #308]	@ (80020b8 <HAL_DMA_Abort_IT+0x1c8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d018      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4c      	ldr	r2, [pc, #304]	@ (80020bc <HAL_DMA_Abort_IT+0x1cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4a      	ldr	r2, [pc, #296]	@ (80020c0 <HAL_DMA_Abort_IT+0x1d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00e      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a49      	ldr	r2, [pc, #292]	@ (80020c4 <HAL_DMA_Abort_IT+0x1d4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a47      	ldr	r2, [pc, #284]	@ (80020c8 <HAL_DMA_Abort_IT+0x1d8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a46      	ldr	r2, [pc, #280]	@ (80020cc <HAL_DMA_Abort_IT+0x1dc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Abort_IT+0xcc>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_DMA_Abort_IT+0xce>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8086 	beq.w	80020d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <HAL_DMA_Abort_IT+0x1a0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d04a      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <HAL_DMA_Abort_IT+0x1a4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d045      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8002098 <HAL_DMA_Abort_IT+0x1a8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d040      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <HAL_DMA_Abort_IT+0x1ac>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d03b      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	@ (80020a0 <HAL_DMA_Abort_IT+0x1b0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d036      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a28      	ldr	r2, [pc, #160]	@ (80020a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d031      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <HAL_DMA_Abort_IT+0x1b8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02c      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <HAL_DMA_Abort_IT+0x1bc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d027      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	@ (80020b0 <HAL_DMA_Abort_IT+0x1c0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d022      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <HAL_DMA_Abort_IT+0x1c4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d01d      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a20      	ldr	r2, [pc, #128]	@ (80020b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d018      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <HAL_DMA_Abort_IT+0x1cc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <HAL_DMA_Abort_IT+0x1d0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00e      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_DMA_Abort_IT+0x1d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d009      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <HAL_DMA_Abort_IT+0x1d8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_DMA_Abort_IT+0x17c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a19      	ldr	r2, [pc, #100]	@ (80020cc <HAL_DMA_Abort_IT+0x1dc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <HAL_DMA_Abort_IT+0x18e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e178      	b.n	8002370 <HAL_DMA_Abort_IT+0x480>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e16f      	b.n	8002370 <HAL_DMA_Abort_IT+0x480>
 8002090:	40020010 	.word	0x40020010
 8002094:	40020028 	.word	0x40020028
 8002098:	40020040 	.word	0x40020040
 800209c:	40020058 	.word	0x40020058
 80020a0:	40020070 	.word	0x40020070
 80020a4:	40020088 	.word	0x40020088
 80020a8:	400200a0 	.word	0x400200a0
 80020ac:	400200b8 	.word	0x400200b8
 80020b0:	40020410 	.word	0x40020410
 80020b4:	40020428 	.word	0x40020428
 80020b8:	40020440 	.word	0x40020440
 80020bc:	40020458 	.word	0x40020458
 80020c0:	40020470 	.word	0x40020470
 80020c4:	40020488 	.word	0x40020488
 80020c8:	400204a0 	.word	0x400204a0
 80020cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020e 	bic.w	r2, r2, #14
 80020de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002298 <HAL_DMA_Abort_IT+0x3a8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04a      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6b      	ldr	r2, [pc, #428]	@ (800229c <HAL_DMA_Abort_IT+0x3ac>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d045      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a69      	ldr	r2, [pc, #420]	@ (80022a0 <HAL_DMA_Abort_IT+0x3b0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d040      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a68      	ldr	r2, [pc, #416]	@ (80022a4 <HAL_DMA_Abort_IT+0x3b4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d03b      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a66      	ldr	r2, [pc, #408]	@ (80022a8 <HAL_DMA_Abort_IT+0x3b8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d036      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a65      	ldr	r2, [pc, #404]	@ (80022ac <HAL_DMA_Abort_IT+0x3bc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d031      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a63      	ldr	r2, [pc, #396]	@ (80022b0 <HAL_DMA_Abort_IT+0x3c0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02c      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a62      	ldr	r2, [pc, #392]	@ (80022b4 <HAL_DMA_Abort_IT+0x3c4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d027      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a60      	ldr	r2, [pc, #384]	@ (80022b8 <HAL_DMA_Abort_IT+0x3c8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d022      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_DMA_Abort_IT+0x3cc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d01d      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	@ (80022c0 <HAL_DMA_Abort_IT+0x3d0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	@ (80022c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	@ (80022c8 <HAL_DMA_Abort_IT+0x3d8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	@ (80022cc <HAL_DMA_Abort_IT+0x3dc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_DMA_Abort_IT+0x290>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_DMA_Abort_IT+0x3e4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d108      	bne.n	8002192 <HAL_DMA_Abort_IT+0x2a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e007      	b.n	80021a2 <HAL_DMA_Abort_IT+0x2b2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002298 <HAL_DMA_Abort_IT+0x3a8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d072      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3a      	ldr	r2, [pc, #232]	@ (800229c <HAL_DMA_Abort_IT+0x3ac>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d06d      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a39      	ldr	r2, [pc, #228]	@ (80022a0 <HAL_DMA_Abort_IT+0x3b0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d068      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a37      	ldr	r2, [pc, #220]	@ (80022a4 <HAL_DMA_Abort_IT+0x3b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d063      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a36      	ldr	r2, [pc, #216]	@ (80022a8 <HAL_DMA_Abort_IT+0x3b8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d05e      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a34      	ldr	r2, [pc, #208]	@ (80022ac <HAL_DMA_Abort_IT+0x3bc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d059      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a33      	ldr	r2, [pc, #204]	@ (80022b0 <HAL_DMA_Abort_IT+0x3c0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d054      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a31      	ldr	r2, [pc, #196]	@ (80022b4 <HAL_DMA_Abort_IT+0x3c4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04f      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a30      	ldr	r2, [pc, #192]	@ (80022b8 <HAL_DMA_Abort_IT+0x3c8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04a      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2e      	ldr	r2, [pc, #184]	@ (80022bc <HAL_DMA_Abort_IT+0x3cc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d045      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <HAL_DMA_Abort_IT+0x3d0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d040      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d03b      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2a      	ldr	r2, [pc, #168]	@ (80022c8 <HAL_DMA_Abort_IT+0x3d8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d036      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a28      	ldr	r2, [pc, #160]	@ (80022cc <HAL_DMA_Abort_IT+0x3dc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d031      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a27      	ldr	r2, [pc, #156]	@ (80022d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d02c      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <HAL_DMA_Abort_IT+0x3e4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d027      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a24      	ldr	r2, [pc, #144]	@ (80022d8 <HAL_DMA_Abort_IT+0x3e8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <HAL_DMA_Abort_IT+0x3ec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01d      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <HAL_DMA_Abort_IT+0x3f0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d018      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1f      	ldr	r2, [pc, #124]	@ (80022e4 <HAL_DMA_Abort_IT+0x3f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_DMA_Abort_IT+0x3f8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00e      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <HAL_DMA_Abort_IT+0x3fc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d009      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_DMA_Abort_IT+0x400>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d004      	beq.n	8002292 <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	@ (80022f4 <HAL_DMA_Abort_IT+0x404>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d132      	bne.n	80022f8 <HAL_DMA_Abort_IT+0x408>
 8002292:	2301      	movs	r3, #1
 8002294:	e031      	b.n	80022fa <HAL_DMA_Abort_IT+0x40a>
 8002296:	bf00      	nop
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
 80022d8:	58025408 	.word	0x58025408
 80022dc:	5802541c 	.word	0x5802541c
 80022e0:	58025430 	.word	0x58025430
 80022e4:	58025444 	.word	0x58025444
 80022e8:	58025458 	.word	0x58025458
 80022ec:	5802546c 	.word	0x5802546c
 80022f0:	58025480 	.word	0x58025480
 80022f4:	58025494 	.word	0x58025494
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d028      	beq.n	8002350 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800230c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2201      	movs	r2, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800232c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002344:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800234e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop

0800237c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002388:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <HAL_DMA_IRQHandler+0x1ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a67      	ldr	r2, [pc, #412]	@ (800252c <HAL_DMA_IRQHandler+0x1b0>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002530 <HAL_DMA_IRQHandler+0x1b4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04a      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_DMA_IRQHandler+0x1b8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d045      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002538 <HAL_DMA_IRQHandler+0x1bc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d040      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5a      	ldr	r2, [pc, #360]	@ (800253c <HAL_DMA_IRQHandler+0x1c0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d03b      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a59      	ldr	r2, [pc, #356]	@ (8002540 <HAL_DMA_IRQHandler+0x1c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d036      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a57      	ldr	r2, [pc, #348]	@ (8002544 <HAL_DMA_IRQHandler+0x1c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a56      	ldr	r2, [pc, #344]	@ (8002548 <HAL_DMA_IRQHandler+0x1cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d02c      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a54      	ldr	r2, [pc, #336]	@ (800254c <HAL_DMA_IRQHandler+0x1d0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d027      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a53      	ldr	r2, [pc, #332]	@ (8002550 <HAL_DMA_IRQHandler+0x1d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a51      	ldr	r2, [pc, #324]	@ (8002554 <HAL_DMA_IRQHandler+0x1d8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a50      	ldr	r2, [pc, #320]	@ (8002558 <HAL_DMA_IRQHandler+0x1dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d018      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4e      	ldr	r2, [pc, #312]	@ (800255c <HAL_DMA_IRQHandler+0x1e0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4d      	ldr	r2, [pc, #308]	@ (8002560 <HAL_DMA_IRQHandler+0x1e4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4b      	ldr	r2, [pc, #300]	@ (8002564 <HAL_DMA_IRQHandler+0x1e8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4a      	ldr	r2, [pc, #296]	@ (8002568 <HAL_DMA_IRQHandler+0x1ec>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_DMA_IRQHandler+0xd2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a48      	ldr	r2, [pc, #288]	@ (800256c <HAL_DMA_IRQHandler+0x1f0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_DMA_IRQHandler+0xd6>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0xd8>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 842b 	beq.w	8002cb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2208      	movs	r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a2 	beq.w	80025b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2e      	ldr	r2, [pc, #184]	@ (8002530 <HAL_DMA_IRQHandler+0x1b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d04a      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	@ (8002534 <HAL_DMA_IRQHandler+0x1b8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d045      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <HAL_DMA_IRQHandler+0x1bc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d040      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	@ (800253c <HAL_DMA_IRQHandler+0x1c0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d03b      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a28      	ldr	r2, [pc, #160]	@ (8002540 <HAL_DMA_IRQHandler+0x1c4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d036      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_DMA_IRQHandler+0x1c8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d031      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a25      	ldr	r2, [pc, #148]	@ (8002548 <HAL_DMA_IRQHandler+0x1cc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02c      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	@ (800254c <HAL_DMA_IRQHandler+0x1d0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d027      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <HAL_DMA_IRQHandler+0x1d4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d022      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <HAL_DMA_IRQHandler+0x1d8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01d      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002558 <HAL_DMA_IRQHandler+0x1dc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d018      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_DMA_IRQHandler+0x1e0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002560 <HAL_DMA_IRQHandler+0x1e4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00e      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002564 <HAL_DMA_IRQHandler+0x1e8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	@ (8002568 <HAL_DMA_IRQHandler+0x1ec>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_IRQHandler+0x194>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a18      	ldr	r2, [pc, #96]	@ (800256c <HAL_DMA_IRQHandler+0x1f0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d12f      	bne.n	8002570 <HAL_DMA_IRQHandler+0x1f4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e02e      	b.n	8002584 <HAL_DMA_IRQHandler+0x208>
 8002526:	bf00      	nop
 8002528:	24000000 	.word	0x24000000
 800252c:	1b4e81b5 	.word	0x1b4e81b5
 8002530:	40020010 	.word	0x40020010
 8002534:	40020028 	.word	0x40020028
 8002538:	40020040 	.word	0x40020040
 800253c:	40020058 	.word	0x40020058
 8002540:	40020070 	.word	0x40020070
 8002544:	40020088 	.word	0x40020088
 8002548:	400200a0 	.word	0x400200a0
 800254c:	400200b8 	.word	0x400200b8
 8002550:	40020410 	.word	0x40020410
 8002554:	40020428 	.word	0x40020428
 8002558:	40020440 	.word	0x40020440
 800255c:	40020458 	.word	0x40020458
 8002560:	40020470 	.word	0x40020470
 8002564:	40020488 	.word	0x40020488
 8002568:	400204a0 	.word	0x400204a0
 800256c:	400204b8 	.word	0x400204b8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2208      	movs	r2, #8
 80025a2:	409a      	lsls	r2, r3
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d06e      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a69      	ldr	r2, [pc, #420]	@ (8002774 <HAL_DMA_IRQHandler+0x3f8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04a      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a67      	ldr	r2, [pc, #412]	@ (8002778 <HAL_DMA_IRQHandler+0x3fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d045      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a66      	ldr	r2, [pc, #408]	@ (800277c <HAL_DMA_IRQHandler+0x400>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d040      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a64      	ldr	r2, [pc, #400]	@ (8002780 <HAL_DMA_IRQHandler+0x404>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d03b      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a63      	ldr	r2, [pc, #396]	@ (8002784 <HAL_DMA_IRQHandler+0x408>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d036      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <HAL_DMA_IRQHandler+0x40c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a60      	ldr	r2, [pc, #384]	@ (800278c <HAL_DMA_IRQHandler+0x410>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d02c      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_DMA_IRQHandler+0x414>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_DMA_IRQHandler+0x418>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d022      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5b      	ldr	r2, [pc, #364]	@ (8002798 <HAL_DMA_IRQHandler+0x41c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01d      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_DMA_IRQHandler+0x420>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d018      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_DMA_IRQHandler+0x424>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_DMA_IRQHandler+0x428>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a55      	ldr	r2, [pc, #340]	@ (80027a8 <HAL_DMA_IRQHandler+0x42c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a54      	ldr	r2, [pc, #336]	@ (80027ac <HAL_DMA_IRQHandler+0x430>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_DMA_IRQHandler+0x2ee>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_DMA_IRQHandler+0x434>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10a      	bne.n	8002680 <HAL_DMA_IRQHandler+0x304>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e003      	b.n	8002688 <HAL_DMA_IRQHandler+0x30c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0202 	orr.w	r2, r3, #2
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 808f 	beq.w	80027dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002774 <HAL_DMA_IRQHandler+0x3f8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04a      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002778 <HAL_DMA_IRQHandler+0x3fc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d045      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a29      	ldr	r2, [pc, #164]	@ (800277c <HAL_DMA_IRQHandler+0x400>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d040      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <HAL_DMA_IRQHandler+0x404>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03b      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <HAL_DMA_IRQHandler+0x408>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d036      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_DMA_IRQHandler+0x40c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d031      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a23      	ldr	r2, [pc, #140]	@ (800278c <HAL_DMA_IRQHandler+0x410>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d02c      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_DMA_IRQHandler+0x414>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d027      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a20      	ldr	r2, [pc, #128]	@ (8002794 <HAL_DMA_IRQHandler+0x418>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <HAL_DMA_IRQHandler+0x41c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_DMA_IRQHandler+0x420>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_DMA_IRQHandler+0x424>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_DMA_IRQHandler+0x428>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <HAL_DMA_IRQHandler+0x42c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_DMA_IRQHandler+0x430>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_IRQHandler+0x3e2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_DMA_IRQHandler+0x434>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12a      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x438>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e023      	b.n	80027bc <HAL_DMA_IRQHandler+0x440>
 8002774:	40020010 	.word	0x40020010
 8002778:	40020028 	.word	0x40020028
 800277c:	40020040 	.word	0x40020040
 8002780:	40020058 	.word	0x40020058
 8002784:	40020070 	.word	0x40020070
 8002788:	40020088 	.word	0x40020088
 800278c:	400200a0 	.word	0x400200a0
 8002790:	400200b8 	.word	0x400200b8
 8002794:	40020410 	.word	0x40020410
 8002798:	40020428 	.word	0x40020428
 800279c:	40020440 	.word	0x40020440
 80027a0:	40020458 	.word	0x40020458
 80027a4:	40020470 	.word	0x40020470
 80027a8:	40020488 	.word	0x40020488
 80027ac:	400204a0 	.word	0x400204a0
 80027b0:	400204b8 	.word	0x400204b8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2204      	movs	r2, #4
 80027ca:	409a      	lsls	r2, r3
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2210      	movs	r2, #16
 80027e6:	409a      	lsls	r2, r3
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a6 	beq.w	800293e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a85      	ldr	r2, [pc, #532]	@ (8002a0c <HAL_DMA_IRQHandler+0x690>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d04a      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	@ (8002a10 <HAL_DMA_IRQHandler+0x694>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d045      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a82      	ldr	r2, [pc, #520]	@ (8002a14 <HAL_DMA_IRQHandler+0x698>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d040      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a80      	ldr	r2, [pc, #512]	@ (8002a18 <HAL_DMA_IRQHandler+0x69c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d03b      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <HAL_DMA_IRQHandler+0x6a0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d036      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7d      	ldr	r2, [pc, #500]	@ (8002a20 <HAL_DMA_IRQHandler+0x6a4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7c      	ldr	r2, [pc, #496]	@ (8002a24 <HAL_DMA_IRQHandler+0x6a8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d02c      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a28 <HAL_DMA_IRQHandler+0x6ac>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d027      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	@ (8002a2c <HAL_DMA_IRQHandler+0x6b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a77      	ldr	r2, [pc, #476]	@ (8002a30 <HAL_DMA_IRQHandler+0x6b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a76      	ldr	r2, [pc, #472]	@ (8002a34 <HAL_DMA_IRQHandler+0x6b8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d018      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a74      	ldr	r2, [pc, #464]	@ (8002a38 <HAL_DMA_IRQHandler+0x6bc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	@ (8002a3c <HAL_DMA_IRQHandler+0x6c0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a71      	ldr	r2, [pc, #452]	@ (8002a40 <HAL_DMA_IRQHandler+0x6c4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a70      	ldr	r2, [pc, #448]	@ (8002a44 <HAL_DMA_IRQHandler+0x6c8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_DMA_IRQHandler+0x516>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_DMA_IRQHandler+0x6cc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10a      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x52c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e009      	b.n	80028bc <HAL_DMA_IRQHandler+0x540>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03e      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2210      	movs	r2, #16
 80028ca:	409a      	lsls	r2, r3
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e01f      	b.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01b      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e016      	b.n	800293e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0208 	bic.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2220      	movs	r2, #32
 8002948:	409a      	lsls	r2, r3
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8110 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <HAL_DMA_IRQHandler+0x690>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04a      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <HAL_DMA_IRQHandler+0x694>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d045      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a29      	ldr	r2, [pc, #164]	@ (8002a14 <HAL_DMA_IRQHandler+0x698>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d040      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a28      	ldr	r2, [pc, #160]	@ (8002a18 <HAL_DMA_IRQHandler+0x69c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d03b      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a26      	ldr	r2, [pc, #152]	@ (8002a1c <HAL_DMA_IRQHandler+0x6a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d036      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a25      	ldr	r2, [pc, #148]	@ (8002a20 <HAL_DMA_IRQHandler+0x6a4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d031      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	@ (8002a24 <HAL_DMA_IRQHandler+0x6a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02c      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <HAL_DMA_IRQHandler+0x6ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d027      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a20      	ldr	r2, [pc, #128]	@ (8002a2c <HAL_DMA_IRQHandler+0x6b0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d022      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <HAL_DMA_IRQHandler+0x6b4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a34 <HAL_DMA_IRQHandler+0x6b8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <HAL_DMA_IRQHandler+0x6bc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a3c <HAL_DMA_IRQHandler+0x6c0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_DMA_IRQHandler+0x6c4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_DMA_IRQHandler+0x6c8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x678>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <HAL_DMA_IRQHandler+0x6cc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12b      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x6d0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e02a      	b.n	8002a60 <HAL_DMA_IRQHandler+0x6e4>
 8002a0a:	bf00      	nop
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8087 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2220      	movs	r2, #32
 8002a70:	409a      	lsls	r2, r3
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d139      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x736>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	223f      	movs	r2, #63	@ 0x3f
 8002acc:	409a      	lsls	r2, r3
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 834a 	beq.w	8003180 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
          }
          return;
 8002af4:	e344      	b.n	8003180 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d018      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e027      	b.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e01e      	b.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0210 	bic.w	r2, r2, #16
 8002b52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8306 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8088 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7a      	ldr	r2, [pc, #488]	@ (8002d84 <HAL_DMA_IRQHandler+0xa08>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d04a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a79      	ldr	r2, [pc, #484]	@ (8002d88 <HAL_DMA_IRQHandler+0xa0c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d045      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a77      	ldr	r2, [pc, #476]	@ (8002d8c <HAL_DMA_IRQHandler+0xa10>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a76      	ldr	r2, [pc, #472]	@ (8002d90 <HAL_DMA_IRQHandler+0xa14>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d03b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a74      	ldr	r2, [pc, #464]	@ (8002d94 <HAL_DMA_IRQHandler+0xa18>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d036      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a73      	ldr	r2, [pc, #460]	@ (8002d98 <HAL_DMA_IRQHandler+0xa1c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d031      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a71      	ldr	r2, [pc, #452]	@ (8002d9c <HAL_DMA_IRQHandler+0xa20>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02c      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a70      	ldr	r2, [pc, #448]	@ (8002da0 <HAL_DMA_IRQHandler+0xa24>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d027      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a6e      	ldr	r2, [pc, #440]	@ (8002da4 <HAL_DMA_IRQHandler+0xa28>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8002da8 <HAL_DMA_IRQHandler+0xa2c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01d      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8002dac <HAL_DMA_IRQHandler+0xa30>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6a      	ldr	r2, [pc, #424]	@ (8002db0 <HAL_DMA_IRQHandler+0xa34>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a68      	ldr	r2, [pc, #416]	@ (8002db4 <HAL_DMA_IRQHandler+0xa38>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a67      	ldr	r2, [pc, #412]	@ (8002db8 <HAL_DMA_IRQHandler+0xa3c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a65      	ldr	r2, [pc, #404]	@ (8002dbc <HAL_DMA_IRQHandler+0xa40>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x8b8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a64      	ldr	r2, [pc, #400]	@ (8002dc0 <HAL_DMA_IRQHandler+0xa44>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x8ca>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_DMA_IRQHandler+0x8da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d307      	bcc.n	8002c72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x8da>
 8002c70:	e000      	b.n	8002c74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002c72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2203      	movs	r2, #3
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c8a:	e003      	b.n	8002c94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8272 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	e26c      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a43      	ldr	r2, [pc, #268]	@ (8002dc4 <HAL_DMA_IRQHandler+0xa48>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d022      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a42      	ldr	r2, [pc, #264]	@ (8002dc8 <HAL_DMA_IRQHandler+0xa4c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01d      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a40      	ldr	r2, [pc, #256]	@ (8002dcc <HAL_DMA_IRQHandler+0xa50>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd0 <HAL_DMA_IRQHandler+0xa54>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <HAL_DMA_IRQHandler+0xa58>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd8 <HAL_DMA_IRQHandler+0xa5c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ddc <HAL_DMA_IRQHandler+0xa60>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x984>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a39      	ldr	r2, [pc, #228]	@ (8002de0 <HAL_DMA_IRQHandler+0xa64>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x988>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x98a>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 823f 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80cd 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0xb48>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80c7 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2204      	movs	r2, #4
 8002d40:	409a      	lsls	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d049      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8210 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d6c:	e20a      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8206 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d80:	e200      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
 8002d82:	bf00      	nop
 8002d84:	40020010 	.word	0x40020010
 8002d88:	40020028 	.word	0x40020028
 8002d8c:	40020040 	.word	0x40020040
 8002d90:	40020058 	.word	0x40020058
 8002d94:	40020070 	.word	0x40020070
 8002d98:	40020088 	.word	0x40020088
 8002d9c:	400200a0 	.word	0x400200a0
 8002da0:	400200b8 	.word	0x400200b8
 8002da4:	40020410 	.word	0x40020410
 8002da8:	40020428 	.word	0x40020428
 8002dac:	40020440 	.word	0x40020440
 8002db0:	40020458 	.word	0x40020458
 8002db4:	40020470 	.word	0x40020470
 8002db8:	40020488 	.word	0x40020488
 8002dbc:	400204a0 	.word	0x400204a0
 8002dc0:	400204b8 	.word	0x400204b8
 8002dc4:	58025408 	.word	0x58025408
 8002dc8:	5802541c 	.word	0x5802541c
 8002dcc:	58025430 	.word	0x58025430
 8002dd0:	58025444 	.word	0x58025444
 8002dd4:	58025458 	.word	0x58025458
 8002dd8:	5802546c 	.word	0x5802546c
 8002ddc:	58025480 	.word	0x58025480
 8002de0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d160      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff0 <HAL_DMA_IRQHandler+0xc74>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04a      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7d      	ldr	r2, [pc, #500]	@ (8002ff4 <HAL_DMA_IRQHandler+0xc78>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d045      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff8 <HAL_DMA_IRQHandler+0xc7c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d040      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a7a      	ldr	r2, [pc, #488]	@ (8002ffc <HAL_DMA_IRQHandler+0xc80>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a79      	ldr	r2, [pc, #484]	@ (8003000 <HAL_DMA_IRQHandler+0xc84>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d036      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a77      	ldr	r2, [pc, #476]	@ (8003004 <HAL_DMA_IRQHandler+0xc88>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a76      	ldr	r2, [pc, #472]	@ (8003008 <HAL_DMA_IRQHandler+0xc8c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d02c      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a74      	ldr	r2, [pc, #464]	@ (800300c <HAL_DMA_IRQHandler+0xc90>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a73      	ldr	r2, [pc, #460]	@ (8003010 <HAL_DMA_IRQHandler+0xc94>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a71      	ldr	r2, [pc, #452]	@ (8003014 <HAL_DMA_IRQHandler+0xc98>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a70      	ldr	r2, [pc, #448]	@ (8003018 <HAL_DMA_IRQHandler+0xc9c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6e      	ldr	r2, [pc, #440]	@ (800301c <HAL_DMA_IRQHandler+0xca0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003020 <HAL_DMA_IRQHandler+0xca4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6b      	ldr	r2, [pc, #428]	@ (8003024 <HAL_DMA_IRQHandler+0xca8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003028 <HAL_DMA_IRQHandler+0xcac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xb12>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a68      	ldr	r2, [pc, #416]	@ (800302c <HAL_DMA_IRQHandler+0xcb0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0xb24>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e007      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb34>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8165 	beq.w	8003184 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ec2:	e15f      	b.n	8003184 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2202      	movs	r2, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80c5 	beq.w	8003064 <HAL_DMA_IRQHandler+0xce8>
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80bf 	beq.w	8003064 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2202      	movs	r2, #2
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 813a 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f1c:	e134      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8130 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f30:	e12a      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 8089 	bne.w	8003050 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <HAL_DMA_IRQHandler+0xc74>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ff4 <HAL_DMA_IRQHandler+0xc78>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_DMA_IRQHandler+0xc7c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_DMA_IRQHandler+0xc80>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <HAL_DMA_IRQHandler+0xc84>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a23      	ldr	r2, [pc, #140]	@ (8003004 <HAL_DMA_IRQHandler+0xc88>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_DMA_IRQHandler+0xc8c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a20      	ldr	r2, [pc, #128]	@ (800300c <HAL_DMA_IRQHandler+0xc90>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <HAL_DMA_IRQHandler+0xc94>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003014 <HAL_DMA_IRQHandler+0xc98>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <HAL_DMA_IRQHandler+0xc9c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800301c <HAL_DMA_IRQHandler+0xca0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a19      	ldr	r2, [pc, #100]	@ (8003020 <HAL_DMA_IRQHandler+0xca4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <HAL_DMA_IRQHandler+0xca8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	@ (8003028 <HAL_DMA_IRQHandler+0xcac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_IRQHandler+0xc62>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a14      	ldr	r2, [pc, #80]	@ (800302c <HAL_DMA_IRQHandler+0xcb0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d128      	bne.n	8003030 <HAL_DMA_IRQHandler+0xcb4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0214 	bic.w	r2, r2, #20
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e027      	b.n	8003040 <HAL_DMA_IRQHandler+0xcc4>
 8002ff0:	40020010 	.word	0x40020010
 8002ff4:	40020028 	.word	0x40020028
 8002ff8:	40020040 	.word	0x40020040
 8002ffc:	40020058 	.word	0x40020058
 8003000:	40020070 	.word	0x40020070
 8003004:	40020088 	.word	0x40020088
 8003008:	400200a0 	.word	0x400200a0
 800300c:	400200b8 	.word	0x400200b8
 8003010:	40020410 	.word	0x40020410
 8003014:	40020428 	.word	0x40020428
 8003018:	40020440 	.word	0x40020440
 800301c:	40020458 	.word	0x40020458
 8003020:	40020470 	.word	0x40020470
 8003024:	40020488 	.word	0x40020488
 8003028:	400204a0 	.word	0x400204a0
 800302c:	400204b8 	.word	0x400204b8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 020a 	bic.w	r2, r2, #10
 800303e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003062:	e091      	b.n	8003188 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8088 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8082 	beq.w	800318a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a41      	ldr	r2, [pc, #260]	@ (8003190 <HAL_DMA_IRQHandler+0xe14>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04a      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3f      	ldr	r2, [pc, #252]	@ (8003194 <HAL_DMA_IRQHandler+0xe18>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d045      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3e      	ldr	r2, [pc, #248]	@ (8003198 <HAL_DMA_IRQHandler+0xe1c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d040      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3c      	ldr	r2, [pc, #240]	@ (800319c <HAL_DMA_IRQHandler+0xe20>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d03b      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_DMA_IRQHandler+0xe24>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d036      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a39      	ldr	r2, [pc, #228]	@ (80031a4 <HAL_DMA_IRQHandler+0xe28>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a38      	ldr	r2, [pc, #224]	@ (80031a8 <HAL_DMA_IRQHandler+0xe2c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d02c      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a36      	ldr	r2, [pc, #216]	@ (80031ac <HAL_DMA_IRQHandler+0xe30>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d027      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <HAL_DMA_IRQHandler+0xe34>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a33      	ldr	r2, [pc, #204]	@ (80031b4 <HAL_DMA_IRQHandler+0xe38>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a32      	ldr	r2, [pc, #200]	@ (80031b8 <HAL_DMA_IRQHandler+0xe3c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <HAL_DMA_IRQHandler+0xe40>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2f      	ldr	r2, [pc, #188]	@ (80031c0 <HAL_DMA_IRQHandler+0xe44>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2d      	ldr	r2, [pc, #180]	@ (80031c4 <HAL_DMA_IRQHandler+0xe48>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <HAL_DMA_IRQHandler+0xe4c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_IRQHandler+0xdaa>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	@ (80031cc <HAL_DMA_IRQHandler+0xe50>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <HAL_DMA_IRQHandler+0xdbc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 021c 	bic.w	r2, r2, #28
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <HAL_DMA_IRQHandler+0xdcc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e004      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003180:	bf00      	nop
 8003182:	e002      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003188:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800318a:	3728      	adds	r7, #40	@ 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8

080031d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7f      	ldr	r2, [pc, #508]	@ (8003404 <DMA_SetConfig+0x21c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d072      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7d      	ldr	r2, [pc, #500]	@ (8003408 <DMA_SetConfig+0x220>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d06d      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7c      	ldr	r2, [pc, #496]	@ (800340c <DMA_SetConfig+0x224>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d068      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a7a      	ldr	r2, [pc, #488]	@ (8003410 <DMA_SetConfig+0x228>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d063      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a79      	ldr	r2, [pc, #484]	@ (8003414 <DMA_SetConfig+0x22c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d05e      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a77      	ldr	r2, [pc, #476]	@ (8003418 <DMA_SetConfig+0x230>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d059      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a76      	ldr	r2, [pc, #472]	@ (800341c <DMA_SetConfig+0x234>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d054      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a74      	ldr	r2, [pc, #464]	@ (8003420 <DMA_SetConfig+0x238>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04f      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	@ (8003424 <DMA_SetConfig+0x23c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d04a      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a71      	ldr	r2, [pc, #452]	@ (8003428 <DMA_SetConfig+0x240>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d045      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a70      	ldr	r2, [pc, #448]	@ (800342c <DMA_SetConfig+0x244>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d040      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	@ (8003430 <DMA_SetConfig+0x248>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d03b      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6d      	ldr	r2, [pc, #436]	@ (8003434 <DMA_SetConfig+0x24c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d036      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	@ (8003438 <DMA_SetConfig+0x250>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d031      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6a      	ldr	r2, [pc, #424]	@ (800343c <DMA_SetConfig+0x254>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d02c      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <DMA_SetConfig+0x258>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d027      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a67      	ldr	r2, [pc, #412]	@ (8003444 <DMA_SetConfig+0x25c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <DMA_SetConfig+0x260>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a64      	ldr	r2, [pc, #400]	@ (800344c <DMA_SetConfig+0x264>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a62      	ldr	r2, [pc, #392]	@ (8003450 <DMA_SetConfig+0x268>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a61      	ldr	r2, [pc, #388]	@ (8003454 <DMA_SetConfig+0x26c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003458 <DMA_SetConfig+0x270>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5e      	ldr	r2, [pc, #376]	@ (800345c <DMA_SetConfig+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <DMA_SetConfig+0x10a>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003460 <DMA_SetConfig+0x278>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <DMA_SetConfig+0x10e>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <DMA_SetConfig+0x110>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003304:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003316:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <DMA_SetConfig+0x21c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04a      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <DMA_SetConfig+0x220>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d045      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a36      	ldr	r2, [pc, #216]	@ (800340c <DMA_SetConfig+0x224>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d040      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <DMA_SetConfig+0x228>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03b      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <DMA_SetConfig+0x22c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d036      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <DMA_SetConfig+0x230>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d031      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a30      	ldr	r2, [pc, #192]	@ (800341c <DMA_SetConfig+0x234>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <DMA_SetConfig+0x238>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d027      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <DMA_SetConfig+0x23c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2c      	ldr	r2, [pc, #176]	@ (8003428 <DMA_SetConfig+0x240>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2a      	ldr	r2, [pc, #168]	@ (800342c <DMA_SetConfig+0x244>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a29      	ldr	r2, [pc, #164]	@ (8003430 <DMA_SetConfig+0x248>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a27      	ldr	r2, [pc, #156]	@ (8003434 <DMA_SetConfig+0x24c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a26      	ldr	r2, [pc, #152]	@ (8003438 <DMA_SetConfig+0x250>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a24      	ldr	r2, [pc, #144]	@ (800343c <DMA_SetConfig+0x254>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <DMA_SetConfig+0x1d0>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a23      	ldr	r2, [pc, #140]	@ (8003440 <DMA_SetConfig+0x258>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <DMA_SetConfig+0x1d4>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <DMA_SetConfig+0x1d6>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d059      	beq.n	8003476 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	223f      	movs	r2, #63	@ 0x3f
 80033cc:	409a      	lsls	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b40      	cmp	r3, #64	@ 0x40
 80033f0:	d138      	bne.n	8003464 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003402:	e086      	b.n	8003512 <DMA_SetConfig+0x32a>
 8003404:	40020010 	.word	0x40020010
 8003408:	40020028 	.word	0x40020028
 800340c:	40020040 	.word	0x40020040
 8003410:	40020058 	.word	0x40020058
 8003414:	40020070 	.word	0x40020070
 8003418:	40020088 	.word	0x40020088
 800341c:	400200a0 	.word	0x400200a0
 8003420:	400200b8 	.word	0x400200b8
 8003424:	40020410 	.word	0x40020410
 8003428:	40020428 	.word	0x40020428
 800342c:	40020440 	.word	0x40020440
 8003430:	40020458 	.word	0x40020458
 8003434:	40020470 	.word	0x40020470
 8003438:	40020488 	.word	0x40020488
 800343c:	400204a0 	.word	0x400204a0
 8003440:	400204b8 	.word	0x400204b8
 8003444:	58025408 	.word	0x58025408
 8003448:	5802541c 	.word	0x5802541c
 800344c:	58025430 	.word	0x58025430
 8003450:	58025444 	.word	0x58025444
 8003454:	58025458 	.word	0x58025458
 8003458:	5802546c 	.word	0x5802546c
 800345c:	58025480 	.word	0x58025480
 8003460:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
}
 8003474:	e04d      	b.n	8003512 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <DMA_SetConfig+0x338>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d022      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <DMA_SetConfig+0x33c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01d      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a26      	ldr	r2, [pc, #152]	@ (8003528 <DMA_SetConfig+0x340>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d018      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a24      	ldr	r2, [pc, #144]	@ (800352c <DMA_SetConfig+0x344>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <DMA_SetConfig+0x348>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <DMA_SetConfig+0x34c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <DMA_SetConfig+0x350>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <DMA_SetConfig+0x2de>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <DMA_SetConfig+0x354>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <DMA_SetConfig+0x2e2>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <DMA_SetConfig+0x2e4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d108      	bne.n	8003502 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	60da      	str	r2, [r3, #12]
}
 8003500:	e007      	b.n	8003512 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	60da      	str	r2, [r3, #12]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	58025408 	.word	0x58025408
 8003524:	5802541c 	.word	0x5802541c
 8003528:	58025430 	.word	0x58025430
 800352c:	58025444 	.word	0x58025444
 8003530:	58025458 	.word	0x58025458
 8003534:	5802546c 	.word	0x5802546c
 8003538:	58025480 	.word	0x58025480
 800353c:	58025494 	.word	0x58025494

08003540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a42      	ldr	r2, [pc, #264]	@ (8003658 <DMA_CalcBaseAndBitshift+0x118>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04a      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a41      	ldr	r2, [pc, #260]	@ (800365c <DMA_CalcBaseAndBitshift+0x11c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d045      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3f      	ldr	r2, [pc, #252]	@ (8003660 <DMA_CalcBaseAndBitshift+0x120>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d040      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3e      	ldr	r2, [pc, #248]	@ (8003664 <DMA_CalcBaseAndBitshift+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d03b      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3c      	ldr	r2, [pc, #240]	@ (8003668 <DMA_CalcBaseAndBitshift+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d036      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <DMA_CalcBaseAndBitshift+0x12c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d031      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a39      	ldr	r2, [pc, #228]	@ (8003670 <DMA_CalcBaseAndBitshift+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02c      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a38      	ldr	r2, [pc, #224]	@ (8003674 <DMA_CalcBaseAndBitshift+0x134>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d027      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a36      	ldr	r2, [pc, #216]	@ (8003678 <DMA_CalcBaseAndBitshift+0x138>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a35      	ldr	r2, [pc, #212]	@ (800367c <DMA_CalcBaseAndBitshift+0x13c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01d      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a33      	ldr	r2, [pc, #204]	@ (8003680 <DMA_CalcBaseAndBitshift+0x140>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a32      	ldr	r2, [pc, #200]	@ (8003684 <DMA_CalcBaseAndBitshift+0x144>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a30      	ldr	r2, [pc, #192]	@ (8003688 <DMA_CalcBaseAndBitshift+0x148>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2f      	ldr	r2, [pc, #188]	@ (800368c <DMA_CalcBaseAndBitshift+0x14c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003690 <DMA_CalcBaseAndBitshift+0x150>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <DMA_CalcBaseAndBitshift+0xa8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <DMA_CalcBaseAndBitshift+0x154>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d101      	bne.n	80035ec <DMA_CalcBaseAndBitshift+0xac>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <DMA_CalcBaseAndBitshift+0xae>
 80035ec:	2300      	movs	r3, #0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d024      	beq.n	800363c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3b10      	subs	r3, #16
 80035fa:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <DMA_CalcBaseAndBitshift+0x158>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	4a24      	ldr	r2, [pc, #144]	@ (800369c <DMA_CalcBaseAndBitshift+0x15c>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d908      	bls.n	800362c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <DMA_CalcBaseAndBitshift+0x160>)
 8003622:	4013      	ands	r3, r2
 8003624:	1d1a      	adds	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	659a      	str	r2, [r3, #88]	@ 0x58
 800362a:	e00d      	b.n	8003648 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <DMA_CalcBaseAndBitshift+0x160>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6593      	str	r3, [r2, #88]	@ 0x58
 800363a:	e005      	b.n	8003648 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40020010 	.word	0x40020010
 800365c:	40020028 	.word	0x40020028
 8003660:	40020040 	.word	0x40020040
 8003664:	40020058 	.word	0x40020058
 8003668:	40020070 	.word	0x40020070
 800366c:	40020088 	.word	0x40020088
 8003670:	400200a0 	.word	0x400200a0
 8003674:	400200b8 	.word	0x400200b8
 8003678:	40020410 	.word	0x40020410
 800367c:	40020428 	.word	0x40020428
 8003680:	40020440 	.word	0x40020440
 8003684:	40020458 	.word	0x40020458
 8003688:	40020470 	.word	0x40020470
 800368c:	40020488 	.word	0x40020488
 8003690:	400204a0 	.word	0x400204a0
 8003694:	400204b8 	.word	0x400204b8
 8003698:	aaaaaaab 	.word	0xaaaaaaab
 800369c:	080073e8 	.word	0x080073e8
 80036a0:	fffffc00 	.word	0xfffffc00

080036a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d120      	bne.n	80036fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d858      	bhi.n	8003772 <DMA_CheckFifoParam+0xce>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <DMA_CheckFifoParam+0x24>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	08003773 	.word	0x08003773
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d048      	beq.n	8003776 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036e8:	e045      	b.n	8003776 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036f2:	d142      	bne.n	800377a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036f8:	e03f      	b.n	800377a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003702:	d123      	bne.n	800374c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	2b03      	cmp	r3, #3
 800370a:	d838      	bhi.n	800377e <DMA_CheckFifoParam+0xda>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <DMA_CheckFifoParam+0x70>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003725 	.word	0x08003725
 8003718:	0800372b 	.word	0x0800372b
 800371c:	08003725 	.word	0x08003725
 8003720:	0800373d 	.word	0x0800373d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
        break;
 8003728:	e030      	b.n	800378c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d025      	beq.n	8003782 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800373a:	e022      	b.n	8003782 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003744:	d11f      	bne.n	8003786 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800374a:	e01c      	b.n	8003786 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003750:	2b02      	cmp	r3, #2
 8003752:	d902      	bls.n	800375a <DMA_CheckFifoParam+0xb6>
 8003754:	2b03      	cmp	r3, #3
 8003756:	d003      	beq.n	8003760 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003758:	e018      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
        break;
 800375e:	e015      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
    break;
 8003770:	e00b      	b.n	800378a <DMA_CheckFifoParam+0xe6>
        break;
 8003772:	bf00      	nop
 8003774:	e00a      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        break;
 8003776:	bf00      	nop
 8003778:	e008      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        break;
 800377a:	bf00      	nop
 800377c:	e006      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        break;
 800377e:	bf00      	nop
 8003780:	e004      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <DMA_CheckFifoParam+0xe8>
        break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <DMA_CheckFifoParam+0xe8>
    break;
 800378a:	bf00      	nop
    }
  }

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop

0800379c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a38      	ldr	r2, [pc, #224]	@ (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a36      	ldr	r2, [pc, #216]	@ (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a33      	ldr	r2, [pc, #204]	@ (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a30      	ldr	r2, [pc, #192]	@ (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2f      	ldr	r2, [pc, #188]	@ (80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01a      	beq.n	800383a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3b08      	subs	r3, #8
 800380c:	4a28      	ldr	r2, [pc, #160]	@ (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a24      	ldr	r2, [pc, #144]	@ (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003828:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003838:	e024      	b.n	8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3b10      	subs	r3, #16
 8003842:	4a1e      	ldr	r2, [pc, #120]	@ (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a1c      	ldr	r2, [pc, #112]	@ (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d806      	bhi.n	8003862 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a1b      	ldr	r2, [pc, #108]	@ (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d902      	bls.n	8003862 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3308      	adds	r3, #8
 8003860:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003874:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	58025408 	.word	0x58025408
 8003894:	5802541c 	.word	0x5802541c
 8003898:	58025430 	.word	0x58025430
 800389c:	58025444 	.word	0x58025444
 80038a0:	58025458 	.word	0x58025458
 80038a4:	5802546c 	.word	0x5802546c
 80038a8:	58025480 	.word	0x58025480
 80038ac:	58025494 	.word	0x58025494
 80038b0:	cccccccd 	.word	0xcccccccd
 80038b4:	16009600 	.word	0x16009600
 80038b8:	58025880 	.word	0x58025880
 80038bc:	aaaaaaab 	.word	0xaaaaaaab
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	4002040f 	.word	0x4002040f
 80038c8:	10008200 	.word	0x10008200
 80038cc:	40020880 	.word	0x40020880

080038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04a      	beq.n	800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d847      	bhi.n	800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a25      	ldr	r2, [pc, #148]	@ (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a24      	ldr	r2, [pc, #144]	@ (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01d      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	@ (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	@ (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003940:	2300      	movs	r3, #0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003958:	671a      	str	r2, [r3, #112]	@ 0x70
 800395a:	e009      	b.n	8003970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a11      	ldr	r2, [pc, #68]	@ (80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800396e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3b01      	subs	r3, #1
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	58025408 	.word	0x58025408
 800398c:	5802541c 	.word	0x5802541c
 8003990:	58025430 	.word	0x58025430
 8003994:	58025444 	.word	0x58025444
 8003998:	58025458 	.word	0x58025458
 800399c:	5802546c 	.word	0x5802546c
 80039a0:	58025480 	.word	0x58025480
 80039a4:	58025494 	.word	0x58025494
 80039a8:	1600963f 	.word	0x1600963f
 80039ac:	58025940 	.word	0x58025940
 80039b0:	1000823f 	.word	0x1000823f
 80039b4:	40020940 	.word	0x40020940

080039b8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	011a      	lsls	r2, r3, #4
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <HAL_EXTI_IRQHandler+0x5c>)
 80039e2:	4413      	add	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4798      	blx	r3
    }
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	58000088 	.word	0x58000088

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a26:	4b89      	ldr	r3, [pc, #548]	@ (8003c4c <HAL_GPIO_Init+0x234>)
 8003a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a2a:	e194      	b.n	8003d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8186 	beq.w	8003d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d005      	beq.n	8003a5c <HAL_GPIO_Init+0x44>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d130      	bne.n	8003abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a92:	2201      	movs	r2, #1
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 0201 	and.w	r2, r3, #1
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d017      	beq.n	8003afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d123      	bne.n	8003b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0203 	and.w	r2, r3, #3
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80e0 	beq.w	8003d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b90:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <HAL_GPIO_Init+0x238>)
 8003b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b96:	4a2e      	ldr	r2, [pc, #184]	@ (8003c50 <HAL_GPIO_Init+0x238>)
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c50 <HAL_GPIO_Init+0x238>)
 8003ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bae:	4a29      	ldr	r2, [pc, #164]	@ (8003c54 <HAL_GPIO_Init+0x23c>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <HAL_GPIO_Init+0x240>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d052      	beq.n	8003c80 <HAL_GPIO_Init+0x268>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_GPIO_Init+0x244>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_GPIO_Init+0x22e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c60 <HAL_GPIO_Init+0x248>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x22a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <HAL_GPIO_Init+0x24c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x226>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <HAL_GPIO_Init+0x250>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x222>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c6c <HAL_GPIO_Init+0x254>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x21e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_GPIO_Init+0x258>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x21a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <HAL_GPIO_Init+0x25c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x216>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <HAL_GPIO_Init+0x260>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x212>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <HAL_GPIO_Init+0x264>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x20e>
 8003c22:	2309      	movs	r3, #9
 8003c24:	e02d      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c26:	230a      	movs	r3, #10
 8003c28:	e02b      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e029      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e027      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c32:	2306      	movs	r3, #6
 8003c34:	e025      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e023      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e021      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e01f      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e01d      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e01b      	b.n	8003c82 <HAL_GPIO_Init+0x26a>
 8003c4a:	bf00      	nop
 8003c4c:	58000080 	.word	0x58000080
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58000400 	.word	0x58000400
 8003c58:	58020000 	.word	0x58020000
 8003c5c:	58020400 	.word	0x58020400
 8003c60:	58020800 	.word	0x58020800
 8003c64:	58020c00 	.word	0x58020c00
 8003c68:	58021000 	.word	0x58021000
 8003c6c:	58021400 	.word	0x58021400
 8003c70:	58021800 	.word	0x58021800
 8003c74:	58021c00 	.word	0x58021c00
 8003c78:	58022000 	.word	0x58022000
 8003c7c:	58022400 	.word	0x58022400
 8003c80:	2300      	movs	r3, #0
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	f002 0203 	and.w	r2, r2, #3
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c92:	4938      	ldr	r1, [pc, #224]	@ (8003d74 <HAL_GPIO_Init+0x35c>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f ae63 	bne.w	8003a2c <HAL_GPIO_Init+0x14>
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	3724      	adds	r7, #36	@ 0x24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	58000400 	.word	0x58000400

08003d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
 8003d84:	4613      	mov	r3, r2
 8003d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d88:	787b      	ldrb	r3, [r7, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d94:	e003      	b.n	8003d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d96:	887b      	ldrh	r3, [r7, #2]
 8003d98:	041a      	lsls	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	619a      	str	r2, [r3, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003db4:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <HAL_PWREx_ConfigSupply+0x70>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003dc0:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <HAL_PWREx_ConfigSupply+0x70>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d001      	beq.n	8003dd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01f      	b.n	8003e12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e01d      	b.n	8003e12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dd6:	4b11      	ldr	r3, [pc, #68]	@ (8003e1c <HAL_PWREx_ConfigSupply+0x70>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	490f      	ldr	r1, [pc, #60]	@ (8003e1c <HAL_PWREx_ConfigSupply+0x70>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003de6:	f7fd f971 	bl	80010cc <HAL_GetTick>
 8003dea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dec:	e009      	b.n	8003e02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003dee:	f7fd f96d 	bl	80010cc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dfc:	d901      	bls.n	8003e02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e007      	b.n	8003e12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_PWREx_ConfigSupply+0x70>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e0e:	d1ee      	bne.n	8003dee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	58024800 	.word	0x58024800

08003e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	@ 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f000 bc48 	b.w	80046c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8088 	beq.w	8003f52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b99      	ldr	r3, [pc, #612]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e4c:	4b96      	ldr	r3, [pc, #600]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d007      	beq.n	8003e68 <HAL_RCC_OscConfig+0x48>
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	2b18      	cmp	r3, #24
 8003e5c:	d111      	bne.n	8003e82 <HAL_RCC_OscConfig+0x62>
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d10c      	bne.n	8003e82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4b8f      	ldr	r3, [pc, #572]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d06d      	beq.n	8003f50 <HAL_RCC_OscConfig+0x130>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d169      	bne.n	8003f50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f000 bc21 	b.w	80046c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x7a>
 8003e8c:	4b86      	ldr	r3, [pc, #536]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a85      	ldr	r2, [pc, #532]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e02e      	b.n	8003ef8 <HAL_RCC_OscConfig+0xd8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x9c>
 8003ea2:	4b81      	ldr	r3, [pc, #516]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a80      	ldr	r2, [pc, #512]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b7e      	ldr	r3, [pc, #504]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e01d      	b.n	8003ef8 <HAL_RCC_OscConfig+0xd8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xc0>
 8003ec6:	4b78      	ldr	r3, [pc, #480]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a77      	ldr	r2, [pc, #476]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	4b75      	ldr	r3, [pc, #468]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a74      	ldr	r2, [pc, #464]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e00b      	b.n	8003ef8 <HAL_RCC_OscConfig+0xd8>
 8003ee0:	4b71      	ldr	r3, [pc, #452]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a70      	ldr	r2, [pc, #448]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	4b6e      	ldr	r3, [pc, #440]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6d      	ldr	r2, [pc, #436]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd f8e4 	bl	80010cc <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fd f8e0 	bl	80010cc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	@ 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e3d4      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f1a:	4b63      	ldr	r3, [pc, #396]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0xe8>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd f8d0 	bl	80010cc <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fd f8cc 	bl	80010cc <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	@ 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e3c0      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f42:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x110>
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80ca 	beq.w	80040f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f60:	4b51      	ldr	r3, [pc, #324]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_RCC_OscConfig+0x166>
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	2b18      	cmp	r3, #24
 8003f7a:	d156      	bne.n	800402a <HAL_RCC_OscConfig+0x20a>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d151      	bne.n	800402a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f86:	4b48      	ldr	r3, [pc, #288]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x17e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e392      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 0219 	bic.w	r2, r3, #25
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	493f      	ldr	r1, [pc, #252]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd f88c 	bl	80010cc <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7fd f888 	bl	80010cc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e37c      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fca:	4b37      	ldr	r3, [pc, #220]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	f7fd f8a9 	bl	800112c <HAL_GetREVID>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d817      	bhi.n	8004014 <HAL_RCC_OscConfig+0x1f4>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d108      	bne.n	8003ffe <HAL_RCC_OscConfig+0x1de>
 8003fec:	4b2e      	ldr	r3, [pc, #184]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	e07a      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	031b      	lsls	r3, r3, #12
 800400c:	4926      	ldr	r1, [pc, #152]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004012:	e06f      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b24      	ldr	r3, [pc, #144]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	4921      	ldr	r1, [pc, #132]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004028:	e064      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d047      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004032:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 0219 	bic.w	r2, r3, #25
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	491a      	ldr	r1, [pc, #104]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd f842 	bl	80010cc <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fd f83e 	bl	80010cc <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e332      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	f7fd f85f 	bl	800112c <HAL_GetREVID>
 800406e:	4603      	mov	r3, r0
 8004070:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004074:	4293      	cmp	r3, r2
 8004076:	d819      	bhi.n	80040ac <HAL_RCC_OscConfig+0x28c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d108      	bne.n	8004092 <HAL_RCC_OscConfig+0x272>
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004088:	4a07      	ldr	r2, [pc, #28]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408e:	6053      	str	r3, [r2, #4]
 8004090:	e030      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
 8004092:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	031b      	lsls	r3, r3, #12
 80040a0:	4901      	ldr	r1, [pc, #4]	@ (80040a8 <HAL_RCC_OscConfig+0x288>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
 80040a6:	e025      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
 80040a8:	58024400 	.word	0x58024400
 80040ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	4997      	ldr	r1, [pc, #604]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	e018      	b.n	80040f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c2:	4b95      	ldr	r3, [pc, #596]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a94      	ldr	r2, [pc, #592]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fc fffd 	bl	80010cc <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fc fff9 	bl	80010cc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e2ed      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040e8:	4b8b      	ldr	r3, [pc, #556]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a9 	beq.w	8004254 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004102:	4b85      	ldr	r3, [pc, #532]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800410a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800410c:	4b82      	ldr	r3, [pc, #520]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d007      	beq.n	8004128 <HAL_RCC_OscConfig+0x308>
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b18      	cmp	r3, #24
 800411c:	d13a      	bne.n	8004194 <HAL_RCC_OscConfig+0x374>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d135      	bne.n	8004194 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004128:	4b7b      	ldr	r3, [pc, #492]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_OscConfig+0x320>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b80      	cmp	r3, #128	@ 0x80
 800413a:	d001      	beq.n	8004140 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e2c1      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004140:	f7fc fff4 	bl	800112c <HAL_GetREVID>
 8004144:	4603      	mov	r3, r0
 8004146:	f241 0203 	movw	r2, #4099	@ 0x1003
 800414a:	4293      	cmp	r3, r2
 800414c:	d817      	bhi.n	800417e <HAL_RCC_OscConfig+0x35e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	2b20      	cmp	r3, #32
 8004154:	d108      	bne.n	8004168 <HAL_RCC_OscConfig+0x348>
 8004156:	4b70      	ldr	r3, [pc, #448]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800415e:	4a6e      	ldr	r2, [pc, #440]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004160:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004164:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004166:	e075      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004168:	4b6b      	ldr	r3, [pc, #428]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	069b      	lsls	r3, r3, #26
 8004176:	4968      	ldr	r1, [pc, #416]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800417c:	e06a      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800417e:	4b66      	ldr	r3, [pc, #408]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	4962      	ldr	r1, [pc, #392]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004192:	e05f      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d042      	beq.n	8004222 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800419c:	4b5e      	ldr	r3, [pc, #376]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fc ff90 	bl	80010cc <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041b0:	f7fc ff8c 	bl	80010cc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e280      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c2:	4b55      	ldr	r3, [pc, #340]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ce:	f7fc ffad 	bl	800112c <HAL_GetREVID>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041d8:	4293      	cmp	r3, r2
 80041da:	d817      	bhi.n	800420c <HAL_RCC_OscConfig+0x3ec>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d108      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3d6>
 80041e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80041ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041f2:	6053      	str	r3, [r2, #4]
 80041f4:	e02e      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
 80041f6:	4b48      	ldr	r3, [pc, #288]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	069b      	lsls	r3, r3, #26
 8004204:	4944      	ldr	r1, [pc, #272]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
 800420a:	e023      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
 800420c:	4b42      	ldr	r3, [pc, #264]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	493f      	ldr	r1, [pc, #252]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
 8004220:	e018      	b.n	8004254 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004222:	4b3d      	ldr	r3, [pc, #244]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3c      	ldr	r2, [pc, #240]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fc ff4d 	bl	80010cc <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004236:	f7fc ff49 	bl	80010cc <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e23d      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004248:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d036      	beq.n	80042ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d019      	beq.n	800429c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004268:	4b2b      	ldr	r3, [pc, #172]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800426a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426c:	4a2a      	ldr	r2, [pc, #168]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fc ff2a 	bl	80010cc <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427c:	f7fc ff26 	bl	80010cc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e21a      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x45c>
 800429a:	e018      	b.n	80042ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fc ff10 	bl	80010cc <HAL_GetTick>
 80042ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fc ff0c 	bl	80010cc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e200      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042c2:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d039      	beq.n	800434e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01c      	beq.n	800431c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042ee:	f7fc feed 	bl	80010cc <HAL_GetTick>
 80042f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f6:	f7fc fee9 	bl	80010cc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e1dd      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004308:	4b03      	ldr	r3, [pc, #12]	@ (8004318 <HAL_RCC_OscConfig+0x4f8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x4d6>
 8004314:	e01b      	b.n	800434e <HAL_RCC_OscConfig+0x52e>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800431c:	4b9b      	ldr	r3, [pc, #620]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a9a      	ldr	r2, [pc, #616]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004328:	f7fc fed0 	bl	80010cc <HAL_GetTick>
 800432c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004330:	f7fc fecc 	bl	80010cc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1c0      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004342:	4b92      	ldr	r3, [pc, #584]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8081 	beq.w	800445e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800435c:	4b8c      	ldr	r3, [pc, #560]	@ (8004590 <HAL_RCC_OscConfig+0x770>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a8b      	ldr	r2, [pc, #556]	@ (8004590 <HAL_RCC_OscConfig+0x770>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004368:	f7fc feb0 	bl	80010cc <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fc feac 	bl	80010cc <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1a0      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004382:	4b83      	ldr	r3, [pc, #524]	@ (8004590 <HAL_RCC_OscConfig+0x770>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x584>
 8004396:	4b7d      	ldr	r3, [pc, #500]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a7c      	ldr	r2, [pc, #496]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a2:	e02d      	b.n	8004400 <HAL_RCC_OscConfig+0x5e0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x5a6>
 80043ac:	4b77      	ldr	r3, [pc, #476]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	4a76      	ldr	r2, [pc, #472]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b8:	4b74      	ldr	r3, [pc, #464]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043bc:	4a73      	ldr	r2, [pc, #460]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c4:	e01c      	b.n	8004400 <HAL_RCC_OscConfig+0x5e0>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x5c8>
 80043ce:	4b6f      	ldr	r3, [pc, #444]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	4a6e      	ldr	r2, [pc, #440]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043da:	4b6c      	ldr	r3, [pc, #432]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043de:	4a6b      	ldr	r2, [pc, #428]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0x5e0>
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ec:	4a67      	ldr	r2, [pc, #412]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f4:	4b65      	ldr	r3, [pc, #404]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f8:	4a64      	ldr	r2, [pc, #400]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80043fa:	f023 0304 	bic.w	r3, r3, #4
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fc fe60 	bl	80010cc <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fc fe5c 	bl	80010cc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e14e      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004426:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ee      	beq.n	8004410 <HAL_RCC_OscConfig+0x5f0>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fc fe4a 	bl	80010cc <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fc fe46 	bl	80010cc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e138      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004452:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ee      	bne.n	800443c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 812d 	beq.w	80046c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004468:	4b48      	ldr	r3, [pc, #288]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004470:	2b18      	cmp	r3, #24
 8004472:	f000 80bd 	beq.w	80045f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2b02      	cmp	r3, #2
 800447c:	f040 809e 	bne.w	80045bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004480:	4b42      	ldr	r3, [pc, #264]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a41      	ldr	r2, [pc, #260]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fc fe1e 	bl	80010cc <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fc fe1a 	bl	80010cc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e10e      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a6:	4b39      	ldr	r3, [pc, #228]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b2:	4b36      	ldr	r3, [pc, #216]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80044b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044b6:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <HAL_RCC_OscConfig+0x774>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	430a      	orrs	r2, r1
 80044c6:	4931      	ldr	r1, [pc, #196]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	3b01      	subs	r3, #1
 80044d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	3b01      	subs	r3, #1
 80044dc:	025b      	lsls	r3, r3, #9
 80044de:	b29b      	uxth	r3, r3
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	3b01      	subs	r3, #1
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	3b01      	subs	r3, #1
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044fc:	4923      	ldr	r1, [pc, #140]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	4a21      	ldr	r2, [pc, #132]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800450e:	4b1f      	ldr	r3, [pc, #124]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004512:	4b21      	ldr	r3, [pc, #132]	@ (8004598 <HAL_RCC_OscConfig+0x778>)
 8004514:	4013      	ands	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800451a:	00d2      	lsls	r2, r2, #3
 800451c:	491b      	ldr	r1, [pc, #108]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004522:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f023 020c 	bic.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	4917      	ldr	r1, [pc, #92]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004534:	4b15      	ldr	r3, [pc, #84]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f023 0202 	bic.w	r2, r3, #2
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	4912      	ldr	r1, [pc, #72]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	4a10      	ldr	r2, [pc, #64]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004552:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800455e:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	4a0a      	ldr	r2, [pc, #40]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	4a07      	ldr	r2, [pc, #28]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004576:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a04      	ldr	r2, [pc, #16]	@ (800458c <HAL_RCC_OscConfig+0x76c>)
 800457c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fc fda3 	bl	80010cc <HAL_GetTick>
 8004586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004588:	e011      	b.n	80045ae <HAL_RCC_OscConfig+0x78e>
 800458a:	bf00      	nop
 800458c:	58024400 	.word	0x58024400
 8004590:	58024800 	.word	0x58024800
 8004594:	fffffc0c 	.word	0xfffffc0c
 8004598:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fc fd96 	bl	80010cc <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e08a      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ae:	4b47      	ldr	r3, [pc, #284]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x77c>
 80045ba:	e082      	b.n	80046c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a42      	ldr	r2, [pc, #264]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fc fd80 	bl	80010cc <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fc fd7c 	bl	80010cc <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e070      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045e2:	4b3a      	ldr	r3, [pc, #232]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x7b0>
 80045ee:	e068      	b.n	80046c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045f0:	4b36      	ldr	r3, [pc, #216]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045f6:	4b35      	ldr	r3, [pc, #212]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	2b01      	cmp	r3, #1
 8004602:	d031      	beq.n	8004668 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d12a      	bne.n	8004668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d122      	bne.n	8004668 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d11a      	bne.n	8004668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	0a5b      	lsrs	r3, r3, #9
 8004636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d111      	bne.n	8004668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d108      	bne.n	8004668 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	0e1b      	lsrs	r3, r3, #24
 800465a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004662:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e02b      	b.n	80046c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800466c:	4b17      	ldr	r3, [pc, #92]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 800466e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004676:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d01f      	beq.n	80046c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004682:	4b12      	ldr	r3, [pc, #72]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	4a11      	ldr	r2, [pc, #68]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468e:	f7fc fd1d 	bl	80010cc <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004694:	bf00      	nop
 8004696:	f7fc fd19 	bl	80010cc <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	4293      	cmp	r3, r2
 80046a0:	d0f9      	beq.n	8004696 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80046a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_RCC_OscConfig+0x8b0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046ae:	00d2      	lsls	r2, r2, #3
 80046b0:	4906      	ldr	r1, [pc, #24]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046b6:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	4a04      	ldr	r2, [pc, #16]	@ (80046cc <HAL_RCC_OscConfig+0x8ac>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3730      	adds	r7, #48	@ 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	58024400 	.word	0x58024400
 80046d0:	ffff0007 	.word	0xffff0007

080046d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e19c      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b87      	ldr	r3, [pc, #540]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	4985      	ldr	r1, [pc, #532]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b83      	ldr	r3, [pc, #524]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e184      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	4b7b      	ldr	r3, [pc, #492]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004730:	429a      	cmp	r2, r3
 8004732:	d908      	bls.n	8004746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004734:	4b78      	ldr	r3, [pc, #480]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	4975      	ldr	r1, [pc, #468]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004742:	4313      	orrs	r3, r2
 8004744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	4b70      	ldr	r3, [pc, #448]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800475e:	429a      	cmp	r2, r3
 8004760:	d908      	bls.n	8004774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004762:	4b6d      	ldr	r3, [pc, #436]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	496a      	ldr	r1, [pc, #424]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	4b64      	ldr	r3, [pc, #400]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800478c:	429a      	cmp	r2, r3
 800478e:	d908      	bls.n	80047a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004790:	4b61      	ldr	r3, [pc, #388]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	495e      	ldr	r1, [pc, #376]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	4b59      	ldr	r3, [pc, #356]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d908      	bls.n	80047d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047be:	4b56      	ldr	r3, [pc, #344]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	4953      	ldr	r1, [pc, #332]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d010      	beq.n	80047fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d908      	bls.n	80047fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f023 020f 	bic.w	r2, r3, #15
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4947      	ldr	r1, [pc, #284]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d055      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4940      	ldr	r1, [pc, #256]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004818:	4313      	orrs	r3, r2
 800481a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004824:	4b3c      	ldr	r3, [pc, #240]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d121      	bne.n	8004874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0f6      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d107      	bne.n	800484c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800483c:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d115      	bne.n	8004874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0ea      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004854:	4b30      	ldr	r3, [pc, #192]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0de      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004864:	4b2c      	ldr	r3, [pc, #176]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0d6      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004874:	4b28      	ldr	r3, [pc, #160]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f023 0207 	bic.w	r2, r3, #7
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4925      	ldr	r1, [pc, #148]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004886:	f7fc fc21 	bl	80010cc <HAL_GetTick>
 800488a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488e:	f7fc fc1d 	bl	80010cc <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0be      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d1eb      	bne.n	800488e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d208      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d2:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f023 020f 	bic.w	r2, r3, #15
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	490e      	ldr	r1, [pc, #56]	@ (8004918 <HAL_RCC_ClockConfig+0x244>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d214      	bcs.n	800491c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	4906      	ldr	r1, [pc, #24]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <HAL_RCC_ClockConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e086      	b.n	8004a22 <HAL_RCC_ClockConfig+0x34e>
 8004914:	52002000 	.word	0x52002000
 8004918:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004934:	429a      	cmp	r2, r3
 8004936:	d208      	bcs.n	800494a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004938:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	4939      	ldr	r1, [pc, #228]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 8004946:	4313      	orrs	r3, r2
 8004948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	4b34      	ldr	r3, [pc, #208]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004962:	429a      	cmp	r2, r3
 8004964:	d208      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004966:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	492e      	ldr	r1, [pc, #184]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 8004974:	4313      	orrs	r3, r2
 8004976:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004990:	429a      	cmp	r2, r3
 8004992:	d208      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4922      	ldr	r1, [pc, #136]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049be:	429a      	cmp	r2, r3
 80049c0:	d208      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4917      	ldr	r1, [pc, #92]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049d4:	f000 f834 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	4912      	ldr	r1, [pc, #72]	@ (8004a30 <HAL_RCC_ClockConfig+0x35c>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049f2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <HAL_RCC_ClockConfig+0x358>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <HAL_RCC_ClockConfig+0x35c>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <HAL_RCC_ClockConfig+0x360>)
 8004a0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a38 <HAL_RCC_ClockConfig+0x364>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a12:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <HAL_RCC_ClockConfig+0x368>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fb0e 	bl	8001038 <HAL_InitTick>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	080073d8 	.word	0x080073d8
 8004a34:	24000004 	.word	0x24000004
 8004a38:	24000000 	.word	0x24000000
 8004a3c:	24000008 	.word	0x24000008

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a46:	4bb3      	ldr	r3, [pc, #716]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4e:	2b18      	cmp	r3, #24
 8004a50:	f200 8155 	bhi.w	8004cfe <HAL_RCC_GetSysClockFreq+0x2be>
 8004a54:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004ac1 	.word	0x08004ac1
 8004a60:	08004cff 	.word	0x08004cff
 8004a64:	08004cff 	.word	0x08004cff
 8004a68:	08004cff 	.word	0x08004cff
 8004a6c:	08004cff 	.word	0x08004cff
 8004a70:	08004cff 	.word	0x08004cff
 8004a74:	08004cff 	.word	0x08004cff
 8004a78:	08004cff 	.word	0x08004cff
 8004a7c:	08004ae7 	.word	0x08004ae7
 8004a80:	08004cff 	.word	0x08004cff
 8004a84:	08004cff 	.word	0x08004cff
 8004a88:	08004cff 	.word	0x08004cff
 8004a8c:	08004cff 	.word	0x08004cff
 8004a90:	08004cff 	.word	0x08004cff
 8004a94:	08004cff 	.word	0x08004cff
 8004a98:	08004cff 	.word	0x08004cff
 8004a9c:	08004aed 	.word	0x08004aed
 8004aa0:	08004cff 	.word	0x08004cff
 8004aa4:	08004cff 	.word	0x08004cff
 8004aa8:	08004cff 	.word	0x08004cff
 8004aac:	08004cff 	.word	0x08004cff
 8004ab0:	08004cff 	.word	0x08004cff
 8004ab4:	08004cff 	.word	0x08004cff
 8004ab8:	08004cff 	.word	0x08004cff
 8004abc:	08004af3 	.word	0x08004af3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac0:	4b94      	ldr	r3, [pc, #592]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004acc:	4b91      	ldr	r3, [pc, #580]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	4a90      	ldr	r2, [pc, #576]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ade:	e111      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ae2:	61bb      	str	r3, [r7, #24]
      break;
 8004ae4:	e10e      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ae8:	61bb      	str	r3, [r7, #24]
      break;
 8004aea:	e10b      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004aec:	4b8c      	ldr	r3, [pc, #560]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004aee:	61bb      	str	r3, [r7, #24]
      break;
 8004af0:	e108      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004af2:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004afc:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b08:	4b82      	ldr	r3, [pc, #520]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b12:	4b80      	ldr	r3, [pc, #512]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80e1 	beq.w	8004cf8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	f000 8083 	beq.w	8004c44 <HAL_RCC_GetSysClockFreq+0x204>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	f200 80a1 	bhi.w	8004c88 <HAL_RCC_GetSysClockFreq+0x248>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x114>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d056      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b52:	e099      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b54:	4b6f      	ldr	r3, [pc, #444]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02d      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b60:	4b6c      	ldr	r3, [pc, #432]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b62      	ldr	r3, [pc, #392]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004bba:	e087      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b51      	ldr	r3, [pc, #324]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004be2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bfe:	e065      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b40      	ldr	r3, [pc, #256]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c42:	e043      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c86:	e021      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	0a5b      	lsrs	r3, r3, #9
 8004cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf0:	ee17 3a90 	vmov	r3, s15
 8004cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004cf6:	e005      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
      break;
 8004cfc:	e002      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d00:	61bb      	str	r3, [r7, #24]
      break;
 8004d02:	bf00      	nop
  }

  return sysclockfreq;
 8004d04:	69bb      	ldr	r3, [r7, #24]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	@ 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
 8004d18:	03d09000 	.word	0x03d09000
 8004d1c:	003d0900 	.word	0x003d0900
 8004d20:	007a1200 	.word	0x007a1200
 8004d24:	46000000 	.word	0x46000000
 8004d28:	4c742400 	.word	0x4c742400
 8004d2c:	4a742400 	.word	0x4a742400
 8004d30:	4af42400 	.word	0x4af42400

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d38:	b0ca      	sub	sp, #296	@ 0x128
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d58:	2500      	movs	r5, #0
 8004d5a:	ea54 0305 	orrs.w	r3, r4, r5
 8004d5e:	d049      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d6a:	d02f      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d70:	d828      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d76:	d01a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d7c:	d822      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d86:	d007      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d88:	e01c      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8a:	4bb8      	ldr	r3, [pc, #736]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	4ab7      	ldr	r2, [pc, #732]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d96:	e01a      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	2102      	movs	r1, #2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 f9d1 	bl	8006148 <RCCEx_PLL2_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dac:	e00f      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	3328      	adds	r3, #40	@ 0x28
 8004db4:	2102      	movs	r1, #2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fa78 	bl	80062ac <RCCEx_PLL3_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dd6:	4ba5      	ldr	r3, [pc, #660]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de4:	4aa1      	ldr	r2, [pc, #644]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e00:	f04f 0900 	mov.w	r9, #0
 8004e04:	ea58 0309 	orrs.w	r3, r8, r9
 8004e08:	d047      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d82a      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e31 	.word	0x08004e31
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e73 	.word	0x08004e73
 8004e2c:	08004e73 	.word	0x08004e73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e30:	4b8e      	ldr	r3, [pc, #568]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a8d      	ldr	r2, [pc, #564]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e3c:	e01a      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3308      	adds	r3, #8
 8004e44:	2100      	movs	r1, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f97e 	bl	8006148 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e52:	e00f      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e58:	3328      	adds	r3, #40	@ 0x28
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fa25 	bl	80062ac <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e68:	e004      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e70:	e000      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e80:	f023 0107 	bic.w	r1, r3, #7
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	4a78      	ldr	r2, [pc, #480]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e90:	e003      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004ea6:	f04f 0b00 	mov.w	fp, #0
 8004eaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8004eae:	d04c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eba:	d030      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec0:	d829      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec4:	d02d      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec8:	d825      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004eca:	2b80      	cmp	r3, #128	@ 0x80
 8004ecc:	d018      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ece:	2b80      	cmp	r3, #128	@ 0x80
 8004ed0:	d821      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	d007      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004eda:	e01c      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004edc:	4b63      	ldr	r3, [pc, #396]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4a62      	ldr	r2, [pc, #392]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	3308      	adds	r3, #8
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f928 	bl	8006148 <RCCEx_PLL2_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f04:	3328      	adds	r3, #40	@ 0x28
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 f9cf 	bl	80062ac <RCCEx_PLL3_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f14:	e006      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f3a:	4a4c      	ldr	r2, [pc, #304]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f56:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d053      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f76:	d035      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f7c:	d82e      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f82:	d031      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f88:	d828      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f8e:	d01a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f94:	d822      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f9e:	d007      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004fa0:	e01c      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa2:	4b32      	ldr	r3, [pc, #200]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a31      	ldr	r2, [pc, #196]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fae:	e01c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 f8c5 	bl	8006148 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e011      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fca:	3328      	adds	r3, #40	@ 0x28
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f96c 	bl	80062ac <RCCEx_PLL3_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fda:	e006      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fe4:	bf00      	nop
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005002:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005004:	430b      	orrs	r3, r1
 8005006:	6593      	str	r3, [r2, #88]	@ 0x58
 8005008:	e003      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800501e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005028:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800502c:	460b      	mov	r3, r1
 800502e:	4313      	orrs	r3, r2
 8005030:	d056      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800503a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800503e:	d038      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005044:	d831      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800504a:	d034      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800504c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005050:	d82b      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005056:	d01d      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800505c:	d825      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005068:	e01f      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005070:	4ba2      	ldr	r3, [pc, #648]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4aa1      	ldr	r2, [pc, #644]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800507c:	e01c      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	3308      	adds	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f85e 	bl	8006148 <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	3328      	adds	r3, #40	@ 0x28
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f905 	bl	80062ac <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050a8:	e006      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b0:	e002      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050c0:	4b8e      	ldr	r3, [pc, #568]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050d0:	4a8a      	ldr	r2, [pc, #552]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d2:	430b      	orrs	r3, r1
 80050d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80050ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d03a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005106:	2b30      	cmp	r3, #48	@ 0x30
 8005108:	d01f      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800510a:	2b30      	cmp	r3, #48	@ 0x30
 800510c:	d819      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800510e:	2b20      	cmp	r3, #32
 8005110:	d00c      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005112:	2b20      	cmp	r3, #32
 8005114:	d815      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d019      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800511a:	2b10      	cmp	r3, #16
 800511c:	d111      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511e:	4b77      	ldr	r3, [pc, #476]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005122:	4a76      	ldr	r2, [pc, #472]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800512a:	e011      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	3308      	adds	r3, #8
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f807 	bl	8006148 <RCCEx_PLL2_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800514e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005158:	4b68      	ldr	r3, [pc, #416]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	4a65      	ldr	r2, [pc, #404]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005168:	430b      	orrs	r3, r1
 800516a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005182:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800518c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d051      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a0:	d035      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80051a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a6:	d82e      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051ac:	d031      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80051ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b2:	d828      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b8:	d01a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d822      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c8:	d007      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80051ca:	e01c      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051cc:	4b4b      	ldr	r3, [pc, #300]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	4a4a      	ldr	r2, [pc, #296]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051d8:	e01c      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051de:	3308      	adds	r3, #8
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 ffb0 	bl	8006148 <RCCEx_PLL2_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051ee:	e011      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	3328      	adds	r3, #40	@ 0x28
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 f857 	bl	80062ac <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800521c:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005220:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522a:	4a34      	ldr	r2, [pc, #208]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800522c:	430b      	orrs	r3, r1
 800522e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005250:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d056      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005264:	d033      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800526a:	d82c      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800526c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005270:	d02f      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005272:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005276:	d826      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005278:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800527c:	d02b      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800527e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005282:	d820      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005288:	d012      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800528a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800528e:	d81a      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d022      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005298:	d115      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	3308      	adds	r3, #8
 80052a0:	2101      	movs	r1, #1
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 ff50 	bl	8006148 <RCCEx_PLL2_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052ae:	e015      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	3328      	adds	r3, #40	@ 0x28
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fff7 	bl	80062ac <RCCEx_PLL3_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052c4:	e00a      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ce:	bf00      	nop
 80052d0:	e004      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f2:	4a02      	ldr	r2, [pc, #8]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800531e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d055      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005330:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005334:	d033      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533a:	d82c      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d02f      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d826      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005348:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800534c:	d02b      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800534e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005352:	d820      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005358:	d012      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800535a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800535e:	d81a      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d022      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005368:	d115      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536e:	3308      	adds	r3, #8
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fee8 	bl	8006148 <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800537e:	e015      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005384:	3328      	adds	r3, #40	@ 0x28
 8005386:	2101      	movs	r1, #1
 8005388:	4618      	mov	r0, r3
 800538a:	f000 ff8f 	bl	80062ac <RCCEx_PLL3_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005394:	e00a      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800539e:	bf00      	nop
 80053a0:	e004      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053a2:	bf00      	nop
 80053a4:	e002      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80053aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80053b4:	4ba3      	ldr	r3, [pc, #652]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053c4:	4a9f      	ldr	r2, [pc, #636]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053ee:	460b      	mov	r3, r1
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d037      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053fe:	d00e      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005404:	d816      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800540a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800540e:	d111      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b8c      	ldr	r3, [pc, #560]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	4a8b      	ldr	r2, [pc, #556]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800541a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800541c:	e00f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	3308      	adds	r3, #8
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fe8e 	bl	8006148 <RCCEx_PLL2_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005432:	e004      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800543a:	e000      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800543c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005446:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005454:	4a7b      	ldr	r2, [pc, #492]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005456:	430b      	orrs	r3, r1
 8005458:	6513      	str	r3, [r2, #80]	@ 0x50
 800545a:	e003      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800547a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d039      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548a:	2b03      	cmp	r3, #3
 800548c:	d81c      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054d1 	.word	0x080054d1
 8005498:	080054a5 	.word	0x080054a5
 800549c:	080054b3 	.word	0x080054b3
 80054a0:	080054d1 	.word	0x080054d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a4:	4b67      	ldr	r3, [pc, #412]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	4a66      	ldr	r2, [pc, #408]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054b0:	e00f      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	3308      	adds	r3, #8
 80054b8:	2102      	movs	r1, #2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fe44 	bl	8006148 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054c6:	e004      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ce:	e000      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80054d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054da:	4b5a      	ldr	r3, [pc, #360]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054de:	f023 0103 	bic.w	r1, r3, #3
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054e8:	4a56      	ldr	r2, [pc, #344]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054ea:	430b      	orrs	r3, r1
 80054ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005508:	2300      	movs	r3, #0
 800550a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800550e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005512:	460b      	mov	r3, r1
 8005514:	4313      	orrs	r3, r2
 8005516:	f000 809f 	beq.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800551a:	4b4b      	ldr	r3, [pc, #300]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4a      	ldr	r2, [pc, #296]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005526:	f7fb fdd1 	bl	80010cc <HAL_GetTick>
 800552a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800552e:	e00b      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005530:	f7fb fdcc 	bl	80010cc <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b64      	cmp	r3, #100	@ 0x64
 800553e:	d903      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005546:	e005      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005548:	4b3f      	ldr	r3, [pc, #252]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ed      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005558:	2b00      	cmp	r3, #0
 800555a:	d179      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800555c:	4b39      	ldr	r3, [pc, #228]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800555e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005568:	4053      	eors	r3, r2
 800556a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d015      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005572:	4b34      	ldr	r3, [pc, #208]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a30      	ldr	r2, [pc, #192]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005588:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800558a:	4b2e      	ldr	r3, [pc, #184]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	4a2d      	ldr	r2, [pc, #180]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005594:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005596:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055aa:	d118      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fb fd8e 	bl	80010cc <HAL_GetTick>
 80055b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055b4:	e00d      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fb fd89 	bl	80010cc <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80055d0:	e005      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0eb      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80055de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d129      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f6:	d10e      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80055f8:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005608:	091a      	lsrs	r2, r3, #4
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800560c:	4013      	ands	r3, r2
 800560e:	4a0d      	ldr	r2, [pc, #52]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005610:	430b      	orrs	r3, r1
 8005612:	6113      	str	r3, [r2, #16]
 8005614:	e005      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005616:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	4a0a      	ldr	r2, [pc, #40]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800561c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005620:	6113      	str	r3, [r2, #16]
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005624:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800562e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005632:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005634:	430b      	orrs	r3, r1
 8005636:	6713      	str	r3, [r2, #112]	@ 0x70
 8005638:	e00e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800563a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800563e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005644:	58024400 	.word	0x58024400
 8005648:	58024800 	.word	0x58024800
 800564c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f002 0301 	and.w	r3, r2, #1
 8005664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005668:	2300      	movs	r3, #0
 800566a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800566e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005672:	460b      	mov	r3, r1
 8005674:	4313      	orrs	r3, r2
 8005676:	f000 8089 	beq.w	800578c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005680:	2b28      	cmp	r3, #40	@ 0x28
 8005682:	d86b      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005684:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	08005765 	.word	0x08005765
 8005690:	0800575d 	.word	0x0800575d
 8005694:	0800575d 	.word	0x0800575d
 8005698:	0800575d 	.word	0x0800575d
 800569c:	0800575d 	.word	0x0800575d
 80056a0:	0800575d 	.word	0x0800575d
 80056a4:	0800575d 	.word	0x0800575d
 80056a8:	0800575d 	.word	0x0800575d
 80056ac:	08005731 	.word	0x08005731
 80056b0:	0800575d 	.word	0x0800575d
 80056b4:	0800575d 	.word	0x0800575d
 80056b8:	0800575d 	.word	0x0800575d
 80056bc:	0800575d 	.word	0x0800575d
 80056c0:	0800575d 	.word	0x0800575d
 80056c4:	0800575d 	.word	0x0800575d
 80056c8:	0800575d 	.word	0x0800575d
 80056cc:	08005747 	.word	0x08005747
 80056d0:	0800575d 	.word	0x0800575d
 80056d4:	0800575d 	.word	0x0800575d
 80056d8:	0800575d 	.word	0x0800575d
 80056dc:	0800575d 	.word	0x0800575d
 80056e0:	0800575d 	.word	0x0800575d
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	0800575d 	.word	0x0800575d
 80056ec:	08005765 	.word	0x08005765
 80056f0:	0800575d 	.word	0x0800575d
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	0800575d 	.word	0x0800575d
 80056fc:	0800575d 	.word	0x0800575d
 8005700:	0800575d 	.word	0x0800575d
 8005704:	0800575d 	.word	0x0800575d
 8005708:	0800575d 	.word	0x0800575d
 800570c:	08005765 	.word	0x08005765
 8005710:	0800575d 	.word	0x0800575d
 8005714:	0800575d 	.word	0x0800575d
 8005718:	0800575d 	.word	0x0800575d
 800571c:	0800575d 	.word	0x0800575d
 8005720:	0800575d 	.word	0x0800575d
 8005724:	0800575d 	.word	0x0800575d
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005765 	.word	0x08005765
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005734:	3308      	adds	r3, #8
 8005736:	2101      	movs	r1, #1
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fd05 	bl	8006148 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005744:	e00f      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	3328      	adds	r3, #40	@ 0x28
 800574c:	2101      	movs	r1, #1
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fdac 	bl	80062ac <RCCEx_PLL3_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800575a:	e004      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005762:	e000      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800576e:	4bbf      	ldr	r3, [pc, #764]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005772:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800577c:	4abb      	ldr	r2, [pc, #748]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800577e:	430b      	orrs	r3, r1
 8005780:	6553      	str	r3, [r2, #84]	@ 0x54
 8005782:	e003      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 0302 	and.w	r3, r2, #2
 8005798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d041      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d824      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005809 	.word	0x08005809
 80057c0:	080057d5 	.word	0x080057d5
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	08005809 	.word	0x08005809
 80057cc:	08005809 	.word	0x08005809
 80057d0:	08005809 	.word	0x08005809
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d8:	3308      	adds	r3, #8
 80057da:	2101      	movs	r1, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fcb3 	bl	8006148 <RCCEx_PLL2_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057e8:	e00f      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	3328      	adds	r3, #40	@ 0x28
 80057f0:	2101      	movs	r1, #1
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd5a 	bl	80062ac <RCCEx_PLL3_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057fe:	e004      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005806:	e000      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005812:	4b96      	ldr	r3, [pc, #600]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	f023 0107 	bic.w	r1, r3, #7
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005820:	4a92      	ldr	r2, [pc, #584]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005822:	430b      	orrs	r3, r1
 8005824:	6553      	str	r3, [r2, #84]	@ 0x54
 8005826:	e003      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f002 0304 	and.w	r3, r2, #4
 800583c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005840:	2300      	movs	r3, #0
 8005842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005846:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800584a:	460b      	mov	r3, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	d044      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005858:	2b05      	cmp	r3, #5
 800585a:	d825      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	080058b1 	.word	0x080058b1
 8005868:	0800587d 	.word	0x0800587d
 800586c:	08005893 	.word	0x08005893
 8005870:	080058b1 	.word	0x080058b1
 8005874:	080058b1 	.word	0x080058b1
 8005878:	080058b1 	.word	0x080058b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	3308      	adds	r3, #8
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fc5f 	bl	8006148 <RCCEx_PLL2_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005890:	e00f      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	3328      	adds	r3, #40	@ 0x28
 8005898:	2101      	movs	r1, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fd06 	bl	80062ac <RCCEx_PLL3_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058a6:	e004      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ae:	e000      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80058b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ba:	4b6c      	ldr	r3, [pc, #432]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058be:	f023 0107 	bic.w	r1, r3, #7
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ca:	4a68      	ldr	r2, [pc, #416]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f002 0320 	and.w	r3, r2, #32
 80058e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058f4:	460b      	mov	r3, r1
 80058f6:	4313      	orrs	r3, r2
 80058f8:	d055      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005906:	d033      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800590c:	d82c      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005912:	d02f      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005918:	d826      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800591a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800591e:	d02b      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005920:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005924:	d820      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592a:	d012      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005930:	d81a      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d022      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800593a:	d115      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005940:	3308      	adds	r3, #8
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fbff 	bl	8006148 <RCCEx_PLL2_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005950:	e015      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3328      	adds	r3, #40	@ 0x28
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fca6 	bl	80062ac <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005966:	e00a      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800596e:	e006      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005970:	bf00      	nop
 8005972:	e004      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005974:	bf00      	nop
 8005976:	e002      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005978:	bf00      	nop
 800597a:	e000      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800597c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005986:	4b39      	ldr	r3, [pc, #228]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6553      	str	r3, [r2, #84]	@ 0x54
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d058      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059d2:	d033      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059d8:	d82c      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059de:	d02f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80059e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e4:	d826      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059ea:	d02b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80059ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059f0:	d820      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f6:	d012      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80059f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059fc:	d81a      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d022      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a06:	d115      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fb99 	bl	8006148 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a1c:	e015      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	3328      	adds	r3, #40	@ 0x28
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fc40 	bl	80062ac <RCCEx_PLL3_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a32:	e00a      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a3a:	e006      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e004      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a40:	bf00      	nop
 8005a42:	e002      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10e      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a62:	4a02      	ldr	r2, [pc, #8]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a6a:	bf00      	nop
 8005a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d055      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aa0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005aa4:	d033      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005aa6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005aaa:	d82c      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab0:	d02f      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab6:	d826      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ab8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005abc:	d02b      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005abe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ac2:	d820      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ac8:	d012      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ace:	d81a      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d022      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad8:	d115      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	3308      	adds	r3, #8
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fb30 	bl	8006148 <RCCEx_PLL2_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005aee:	e015      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	3328      	adds	r3, #40	@ 0x28
 8005af6:	2102      	movs	r1, #2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fbd7 	bl	80062ac <RCCEx_PLL3_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b04:	e00a      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b0c:	e006      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e004      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b24:	4ba1      	ldr	r3, [pc, #644]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b28:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b34:	4a9d      	ldr	r2, [pc, #628]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3a:	e003      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f002 0308 	and.w	r3, r2, #8
 8005b50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d01e      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	3328      	adds	r3, #40	@ 0x28
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fb96 	bl	80062ac <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b8c:	4b87      	ldr	r3, [pc, #540]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b9c:	4a83      	ldr	r2, [pc, #524]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f002 0310 	and.w	r3, r2, #16
 8005bae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d01e      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bce:	d10c      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	3328      	adds	r3, #40	@ 0x28
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fb67 	bl	80062ac <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bea:	4b70      	ldr	r3, [pc, #448]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	d03e      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c2c:	d022      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c32:	d81b      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c3c:	d00b      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c3e:	e015      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c44:	3308      	adds	r3, #8
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa7d 	bl	8006148 <RCCEx_PLL2_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c54:	e00f      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5a:	3328      	adds	r3, #40	@ 0x28
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fb24 	bl	80062ac <RCCEx_PLL3_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c6a:	e004      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c8e:	4a47      	ldr	r2, [pc, #284]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c94:	e003      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005caa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cac:	2300      	movs	r3, #0
 8005cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	d03b      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc6:	d01f      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005cc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ccc:	d818      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d007      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cda:	e011      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4b33      	ldr	r3, [pc, #204]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4a32      	ldr	r2, [pc, #200]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ce8:	e00f      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	3328      	adds	r3, #40	@ 0x28
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fada 	bl	80062ac <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cfe:	e004      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d06:	e000      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d12:	4b26      	ldr	r3, [pc, #152]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d22:	4a22      	ldr	r2, [pc, #136]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d28:	e003      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d40:	2300      	movs	r3, #0
 8005d42:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	d034      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d5c:	d007      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d5e:	e011      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d6c:	e00e      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2102      	movs	r1, #2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f9e6 	bl	8006148 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d82:	e003      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10d      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da2:	4a02      	ldr	r2, [pc, #8]	@ (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d00c      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	3328      	adds	r3, #40	@ 0x28
 8005dda:	2102      	movs	r1, #2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fa65 	bl	80062ac <RCCEx_PLL3_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d038      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e16:	d018      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005e18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e1c:	d811      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e22:	d014      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e28:	d80b      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e32:	d106      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e34:	4bc3      	ldr	r3, [pc, #780]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	4ac2      	ldr	r2, [pc, #776]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e48:	e004      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e5c:	4bb9      	ldr	r3, [pc, #740]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6c:	4ab5      	ldr	r2, [pc, #724]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e72:	e003      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005e92:	460b      	mov	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e98:	4baa      	ldr	r3, [pc, #680]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea6:	4aa7      	ldr	r2, [pc, #668]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005eb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eba:	2300      	movs	r3, #0
 8005ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ebe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ec8:	4b9e      	ldr	r3, [pc, #632]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ed8:	4a9a      	ldr	r2, [pc, #616]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eec:	2300      	movs	r3, #0
 8005eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005efa:	4b92      	ldr	r3, [pc, #584]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f08:	4a8e      	ldr	r2, [pc, #568]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f2a:	4b86      	ldr	r3, [pc, #536]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4a85      	ldr	r2, [pc, #532]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f34:	6113      	str	r3, [r2, #16]
 8005f36:	4b83      	ldr	r3, [pc, #524]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f38:	6919      	ldr	r1, [r3, #16]
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f42:	4a80      	ldr	r2, [pc, #512]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f56:	2300      	movs	r3, #0
 8005f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f64:	4b77      	ldr	r3, [pc, #476]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f68:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	4a74      	ldr	r2, [pc, #464]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f74:	430b      	orrs	r3, r1
 8005f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f94:	4b6b      	ldr	r3, [pc, #428]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f98:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fa4:	4a67      	ldr	r2, [pc, #412]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d011      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	3308      	adds	r3, #8
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f8ba 	bl	8006148 <RCCEx_PLL2_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	6239      	str	r1, [r7, #32]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	d011      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3308      	adds	r3, #8
 800600c:	2101      	movs	r1, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f89a 	bl	8006148 <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	2100      	movs	r1, #0
 8006034:	61b9      	str	r1, [r7, #24]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006040:	460b      	mov	r3, r1
 8006042:	4313      	orrs	r3, r2
 8006044:	d011      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3308      	adds	r3, #8
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f87a 	bl	8006148 <RCCEx_PLL2_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800605a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	2100      	movs	r1, #0
 8006074:	6139      	str	r1, [r7, #16]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006080:	460b      	mov	r3, r1
 8006082:	4313      	orrs	r3, r2
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	3328      	adds	r3, #40	@ 0x28
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f000 f90c 	bl	80062ac <RCCEx_PLL3_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	2100      	movs	r1, #0
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d011      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	3328      	adds	r3, #40	@ 0x28
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 f8ec 	bl	80062ac <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	2100      	movs	r1, #0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006100:	460b      	mov	r3, r1
 8006102:	4313      	orrs	r3, r2
 8006104:	d011      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	3328      	adds	r3, #40	@ 0x28
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f8cc 	bl	80062ac <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800611a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800612a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
}
 8006138:	4618      	mov	r0, r3
 800613a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800613e:	46bd      	mov	sp, r7
 8006140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006144:	58024400 	.word	0x58024400

08006148 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006156:	4b53      	ldr	r3, [pc, #332]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b03      	cmp	r3, #3
 8006160:	d101      	bne.n	8006166 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e099      	b.n	800629a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006166:	4b4f      	ldr	r3, [pc, #316]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4e      	ldr	r2, [pc, #312]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800616c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006172:	f7fa ffab 	bl	80010cc <HAL_GetTick>
 8006176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006178:	e008      	b.n	800618c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800617a:	f7fa ffa7 	bl	80010cc <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e086      	b.n	800629a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800618c:	4b45      	ldr	r3, [pc, #276]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006198:	4b42      	ldr	r3, [pc, #264]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	031b      	lsls	r3, r3, #12
 80061a6:	493f      	ldr	r1, [pc, #252]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	025b      	lsls	r3, r3, #9
 80061be:	b29b      	uxth	r3, r3
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061dc:	4931      	ldr	r1, [pc, #196]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061e2:	4b30      	ldr	r3, [pc, #192]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	492d      	ldr	r1, [pc, #180]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061f4:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f8:	f023 0220 	bic.w	r2, r3, #32
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4928      	ldr	r1, [pc, #160]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006206:	4b27      	ldr	r3, [pc, #156]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4a26      	ldr	r2, [pc, #152]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f023 0310 	bic.w	r3, r3, #16
 8006210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006212:	4b24      	ldr	r3, [pc, #144]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006216:	4b24      	ldr	r3, [pc, #144]	@ (80062a8 <RCCEx_PLL2_Config+0x160>)
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	69d2      	ldr	r2, [r2, #28]
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	4920      	ldr	r1, [pc, #128]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006226:	4b1f      	ldr	r3, [pc, #124]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800622c:	f043 0310 	orr.w	r3, r3, #16
 8006230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006238:	4b1a      	ldr	r3, [pc, #104]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800623e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006242:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006244:	e00f      	b.n	8006266 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800624c:	4b15      	ldr	r3, [pc, #84]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	4a14      	ldr	r2, [pc, #80]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006258:	e005      	b.n	8006266 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800625a:	4b12      	ldr	r3, [pc, #72]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4a11      	ldr	r2, [pc, #68]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006264:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006266:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a0e      	ldr	r2, [pc, #56]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800626c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006272:	f7fa ff2b 	bl	80010cc <HAL_GetTick>
 8006276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006278:	e008      	b.n	800628c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800627a:	f7fa ff27 	bl	80010cc <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e006      	b.n	800629a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <RCCEx_PLL2_Config+0x15c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	ffff0007 	.word	0xffff0007

080062ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ba:	4b53      	ldr	r3, [pc, #332]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d101      	bne.n	80062ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e099      	b.n	80063fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a4e      	ldr	r2, [pc, #312]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d6:	f7fa fef9 	bl	80010cc <HAL_GetTick>
 80062da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062dc:	e008      	b.n	80062f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062de:	f7fa fef5 	bl	80010cc <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e086      	b.n	80063fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062f0:	4b45      	ldr	r3, [pc, #276]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f0      	bne.n	80062de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062fc:	4b42      	ldr	r3, [pc, #264]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006300:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	051b      	lsls	r3, r3, #20
 800630a:	493f      	ldr	r1, [pc, #252]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	3b01      	subs	r3, #1
 8006316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	025b      	lsls	r3, r3, #9
 8006322:	b29b      	uxth	r3, r3
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	3b01      	subs	r3, #1
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	3b01      	subs	r3, #1
 800633a:	061b      	lsls	r3, r3, #24
 800633c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006340:	4931      	ldr	r1, [pc, #196]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006342:	4313      	orrs	r3, r2
 8006344:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006346:	4b30      	ldr	r3, [pc, #192]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	492d      	ldr	r1, [pc, #180]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006354:	4313      	orrs	r3, r2
 8006356:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006358:	4b2b      	ldr	r3, [pc, #172]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	4928      	ldr	r1, [pc, #160]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800636a:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	4a26      	ldr	r2, [pc, #152]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006376:	4b24      	ldr	r3, [pc, #144]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637a:	4b24      	ldr	r3, [pc, #144]	@ (800640c <RCCEx_PLL3_Config+0x160>)
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	69d2      	ldr	r2, [r2, #28]
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	4920      	ldr	r1, [pc, #128]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800638a:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	4a1e      	ldr	r2, [pc, #120]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 8006390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800639c:	4b1a      	ldr	r3, [pc, #104]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063a8:	e00f      	b.n	80063ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d106      	bne.n	80063be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063b0:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	4a14      	ldr	r2, [pc, #80]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063bc:	e005      	b.n	80063ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063be:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	4a11      	ldr	r2, [pc, #68]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d6:	f7fa fe79 	bl	80010cc <HAL_GetTick>
 80063da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063dc:	e008      	b.n	80063f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063de:	f7fa fe75 	bl	80010cc <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e006      	b.n	80063fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <RCCEx_PLL3_Config+0x15c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	58024400 	.word	0x58024400
 800640c:	ffff0007 	.word	0xffff0007

08006410 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e10f      	b.n	8006642 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a87      	ldr	r2, [pc, #540]	@ (800664c <HAL_SPI_Init+0x23c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <HAL_SPI_Init+0x42>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a86      	ldr	r2, [pc, #536]	@ (8006650 <HAL_SPI_Init+0x240>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00a      	beq.n	8006452 <HAL_SPI_Init+0x42>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a84      	ldr	r2, [pc, #528]	@ (8006654 <HAL_SPI_Init+0x244>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d005      	beq.n	8006452 <HAL_SPI_Init+0x42>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d901      	bls.n	8006452 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0f7      	b.n	8006642 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 ff6c 	bl	8007330 <SPI_GetPacketSize>
 8006458:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7b      	ldr	r2, [pc, #492]	@ (800664c <HAL_SPI_Init+0x23c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00c      	beq.n	800647e <HAL_SPI_Init+0x6e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a79      	ldr	r2, [pc, #484]	@ (8006650 <HAL_SPI_Init+0x240>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <HAL_SPI_Init+0x6e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a78      	ldr	r2, [pc, #480]	@ (8006654 <HAL_SPI_Init+0x244>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d002      	beq.n	800647e <HAL_SPI_Init+0x6e>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b08      	cmp	r3, #8
 800647c:	d811      	bhi.n	80064a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006482:	4a72      	ldr	r2, [pc, #456]	@ (800664c <HAL_SPI_Init+0x23c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a70      	ldr	r2, [pc, #448]	@ (8006650 <HAL_SPI_Init+0x240>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_SPI_Init+0x8c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a6f      	ldr	r2, [pc, #444]	@ (8006654 <HAL_SPI_Init+0x244>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d104      	bne.n	80064a6 <HAL_SPI_Init+0x96>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b10      	cmp	r3, #16
 80064a0:	d901      	bls.n	80064a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e0cd      	b.n	8006642 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fa fb6c 	bl	8000b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80064e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064ec:	d119      	bne.n	8006522 <HAL_SPI_Init+0x112>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064f6:	d103      	bne.n	8006500 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10c      	bne.n	8006522 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800650c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006510:	d107      	bne.n	8006522 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006520:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00f      	beq.n	800654e <HAL_SPI_Init+0x13e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b06      	cmp	r3, #6
 8006534:	d90b      	bls.n	800654e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e007      	b.n	800655e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800655c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	431a      	orrs	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	ea42 0103 	orr.w	r1, r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065be:	ea42 0103 	orr.w	r1, r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d113      	bne.n	80065fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40013000 	.word	0x40013000
 8006650:	40003800 	.word	0x40003800
 8006654:	40003c00 	.word	0x40003c00

08006658 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3320      	adds	r3, #32
 800666e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006670:	f7fa fd2c 	bl	80010cc <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b01      	cmp	r3, #1
 8006680:	d001      	beq.n	8006686 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
 8006684:	e1d1      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_SPI_Transmit+0x3a>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e1c9      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_SPI_Transmit+0x4c>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e1c2      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2203      	movs	r2, #3
 80066b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80066fc:	d108      	bne.n	8006710 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e009      	b.n	8006724 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006722:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	4b96      	ldr	r3, [pc, #600]	@ (8006984 <HAL_SPI_Transmit+0x32c>)
 800672c:	4013      	ands	r3, r2
 800672e:	88f9      	ldrh	r1, [r7, #6]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	430b      	orrs	r3, r1
 8006736:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006750:	d107      	bne.n	8006762 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	d947      	bls.n	80067fa <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800676a:	e03f      	b.n	80067ec <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d114      	bne.n	80067a4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067a2:	e023      	b.n	80067ec <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a4:	f7fa fc92 	bl	80010cc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d803      	bhi.n	80067bc <HAL_SPI_Transmit+0x164>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_Transmit+0x16a>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d114      	bne.n	80067ec <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fce6 	bl	8007194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e11e      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1b9      	bne.n	800676c <HAL_SPI_Transmit+0x114>
 80067f8:	e0f1      	b.n	80069de <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b07      	cmp	r3, #7
 8006800:	f240 80e6 	bls.w	80069d0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006804:	e05d      	b.n	80068c2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d132      	bne.n	800687a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d918      	bls.n	8006852 <HAL_SPI_Transmit+0x1fa>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d014      	beq.n	8006852 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b02      	subs	r3, #2
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006850:	e037      	b.n	80068c2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006860:	1c9a      	adds	r2, r3, #2
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006878:	e023      	b.n	80068c2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800687a:	f7fa fc27 	bl	80010cc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d803      	bhi.n	8006892 <HAL_SPI_Transmit+0x23a>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d102      	bne.n	8006898 <HAL_SPI_Transmit+0x240>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d114      	bne.n	80068c2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fc7b 	bl	8007194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e0b3      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d19b      	bne.n	8006806 <HAL_SPI_Transmit+0x1ae>
 80068ce:	e086      	b.n	80069de <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d154      	bne.n	8006988 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d918      	bls.n	800691c <HAL_SPI_Transmit+0x2c4>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d914      	bls.n	800691c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b04      	subs	r3, #4
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800691a:	e059      	b.n	80069d0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d917      	bls.n	8006958 <HAL_SPI_Transmit+0x300>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d013      	beq.n	8006958 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693e:	1c9a      	adds	r2, r3, #2
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b02      	subs	r3, #2
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006956:	e03b      	b.n	80069d0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3320      	adds	r3, #32
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006982:	e025      	b.n	80069d0 <HAL_SPI_Transmit+0x378>
 8006984:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006988:	f7fa fba0 	bl	80010cc <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d803      	bhi.n	80069a0 <HAL_SPI_Transmit+0x348>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d102      	bne.n	80069a6 <HAL_SPI_Transmit+0x34e>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d114      	bne.n	80069d0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fbf4 	bl	8007194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e02c      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f47f af79 	bne.w	80068d0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2108      	movs	r1, #8
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fc73 	bl	80072d4 <SPI_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fbc5 	bl	8007194 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop

08006a34 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e126      	b.n	8006ca0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_Transmit_DMA+0x2a>
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e11e      	b.n	8006ca0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_SPI_Transmit_DMA+0x3c>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e117      	b.n	8006ca0 <HAL_SPI_Transmit_DMA+0x26c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	88fa      	ldrh	r2, [r7, #6]
 8006a9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006ac8:	d108      	bne.n	8006adc <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e009      	b.n	8006af0 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006aee:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d905      	bls.n	8006b04 <HAL_SPI_Transmit_DMA+0xd0>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b02:	d10f      	bne.n	8006b24 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006b08:	2b07      	cmp	r3, #7
 8006b0a:	d911      	bls.n	8006b30 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b16:	d00b      	beq.n	8006b30 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b1c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b22:	d005      	beq.n	8006b30 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0b7      	b.n	8006ca0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b07      	cmp	r3, #7
 8006b36:	d820      	bhi.n	8006b7a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b42:	d109      	bne.n	8006b58 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	105b      	asrs	r3, r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b62:	d11e      	bne.n	8006ba2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3303      	adds	r3, #3
 8006b6e:	109b      	asrs	r3, r3, #2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b78:	e013      	b.n	8006ba2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d80f      	bhi.n	8006ba2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b8c:	d109      	bne.n	8006ba2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3301      	adds	r3, #1
 8006b98:	105b      	asrs	r3, r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ba6:	4a40      	ldr	r2, [pc, #256]	@ (8006ca8 <HAL_SPI_Transmit_DMA+0x274>)
 8006ba8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bae:	4a3f      	ldr	r2, [pc, #252]	@ (8006cac <HAL_SPI_Transmit_DMA+0x278>)
 8006bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <HAL_SPI_Transmit_DMA+0x27c>)
 8006bb8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bd0:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3320      	adds	r3, #32
 8006be2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006bec:	f7fa ff16 	bl	8001a1c <HAL_DMA_Start_IT>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bfc:	f043 0210 	orr.w	r2, r3, #16
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e042      	b.n	8006ca0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c24:	d108      	bne.n	8006c38 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6859      	ldr	r1, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b20      	ldr	r3, [pc, #128]	@ (8006cb4 <HAL_SPI_Transmit_DMA+0x280>)
 8006c32:	400b      	ands	r3, r1
 8006c34:	6053      	str	r3, [r2, #4]
 8006c36:	e009      	b.n	8006c4c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb4 <HAL_SPI_Transmit_DMA+0x280>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	88f9      	ldrh	r1, [r7, #6]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c5a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8006c6a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c84:	d107      	bne.n	8006c96 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c94:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	080070ff 	.word	0x080070ff
 8006cac:	080070b9 	.word	0x080070b9
 8006cb0:	0800711b 	.word	0x0800711b
 8006cb4:	ffff0000 	.word	0xffff0000

08006cb8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	@ 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cea:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3330      	adds	r3, #48	@ 0x30
 8006cf2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d010      	beq.n	8006d20 <HAL_SPI_IRQHandler+0x68>
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d16:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9c3 	bl	80070a4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8006d1e:	e192      	b.n	8007046 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d113      	bne.n	8006d52 <HAL_SPI_IRQHandler+0x9a>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10e      	bne.n	8006d52 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
    handled = 1UL;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10f      	bne.n	8006d7c <HAL_SPI_IRQHandler+0xc4>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
    handled = 1UL;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <HAL_SPI_IRQHandler+0xee>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
    handled = 1UL;
 8006da2:	2301      	movs	r3, #1
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8147 	bne.w	800703c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 808b 	beq.w	8006ed0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0208 	orr.w	r2, r2, #8
 8006dc8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0210 	orr.w	r2, r2, #16
 8006dd8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0208 	bic.w	r2, r2, #8
 8006df8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d13d      	bne.n	8006e84 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006e08:	e036      	b.n	8006e78 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b0f      	cmp	r3, #15
 8006e10:	d90b      	bls.n	8006e2a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e1c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	665a      	str	r2, [r3, #100]	@ 0x64
 8006e28:	e01d      	b.n	8006e66 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2b07      	cmp	r3, #7
 8006e30:	d90b      	bls.n	8006e4a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	8812      	ldrh	r2, [r2, #0]
 8006e3a:	b292      	uxth	r2, r2
 8006e3c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e42:	1c9a      	adds	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	665a      	str	r2, [r3, #100]	@ 0x64
 8006e48:	e00d      	b.n	8006e66 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1c2      	bne.n	8006e0a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f985 	bl	8007194 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8f7 	bl	8007090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ea2:	e0d0      	b.n	8007046 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006ea4:	7cfb      	ldrb	r3, [r7, #19]
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d103      	bne.n	8006eb2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8dc 	bl	8007068 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006eb0:	e0c6      	b.n	8007040 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006eb2:	7cfb      	ldrb	r3, [r7, #19]
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d103      	bne.n	8006ec0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8cb 	bl	8007054 <HAL_SPI_RxCpltCallback>
    return;
 8006ebe:	e0bf      	b.n	8007040 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006ec0:	7cfb      	ldrb	r3, [r7, #19]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	f040 80bc 	bne.w	8007040 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7f9 fc81 	bl	80007d0 <HAL_SPI_TxCpltCallback>
    return;
 8006ece:	e0b7      	b.n	8007040 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 80b5 	beq.w	8007046 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eec:	f043 0204 	orr.w	r2, r3, #4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f04:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00f      	beq.n	8006f30 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f16:	f043 0201 	orr.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f40:	f043 0208 	orr.w	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f58:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0220 	orr.w	r2, r2, #32
 8006f82:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d05a      	beq.n	8007044 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6919      	ldr	r1, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b28      	ldr	r3, [pc, #160]	@ (800704c <HAL_SPI_IRQHandler+0x394>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fb4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006fb8:	d138      	bne.n	800702c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006fc8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d013      	beq.n	8006ffa <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007050 <HAL_SPI_IRQHandler+0x398>)
 8006fd8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fa ff86 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d020      	beq.n	8007044 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007006:	4a12      	ldr	r2, [pc, #72]	@ (8007050 <HAL_SPI_IRQHandler+0x398>)
 8007008:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa ff6e 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d014      	beq.n	8007044 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007020:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800702a:	e00b      	b.n	8007044 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f82b 	bl	8007090 <HAL_SPI_ErrorCallback>
    return;
 800703a:	e003      	b.n	8007044 <HAL_SPI_IRQHandler+0x38c>
    return;
 800703c:	bf00      	nop
 800703e:	e002      	b.n	8007046 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007044:	bf00      	nop
  }
}
 8007046:	3728      	adds	r7, #40	@ 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	fffffc94 	.word	0xfffffc94
 8007050:	08007161 	.word	0x08007161

08007054 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b07      	cmp	r3, #7
 80070d0:	d011      	beq.n	80070f6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070dc:	d103      	bne.n	80070e6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7f9 fb76 	bl	80007d0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80070e4:	e007      	b.n	80070f6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0208 	orr.w	r2, r2, #8
 80070f4:	611a      	str	r2, [r3, #16]
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff ffb5 	bl	800707c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fc f851 	bl	80031d0 <HAL_DMA_GetError>
 800712e:	4603      	mov	r3, r0
 8007130:	2b02      	cmp	r3, #2
 8007132:	d011      	beq.n	8007158 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f82d 	bl	8007194 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007140:	f043 0210 	orr.w	r2, r3, #16
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff ff9c 	bl	8007090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff ff82 	bl	8007090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0208 	orr.w	r2, r2, #8
 80071b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0210 	orr.w	r2, r2, #16
 80071c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6919      	ldr	r1, [r3, #16]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b3c      	ldr	r3, [pc, #240]	@ (80072d0 <SPI_CloseTransfer+0x13c>)
 80071e0:	400b      	ands	r3, r1
 80071e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80071f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d014      	beq.n	800722a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00f      	beq.n	800722a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007210:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0220 	orr.w	r2, r2, #32
 8007228:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d014      	beq.n	8007260 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800725e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00f      	beq.n	800728a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007270:	f043 0201 	orr.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007288:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00f      	beq.n	80072b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800729a:	f043 0208 	orr.w	r2, r3, #8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	fffffc90 	.word	0xfffffc90

080072d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	4613      	mov	r3, r2
 80072e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80072e4:	e010      	b.n	8007308 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e6:	f7f9 fef1 	bl	80010cc <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d803      	bhi.n	80072fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d102      	bne.n	8007304 <SPI_WaitOnFlagUntilTimeout+0x30>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e00f      	b.n	8007328 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4013      	ands	r3, r2
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	429a      	cmp	r2, r3
 8007324:	d0df      	beq.n	80072e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3307      	adds	r3, #7
 800734e:	08db      	lsrs	r3, r3, #3
 8007350:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	fb02 f303 	mul.w	r3, r2, r3
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <memset>:
 8007366:	4402      	add	r2, r0
 8007368:	4603      	mov	r3, r0
 800736a:	4293      	cmp	r3, r2
 800736c:	d100      	bne.n	8007370 <memset+0xa>
 800736e:	4770      	bx	lr
 8007370:	f803 1b01 	strb.w	r1, [r3], #1
 8007374:	e7f9      	b.n	800736a <memset+0x4>
	...

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4d0d      	ldr	r5, [pc, #52]	@ (80073b0 <__libc_init_array+0x38>)
 800737c:	4c0d      	ldr	r4, [pc, #52]	@ (80073b4 <__libc_init_array+0x3c>)
 800737e:	1b64      	subs	r4, r4, r5
 8007380:	10a4      	asrs	r4, r4, #2
 8007382:	2600      	movs	r6, #0
 8007384:	42a6      	cmp	r6, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4d0b      	ldr	r5, [pc, #44]	@ (80073b8 <__libc_init_array+0x40>)
 800738a:	4c0c      	ldr	r4, [pc, #48]	@ (80073bc <__libc_init_array+0x44>)
 800738c:	f000 f818 	bl	80073c0 <_init>
 8007390:	1b64      	subs	r4, r4, r5
 8007392:	10a4      	asrs	r4, r4, #2
 8007394:	2600      	movs	r6, #0
 8007396:	42a6      	cmp	r6, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a0:	4798      	blx	r3
 80073a2:	3601      	adds	r6, #1
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073aa:	4798      	blx	r3
 80073ac:	3601      	adds	r6, #1
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	080073f0 	.word	0x080073f0
 80073b4:	080073f0 	.word	0x080073f0
 80073b8:	080073f0 	.word	0x080073f0
 80073bc:	080073f4 	.word	0x080073f4

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
