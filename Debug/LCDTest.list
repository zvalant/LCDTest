
LCDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f0c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080091a4  080091a4  0000a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091e8  080091e8  0000a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080091ec  080091ec  0000a1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  080091f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d0  2400002c  0800921c  0000b02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001fc  0800921c  0000b1fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000145a5  00000000  00000000  0000b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000298f  00000000  00000000  0001f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc0  00000000  00000000  00021f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a86  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037add  00000000  00000000  000237d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015083  00000000  00000000  0005b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eac2  00000000  00000000  00070336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cedf8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003828  00000000  00000000  001cee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001d2664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800918c 	.word	0x0800918c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	0800918c 	.word	0x0800918c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ILI9341_RGB565WritePixel>:
#include <ili9341_driver.h>
#include "gfx.h"



void ILI9341_RGB565WritePixel(uint32_t i , uint8_t r, uint8_t g, uint8_t b, uint8_t* frameBuffer){
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	4608      	mov	r0, r1
 800060e:	4611      	mov	r1, r2
 8000610:	461a      	mov	r2, r3
 8000612:	4603      	mov	r3, r0
 8000614:	70fb      	strb	r3, [r7, #3]
 8000616:	460b      	mov	r3, r1
 8000618:	70bb      	strb	r3, [r7, #2]
 800061a:	4613      	mov	r3, r2
 800061c:	707b      	strb	r3, [r7, #1]
	uint16_t data = ((r>>3)<<11)|((g>>2)<<5)|(b>>3);
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	08db      	lsrs	r3, r3, #3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	b21b      	sxth	r3, r3
 8000626:	02db      	lsls	r3, r3, #11
 8000628:	b21a      	sxth	r2, r3
 800062a:	78bb      	ldrb	r3, [r7, #2]
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	b21b      	sxth	r3, r3
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21a      	sxth	r2, r3
 800063a:	787b      	ldrb	r3, [r7, #1]
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b21b      	sxth	r3, r3
 8000642:	4313      	orrs	r3, r2
 8000644:	b21b      	sxth	r3, r3
 8000646:	81fb      	strh	r3, [r7, #14]
	uint8_t highByte = data>>8;
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	737b      	strb	r3, [r7, #13]
	uint8_t lowByte = data&0xFF;
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	733b      	strb	r3, [r7, #12]
	frameBuffer[i*2] = highByte;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	7b7a      	ldrb	r2, [r7, #13]
 800065e:	701a      	strb	r2, [r3, #0]
	frameBuffer[(i*2)+1] = lowByte;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	3301      	adds	r3, #1
 8000666:	69ba      	ldr	r2, [r7, #24]
 8000668:	4413      	add	r3, r2
 800066a:	7b3a      	ldrb	r2, [r7, #12]
 800066c:	701a      	strb	r2, [r3, #0]



}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <ILI9341_WritePixel>:
void ILI9341_WritePixel(uint32_t i, uint16_t color, uint8_t* frameBuffer){
 800067a:	b480      	push	{r7}
 800067c:	b087      	sub	sp, #28
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	460b      	mov	r3, r1
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	817b      	strh	r3, [r7, #10]
	uint8_t highByte = color >>8;
 8000688:	897b      	ldrh	r3, [r7, #10]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	75fb      	strb	r3, [r7, #23]
	uint8_t lowByte = color&0xFF;
 8000690:	897b      	ldrh	r3, [r7, #10]
 8000692:	75bb      	strb	r3, [r7, #22]
	frameBuffer[i*2] = highByte;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	7dfa      	ldrb	r2, [r7, #23]
 800069e:	701a      	strb	r2, [r3, #0]
	frameBuffer[(i*2)+1] = lowByte;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	3301      	adds	r3, #1
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	7dba      	ldrb	r2, [r7, #22]
 80006ac:	701a      	strb	r2, [r3, #0]


}
 80006ae:	bf00      	nop
 80006b0:	371c      	adds	r7, #28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <ILI9341_StripeTest>:

void ILI9341_StripeTest( uint8_t rowCounter) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 80006c2:	b086      	sub	sp, #24
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	4602      	mov	r2, r0
 80006c8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80006cc:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 80006d0:	701a      	strb	r2, [r3, #0]

    uint8_t r255 = 255;
 80006d2:	23ff      	movs	r3, #255	@ 0xff
 80006d4:	4a4e      	ldr	r2, [pc, #312]	@ (8000810 <ILI9341_StripeTest+0x154>)
 80006d6:	443a      	add	r2, r7
 80006d8:	7013      	strb	r3, [r2, #0]
    uint8_t g255 = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	4a4d      	ldr	r2, [pc, #308]	@ (8000814 <ILI9341_StripeTest+0x158>)
 80006de:	443a      	add	r2, r7
 80006e0:	7013      	strb	r3, [r2, #0]
    uint8_t b255 = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000818 <ILI9341_StripeTest+0x15c>)
 80006e6:	443a      	add	r2, r7
 80006e8:	7013      	strb	r3, [r2, #0]
    uint8_t frameBuffer[153600];


    for(uint32_t i = 0; i < 76800; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	4a4b      	ldr	r2, [pc, #300]	@ (800081c <ILI9341_StripeTest+0x160>)
 80006ee:	443a      	add	r2, r7
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e074      	b.n	80007de <ILI9341_StripeTest+0x122>
    	if(i%1920==0){
 80006f4:	4b49      	ldr	r3, [pc, #292]	@ (800081c <ILI9341_StripeTest+0x160>)
 80006f6:	443b      	add	r3, r7
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <ILI9341_StripeTest+0x164>)
 80006fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000700:	0a9a      	lsrs	r2, r3, #10
 8000702:	4613      	mov	r3, r2
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	01db      	lsls	r3, r3, #7
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	2a00      	cmp	r2, #0
 800070e:	d149      	bne.n	80007a4 <ILI9341_StripeTest+0xe8>
    		rowCounter++;
 8000710:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000714:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800071e:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 8000722:	3201      	adds	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
    		switch(rowCounter%3){
 8000726:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800072a:	f6a3 0309 	subw	r3, r3, #2057	@ 0x809
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <ILI9341_StripeTest+0x168>)
 8000732:	fba3 1302 	umull	r1, r3, r3, r2
 8000736:	0859      	lsrs	r1, r3, #1
 8000738:	460b      	mov	r3, r1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	440b      	add	r3, r1
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b02      	cmp	r3, #2
 8000744:	d020      	beq.n	8000788 <ILI9341_StripeTest+0xcc>
 8000746:	2b02      	cmp	r3, #2
 8000748:	dc2b      	bgt.n	80007a2 <ILI9341_StripeTest+0xe6>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <ILI9341_StripeTest+0x98>
 800074e:	2b01      	cmp	r3, #1
 8000750:	d00d      	beq.n	800076e <ILI9341_StripeTest+0xb2>
    			r255 = 255;
    			g255 = 245;
    			b255 = 238;
    			break;
    		default:
    			break;
 8000752:	e026      	b.n	80007a2 <ILI9341_StripeTest+0xe6>
    			r255 = 255;
 8000754:	23ff      	movs	r3, #255	@ 0xff
 8000756:	4a2e      	ldr	r2, [pc, #184]	@ (8000810 <ILI9341_StripeTest+0x154>)
 8000758:	443a      	add	r2, r7
 800075a:	7013      	strb	r3, [r2, #0]
    			g255 = 127;
 800075c:	237f      	movs	r3, #127	@ 0x7f
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <ILI9341_StripeTest+0x158>)
 8000760:	443a      	add	r2, r7
 8000762:	7013      	strb	r3, [r2, #0]
    			b255 = 80;
 8000764:	2350      	movs	r3, #80	@ 0x50
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <ILI9341_StripeTest+0x15c>)
 8000768:	443a      	add	r2, r7
 800076a:	7013      	strb	r3, [r2, #0]
    			break;
 800076c:	e01a      	b.n	80007a4 <ILI9341_StripeTest+0xe8>
    			r255 = 46;
 800076e:	232e      	movs	r3, #46	@ 0x2e
 8000770:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <ILI9341_StripeTest+0x154>)
 8000772:	443a      	add	r2, r7
 8000774:	7013      	strb	r3, [r2, #0]
    			g255 = 139;
 8000776:	238b      	movs	r3, #139	@ 0x8b
 8000778:	4a26      	ldr	r2, [pc, #152]	@ (8000814 <ILI9341_StripeTest+0x158>)
 800077a:	443a      	add	r2, r7
 800077c:	7013      	strb	r3, [r2, #0]
    			b255 = 87;
 800077e:	2357      	movs	r3, #87	@ 0x57
 8000780:	4a25      	ldr	r2, [pc, #148]	@ (8000818 <ILI9341_StripeTest+0x15c>)
 8000782:	443a      	add	r2, r7
 8000784:	7013      	strb	r3, [r2, #0]
    			break;
 8000786:	e00d      	b.n	80007a4 <ILI9341_StripeTest+0xe8>
    			r255 = 255;
 8000788:	23ff      	movs	r3, #255	@ 0xff
 800078a:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <ILI9341_StripeTest+0x154>)
 800078c:	443a      	add	r2, r7
 800078e:	7013      	strb	r3, [r2, #0]
    			g255 = 245;
 8000790:	23f5      	movs	r3, #245	@ 0xf5
 8000792:	4a20      	ldr	r2, [pc, #128]	@ (8000814 <ILI9341_StripeTest+0x158>)
 8000794:	443a      	add	r2, r7
 8000796:	7013      	strb	r3, [r2, #0]
    			b255 = 238;
 8000798:	23ee      	movs	r3, #238	@ 0xee
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <ILI9341_StripeTest+0x15c>)
 800079c:	443a      	add	r2, r7
 800079e:	7013      	strb	r3, [r2, #0]
    			break;
 80007a0:	e000      	b.n	80007a4 <ILI9341_StripeTest+0xe8>
    			break;
 80007a2:	bf00      	nop
    		}

    	}
    	//ILI9341_WriteData16(color);
        ILI9341_RGB565WritePixel(i, r255,g255,b255, frameBuffer);
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <ILI9341_StripeTest+0x15c>)
 80007a6:	443b      	add	r3, r7
 80007a8:	7818      	ldrb	r0, [r3, #0]
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <ILI9341_StripeTest+0x158>)
 80007ac:	443b      	add	r3, r7
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <ILI9341_StripeTest+0x154>)
 80007b2:	443b      	add	r3, r7
 80007b4:	7819      	ldrb	r1, [r3, #0]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <ILI9341_StripeTest+0x16c>)
 80007b8:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007bc:	f103 0310 	add.w	r3, r3, #16
 80007c0:	443b      	add	r3, r7
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	4603      	mov	r3, r0
 80007c6:	4815      	ldr	r0, [pc, #84]	@ (800081c <ILI9341_StripeTest+0x160>)
 80007c8:	4438      	add	r0, r7
 80007ca:	6800      	ldr	r0, [r0, #0]
 80007cc:	f7ff ff1a 	bl	8000604 <ILI9341_RGB565WritePixel>
    for(uint32_t i = 0; i < 76800; i++) {
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <ILI9341_StripeTest+0x160>)
 80007d2:	443b      	add	r3, r7
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a10      	ldr	r2, [pc, #64]	@ (800081c <ILI9341_StripeTest+0x160>)
 80007da:	443a      	add	r2, r7
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <ILI9341_StripeTest+0x160>)
 80007e0:	443b      	add	r3, r7
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80007e8:	d384      	bcc.n	80006f4 <ILI9341_StripeTest+0x38>

    }// 240 * 320 pixels
    TransmitFrame(239, 319,&frameBuffer);
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <ILI9341_StripeTest+0x16c>)
 80007ec:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007f0:	f103 0310 	add.w	r3, r3, #16
 80007f4:	443b      	add	r3, r7
 80007f6:	461a      	mov	r2, r3
 80007f8:	f240 113f 	movw	r1, #319	@ 0x13f
 80007fc:	20ef      	movs	r0, #239	@ 0xef
 80007fe:	f000 f92f 	bl	8000a60 <TransmitFrame>

}
 8000802:	bf00      	nop
 8000804:	f507 3716 	add.w	r7, r7, #153600	@ 0x25800
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	0002580f 	.word	0x0002580f
 8000814:	0002580e 	.word	0x0002580e
 8000818:	0002580d 	.word	0x0002580d
 800081c:	00025808 	.word	0x00025808
 8000820:	88888889 	.word	0x88888889
 8000824:	aaaaaaab 	.word	0xaaaaaaab
 8000828:	fffda7f8 	.word	0xfffda7f8

0800082c <ILI9341_RGB565FillScreen>:

void ILI9341_RGB565FillScreen(uint16_t color){
 800082c:	b580      	push	{r7, lr}
 800082e:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4602      	mov	r2, r0
 8000838:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800083c:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000840:	801a      	strh	r2, [r3, #0]
	uint8_t frameBuffer[153600];
	for (uint32_t i = 0; i<76800;i++){
 8000842:	2300      	movs	r3, #0
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <ILI9341_RGB565FillScreen+0x80>)
 8000846:	443a      	add	r2, r7
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e017      	b.n	800087c <ILI9341_RGB565FillScreen+0x50>
		ILI9341_WritePixel(i,color,frameBuffer);
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <ILI9341_RGB565FillScreen+0x84>)
 800084e:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000852:	f103 0310 	add.w	r3, r3, #16
 8000856:	443b      	add	r3, r7
 8000858:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 800085c:	f6a2 020a 	subw	r2, r2, #2058	@ 0x80a
 8000860:	8811      	ldrh	r1, [r2, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <ILI9341_RGB565FillScreen+0x80>)
 8000866:	443b      	add	r3, r7
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	f7ff ff06 	bl	800067a <ILI9341_WritePixel>
	for (uint32_t i = 0; i<76800;i++){
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <ILI9341_RGB565FillScreen+0x80>)
 8000870:	443b      	add	r3, r7
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <ILI9341_RGB565FillScreen+0x80>)
 8000878:	443a      	add	r2, r7
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <ILI9341_RGB565FillScreen+0x80>)
 800087e:	443b      	add	r3, r7
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000886:	d3e1      	bcc.n	800084c <ILI9341_RGB565FillScreen+0x20>
	}
	TransmitFrame(239,319,&frameBuffer);
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <ILI9341_RGB565FillScreen+0x84>)
 800088a:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800088e:	f103 0310 	add.w	r3, r3, #16
 8000892:	443b      	add	r3, r7
 8000894:	461a      	mov	r2, r3
 8000896:	f240 113f 	movw	r1, #319	@ 0x13f
 800089a:	20ef      	movs	r0, #239	@ 0xef
 800089c:	f000 f8e0 	bl	8000a60 <TransmitFrame>


}
 80008a0:	bf00      	nop
 80008a2:	f507 3716 	add.w	r7, r7, #153600	@ 0x25800
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	0002580c 	.word	0x0002580c
 80008b0:	fffda7fc 	.word	0xfffda7fc

080008b4 <ILI9341_Test>:

void ILI9341_Test(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	ILI9341_RGB565FillScreen(COLOR_RED);
 80008ba:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80008be:	f7ff ffb5 	bl	800082c <ILI9341_RGB565FillScreen>
	ILI9341_RGB565FillScreen(COLOR_GREEN);
 80008c2:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80008c6:	f7ff ffb1 	bl	800082c <ILI9341_RGB565FillScreen>
	ILI9341_RGB565FillScreen(COLOR_BLUE);
 80008ca:	201f      	movs	r0, #31
 80008cc:	f7ff ffae 	bl	800082c <ILI9341_RGB565FillScreen>
	ILI9341_RGB565FillScreen(COLOR_BLACK);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ffab 	bl	800082c <ILI9341_RGB565FillScreen>
	ILI9341_RGB565FillScreen(COLOR_WHITE);
 80008d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008da:	f7ff ffa7 	bl	800082c <ILI9341_RGB565FillScreen>
	uint8_t i = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
	while (i<10){
 80008e2:	e006      	b.n	80008f2 <ILI9341_Test+0x3e>
		ILI9341_StripeTest(i);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fee8 	bl	80006bc <ILI9341_StripeTest>
		i++;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	3301      	adds	r3, #1
 80008f0:	71fb      	strb	r3, [r7, #7]
	while (i<10){
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b09      	cmp	r3, #9
 80008f6:	d9f5      	bls.n	80008e4 <ILI9341_Test+0x30>

	}
	ILI9341_RGB565FillScreen(COLOR_WHITE);
 80008f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008fc:	f7ff ff96 	bl	800082c <ILI9341_RGB565FillScreen>



}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <ILI9341_WriteCommand>:
#include <stdbool.h>

extern SPI_HandleTypeDef hspi1;
volatile bool DMA_Transfer_Complete = false;

void ILI9341_WriteCommand(uint8_t cmd) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 8000912:	f000 f907 	bl	8000b24 <ILI9341_CS_Low>
    ILI9341_DC_Low();  // Command mode
 8000916:	f000 f91d 	bl	8000b54 <ILI9341_DC_Low>
    HAL_Delay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f000 ff98 	bl	8001850 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000920:	1df9      	adds	r1, r7, #7
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <ILI9341_WriteCommand+0x38>)
 800092a:	f006 fd99 	bl	8007460 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 ff8e 	bl	8001850 <HAL_Delay>
    ILI9341_CS_High();
 8000934:	f000 f902 	bl	8000b3c <ILI9341_CS_High>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2400005c 	.word	0x2400005c

08000944 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    ILI9341_CS_Low();
 800094e:	f000 f8e9 	bl	8000b24 <ILI9341_CS_Low>
    ILI9341_DC_High(); // Data mode
 8000952:	f000 f90b 	bl	8000b6c <ILI9341_DC_High>
    HAL_Delay(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f000 ff7a 	bl	8001850 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800095c:	1df9      	adds	r1, r7, #7
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	2201      	movs	r2, #1
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <ILI9341_WriteData+0x38>)
 8000966:	f006 fd7b 	bl	8007460 <HAL_SPI_Transmit>
    HAL_Delay(1);
 800096a:	2001      	movs	r0, #1
 800096c:	f000 ff70 	bl	8001850 <HAL_Delay>
    ILI9341_CS_High();
 8000970:	f000 f8e4 	bl	8000b3c <ILI9341_CS_High>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400005c 	.word	0x2400005c

08000980 <ILI9341_WriteData16>:

void ILI9341_WriteData16(uint16_t data) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = data >> 8;    // High byte
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b29b      	uxth	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;  // Low byte
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	737b      	strb	r3, [r7, #13]
    ILI9341_CS_Low();
 800099a:	f000 f8c3 	bl	8000b24 <ILI9341_CS_Low>
    ILI9341_DC_High();
 800099e:	f000 f8e5 	bl	8000b6c <ILI9341_DC_High>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 80009a2:	f107 010c 	add.w	r1, r7, #12
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2202      	movs	r2, #2
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <ILI9341_WriteData16+0x3c>)
 80009ae:	f006 fd57 	bl	8007460 <HAL_SPI_Transmit>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2400005c 	.word	0x2400005c

080009c0 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4623      	mov	r3, r4
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	4603      	mov	r3, r0
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
    // Column address
    ILI9341_WriteCommand(ILI9341_CASET);
 80009de:	202a      	movs	r0, #42	@ 0x2a
 80009e0:	f7ff ff92 	bl	8000908 <ILI9341_WriteCommand>
    ILI9341_WriteData16(x0);
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffca 	bl	8000980 <ILI9341_WriteData16>
    ILI9341_WriteData16(x1);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffc6 	bl	8000980 <ILI9341_WriteData16>

    // Page address
    ILI9341_WriteCommand(ILI9341_PASET);
 80009f4:	202b      	movs	r0, #43	@ 0x2b
 80009f6:	f7ff ff87 	bl	8000908 <ILI9341_WriteCommand>
    ILI9341_WriteData16(y0);
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ffbf 	bl	8000980 <ILI9341_WriteData16>
    ILI9341_WriteData16(y1);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffbb 	bl	8000980 <ILI9341_WriteData16>

    // Memory write 2 frameBuffer
    ILI9341_WriteCommand(ILI9341_RAMWR);
 8000a0a:	202c      	movs	r0, #44	@ 0x2c
 8000a0c:	f7ff ff7c 	bl	8000908 <ILI9341_WriteCommand>
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <ILI9341_Init>:

void ILI9341_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8000a1c:	f000 f8b2 	bl	8000b84 <ILI9341_Reset>

    // Software reset
    ILI9341_WriteCommand(ILI9341_SWRESET);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff ff71 	bl	8000908 <ILI9341_WriteCommand>
    HAL_Delay(150);
 8000a26:	2096      	movs	r0, #150	@ 0x96
 8000a28:	f000 ff12 	bl	8001850 <HAL_Delay>

    // Sleep out
    ILI9341_WriteCommand(ILI9341_SLPOUT);
 8000a2c:	2011      	movs	r0, #17
 8000a2e:	f7ff ff6b 	bl	8000908 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000a32:	2078      	movs	r0, #120	@ 0x78
 8000a34:	f000 ff0c 	bl	8001850 <HAL_Delay>
    ILI9341_WriteCommand(ILI9341_PXLFRMT);
 8000a38:	203a      	movs	r0, #58	@ 0x3a
 8000a3a:	f7ff ff65 	bl	8000908 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);
 8000a3e:	2055      	movs	r0, #85	@ 0x55
 8000a40:	f7ff ff80 	bl	8000944 <ILI9341_WriteData>
    ILI9341_WriteCommand(ILI9341_RGBORDER);
 8000a44:	2036      	movs	r0, #54	@ 0x36
 8000a46:	f7ff ff5f 	bl	8000908 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff ff7a 	bl	8000944 <ILI9341_WriteData>

    // Display on
    ILI9341_WriteCommand(ILI9341_DISPON);
 8000a50:	2029      	movs	r0, #41	@ 0x29
 8000a52:	f7ff ff59 	bl	8000908 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000a56:	2078      	movs	r0, #120	@ 0x78
 8000a58:	f000 fefa 	bl	8001850 <HAL_Delay>

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TransmitFrame>:



void TransmitFrame(uint16_t height, uint16_t width, uint8_t* frameBuffer){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	603a      	str	r2, [r7, #0]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	80bb      	strh	r3, [r7, #4]
    int section = 51200;
 8000a70:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8000a74:	613b      	str	r3, [r7, #16]
    int sectionCount = 153600/section;
 8000a76:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a80:	60fb      	str	r3, [r7, #12]
    ILI9341_SetWindow(0, 0,height, width);
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff99 	bl	80009c0 <ILI9341_SetWindow>
	ILI9341_CS_Low();
 8000a8e:	f000 f849 	bl	8000b24 <ILI9341_CS_Low>
	ILI9341_DC_High();
 8000a92:	f000 f86b 	bl	8000b6c <ILI9341_DC_High>
    for (int i = 0; i <sectionCount;i++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e01b      	b.n	8000ad4 <TransmitFrame+0x74>

    	HAL_SPI_Transmit_DMA(&hspi1, &frameBuffer[i*section], section);
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	b292      	uxth	r2, r2
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480f      	ldr	r0, [pc, #60]	@ (8000af0 <TransmitFrame+0x90>)
 8000ab2:	f006 fec3 	bl	800783c <HAL_SPI_Transmit_DMA>
        while(!DMA_Transfer_Complete);
 8000ab6:	bf00      	nop
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <TransmitFrame+0x94>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f083 0301 	eor.w	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f7      	bne.n	8000ab8 <TransmitFrame+0x58>
        DMA_Transfer_Complete = false;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <TransmitFrame+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i <sectionCount;i++){
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbdf      	blt.n	8000a9c <TransmitFrame+0x3c>
    }

	ILI9341_CS_High();
 8000adc:	f000 f82e 	bl	8000b3c <ILI9341_CS_High>
	//slight delay for static frame to stabilize
	HAL_Delay(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f000 feb5 	bl	8001850 <HAL_Delay>


}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2400005c 	.word	0x2400005c
 8000af4:	24000048 	.word	0x24000048

08000af8 <HAL_SPI_TxCpltCallback>:
        HAL_SPI_Transmit(&hspi1, &test_data, 1, HAL_MAX_DELAY);
        ILI9341_CS_High();
        HAL_Delay(200);
    }
}
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <HAL_SPI_TxCpltCallback+0x24>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d102      	bne.n	8000b10 <HAL_SPI_TxCpltCallback+0x18>
    	DMA_Transfer_Complete = true;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_SPI_TxCpltCallback+0x28>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
    }
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	24000048 	.word	0x24000048

08000b24 <ILI9341_CS_Low>:
 */
#include "ili9341_config.h"
#include "ili9341_hal.h"
#include "stm32h7xx_hal.h"

void ILI9341_CS_Low(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2e:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <ILI9341_CS_Low+0x14>)
 8000b30:	f003 fd0c 	bl	800454c <HAL_GPIO_WritePin>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58021800 	.word	0x58021800

08000b3c <ILI9341_CS_High>:

void ILI9341_CS_High(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b46:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <ILI9341_CS_High+0x14>)
 8000b48:	f003 fd00 	bl	800454c <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58021800 	.word	0x58021800

08000b54 <ILI9341_DC_Low>:

void ILI9341_DC_Low(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <ILI9341_DC_Low+0x14>)
 8000b5e:	f003 fcf5 	bl	800454c <HAL_GPIO_WritePin>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58021800 	.word	0x58021800

08000b6c <ILI9341_DC_High>:

void ILI9341_DC_High(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <ILI9341_DC_High+0x14>)
 8000b76:	f003 fce9 	bl	800454c <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	58021800 	.word	0x58021800

08000b84 <ILI9341_Reset>:

void ILI9341_Reset(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8e:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <ILI9341_Reset+0x2c>)
 8000b90:	f003 fcdc 	bl	800454c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000b94:	200a      	movs	r0, #10
 8000b96:	f000 fe5b 	bl	8001850 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_GPIO_Port, ILI9341_RST_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <ILI9341_Reset+0x2c>)
 8000ba2:	f003 fcd3 	bl	800454c <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000ba6:	2078      	movs	r0, #120	@ 0x78
 8000ba8:	f000 fe52 	bl	8001850 <HAL_Delay>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	58021800 	.word	0x58021800

08000bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fdb8 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f836 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f92e 	bl	8000e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc4:	f000 f90c 	bl	8000de0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000bc8:	f000 f8ac 	bl	8000d24 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // First test raw SPI data transmission


  // Initialize display
  ILI9341_Init();
 8000bcc:	f7ff ff24 	bl	8000a18 <ILI9341_Init>
  ///ILI9341_Test();



  // Run test pattern
  ILI9341_Test();
 8000bd0:	f7ff fe70 	bl	80008b4 <ILI9341_Test>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fbe1 	bl	800139c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fbde 	bl	800139c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f000 fbdb 	bl	800139c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000be6:	2101      	movs	r1, #1
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 fc4d 	bl	8001488 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <main+0x74>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <main+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <main+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <main+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <main+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c0e:	4906      	ldr	r1, [pc, #24]	@ (8000c28 <main+0x74>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 fcc9 	bl	80015a8 <BSP_COM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <main+0x6e>
  {
    Error_Handler();
 8000c1c:	f000 f99c 	bl	8000f58 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <main+0x6e>
 8000c26:	bf00      	nop
 8000c28:	2400004c 	.word	0x2400004c

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	@ 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f008 fa7a 	bl	8009134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f008 fa74 	bl	8009134 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f003 fc97 	bl	8004580 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5a:	4a30      	ldr	r2, [pc, #192]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c74:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c88:	bf00      	nop
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c96:	d1f8      	bne.n	8000c8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cae:	2348      	movs	r3, #72	@ 0x48
 8000cb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fc90 	bl	80045f4 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cda:	f000 f93d 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	233f      	movs	r3, #63	@ 0x3f
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2101      	movs	r1, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 f8d0 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d0e:	f000 f923 	bl	8000f58 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3770      	adds	r7, #112	@ 0x70
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800

08000d24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d28:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <MX_SPI1_Init+0xb8>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d3c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000db6:	f006 fa2f 	bl	8007218 <HAL_SPI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000dc0:	f000 f8ca 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <MX_SPI1_Init+0xb4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2400005c 	.word	0x2400005c
 8000ddc:	40013000 	.word	0x40013000

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <MX_DMA_Init+0x3c>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <MX_DMA_Init+0x3c>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_DMA_Init+0x3c>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	200b      	movs	r0, #11
 8000e0a:	f000 fe2c 	bl	8001a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e0e:	200b      	movs	r0, #11
 8000e10:	f000 fe43 	bl	8001a9a <HAL_NVIC_EnableIRQ>

}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b45      	ldr	r3, [pc, #276]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	4a43      	ldr	r2, [pc, #268]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e46:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e54:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e64:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	4a34      	ldr	r2, [pc, #208]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e82:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a25      	ldr	r2, [pc, #148]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_GPIO_Init+0x12c>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <MX_GPIO_Init+0x130>)
 8000ef0:	f003 fb2c 	bl	800454c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ILI9341_RST_Pin|ILI9341_CS_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000efa:	4815      	ldr	r0, [pc, #84]	@ (8000f50 <MX_GPIO_Init+0x130>)
 8000efc:	f003 fb26 	bl	800454c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2102      	movs	r1, #2
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000f06:	f003 fb21 	bl	800454c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ILI9341_DC_Pin ILI9341_RST_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_RST_Pin|ILI9341_CS_Pin;
 8000f0a:	f249 0302 	movw	r3, #36866	@ 0x9002
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <MX_GPIO_Init+0x130>)
 8000f24:	f003 f962 	bl	80041ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000f40:	f003 f954 	bl	80041ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f44:	bf00      	nop
 8000f46:	3730      	adds	r7, #48	@ 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58021800 	.word	0x58021800
 8000f54:	58021000 	.word	0x58021000

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x8>

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_MspInit+0x30>)
 8000f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58024400 	.word	0x58024400

08000f98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	22c0      	movs	r2, #192	@ 0xc0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f008 f8bb 	bl	8009134 <memset>
  if(hspi->Instance==SPI1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a58      	ldr	r2, [pc, #352]	@ (8001124 <HAL_SPI_MspInit+0x18c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f040 80a8 	bne.w	800111a <HAL_SPI_MspInit+0x182>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 faee 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000fea:	f7ff ffb5 	bl	8000f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fee:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 8000ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 8001000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b46      	ldr	r3, [pc, #280]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	4a45      	ldr	r2, [pc, #276]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101c:	4b42      	ldr	r3, [pc, #264]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102a:	4b3f      	ldr	r3, [pc, #252]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a3d      	ldr	r2, [pc, #244]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <HAL_SPI_MspInit+0x190>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001048:	2320      	movs	r3, #32
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001060:	2305      	movs	r3, #5
 8001062:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800106a:	4619      	mov	r1, r3
 800106c:	482f      	ldr	r0, [pc, #188]	@ (800112c <HAL_SPI_MspInit+0x194>)
 800106e:	f003 f8bd 	bl	80041ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108a:	2305      	movs	r3, #5
 800108c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001090:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001094:	4619      	mov	r1, r3
 8001096:	4826      	ldr	r0, [pc, #152]	@ (8001130 <HAL_SPI_MspInit+0x198>)
 8001098:	f003 f8a8 	bl	80041ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <HAL_SPI_MspInit+0x1a0>)
 80010a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010a4:	2226      	movs	r2, #38	@ 0x26
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010d8:	2204      	movs	r2, #4
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010de:	2203      	movs	r2, #3
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010ee:	4811      	ldr	r0, [pc, #68]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 80010f0:	f000 fcee 	bl	8001ad0 <HAL_DMA_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 80010fa:	f7ff ff2d 	bl	8000f58 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 8001102:	679a      	str	r2, [r3, #120]	@ 0x78
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <HAL_SPI_MspInit+0x19c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2023      	movs	r0, #35	@ 0x23
 8001110:	f000 fca9 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001114:	2023      	movs	r0, #35	@ 0x23
 8001116:	f000 fcc0 	bl	8001a9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800111a:	bf00      	nop
 800111c:	37f0      	adds	r7, #240	@ 0xf0
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013000 	.word	0x40013000
 8001128:	58024400 	.word	0x58024400
 800112c:	58020000 	.word	0x58020000
 8001130:	58020c00 	.word	0x58020c00
 8001134:	240000e4 	.word	0x240000e4
 8001138:	40020010 	.word	0x40020010

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <NMI_Handler+0x4>

08001144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <MemManage_Handler+0x4>

08001154 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <UsageFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 fb3d 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <DMA1_Stream0_IRQHandler+0x10>)
 80011a2:	f001 fca1 	bl	8002ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240000e4 	.word	0x240000e4

080011b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <SPI1_IRQHandler+0x10>)
 80011b6:	f006 fc83 	bl	8007ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2400005c 	.word	0x2400005c

080011c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 f9cf 	bl	800156c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011d8:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <SystemInit+0x114>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011de:	4a42      	ldr	r2, [pc, #264]	@ (80012e8 <SystemInit+0x114>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <SystemInit+0x118>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	d807      	bhi.n	8001204 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011f4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <SystemInit+0x118>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 030f 	bic.w	r3, r3, #15
 80011fc:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <SystemInit+0x118>)
 80011fe:	f043 0307 	orr.w	r3, r3, #7
 8001202:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <SystemInit+0x11c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a39      	ldr	r2, [pc, #228]	@ (80012f0 <SystemInit+0x11c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001210:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <SystemInit+0x11c>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <SystemInit+0x11c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4935      	ldr	r1, [pc, #212]	@ (80012f0 <SystemInit+0x11c>)
 800121c:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <SystemInit+0x120>)
 800121e:	4013      	ands	r3, r2
 8001220:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001222:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <SystemInit+0x118>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800122e:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <SystemInit+0x118>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 030f 	bic.w	r3, r3, #15
 8001236:	4a2d      	ldr	r2, [pc, #180]	@ (80012ec <SystemInit+0x118>)
 8001238:	f043 0307 	orr.w	r3, r3, #7
 800123c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800123e:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <SystemInit+0x11c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001244:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <SystemInit+0x11c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <SystemInit+0x11c>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <SystemInit+0x11c>)
 8001252:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <SystemInit+0x124>)
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <SystemInit+0x11c>)
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <SystemInit+0x128>)
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <SystemInit+0x11c>)
 800125e:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <SystemInit+0x12c>)
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001262:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <SystemInit+0x11c>)
 8001264:	2200      	movs	r2, #0
 8001266:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <SystemInit+0x11c>)
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <SystemInit+0x12c>)
 800126c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <SystemInit+0x11c>)
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <SystemInit+0x11c>)
 8001276:	4a22      	ldr	r2, [pc, #136]	@ (8001300 <SystemInit+0x12c>)
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <SystemInit+0x11c>)
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <SystemInit+0x11c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1a      	ldr	r2, [pc, #104]	@ (80012f0 <SystemInit+0x11c>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <SystemInit+0x11c>)
 800128e:	2200      	movs	r2, #0
 8001290:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <SystemInit+0x130>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <SystemInit+0x134>)
 8001298:	4013      	ands	r3, r2
 800129a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800129e:	d202      	bcs.n	80012a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <SystemInit+0x138>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <SystemInit+0x11c>)
 80012a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d113      	bne.n	80012dc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <SystemInit+0x11c>)
 80012b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012ba:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <SystemInit+0x11c>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <SystemInit+0x13c>)
 80012c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <SystemInit+0x11c>)
 80012ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012d2:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <SystemInit+0x11c>)
 80012d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	52002000 	.word	0x52002000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f8:	02020200 	.word	0x02020200
 80012fc:	01ff0000 	.word	0x01ff0000
 8001300:	01010280 	.word	0x01010280
 8001304:	5c001000 	.word	0x5c001000
 8001308:	ffff0000 	.word	0xffff0000
 800130c:	51008108 	.word	0x51008108
 8001310:	52004000 	.word	0x52004000

08001314 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <ExitRun0Mode+0x2c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <ExitRun0Mode+0x2c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001324:	bf00      	nop
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <ExitRun0Mode+0x2c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f9      	beq.n	8001326 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	58024800 	.word	0x58024800

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001380 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001348:	f7ff ffe4 	bl	8001314 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800134c:	f7ff ff42 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopFillZerobss+0x16>)
   ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f007 fee5 	bl	8009144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff fc1b 	bl	8000bb4 <main>
  bx  lr
 800137e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001384:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001388:	2400002c 	.word	0x2400002c
   ldr r2, =_sidata
 800138c:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8001390:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8001394:	240001fc 	.word	0x240001fc

08001398 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC3_IRQHandler>
	...

0800139c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	@ 0x30
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <BSP_LED_Init+0x28>
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d006      	beq.n	80013c4 <BSP_LED_Init+0x28>
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d003      	beq.n	80013c4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013bc:	f06f 0301 	mvn.w	r3, #1
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c2:	e055      	b.n	8001470 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <BSP_LED_Init+0xe0>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	4a2a      	ldr	r2, [pc, #168]	@ (800147c <BSP_LED_Init+0xe0>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013da:	4b28      	ldr	r3, [pc, #160]	@ (800147c <BSP_LED_Init+0xe0>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	e021      	b.n	800142e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10f      	bne.n	8001410 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <BSP_LED_Init+0xe0>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <BSP_LED_Init+0xe0>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001400:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <BSP_LED_Init+0xe0>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	e00e      	b.n	800142e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <BSP_LED_Init+0xe0>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	4a19      	ldr	r2, [pc, #100]	@ (800147c <BSP_LED_Init+0xe0>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <BSP_LED_Init+0xe0>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <BSP_LED_Init+0xe4>)
 8001432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001436:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <BSP_LED_Init+0xe8>)
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	f107 0218 	add.w	r2, r7, #24
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f002 feca 	bl	80041ec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <BSP_LED_Init+0xe8>)
 800145c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a07      	ldr	r2, [pc, #28]	@ (8001480 <BSP_LED_Init+0xe4>)
 8001464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	f003 f86e 	bl	800454c <HAL_GPIO_WritePin>
  }

  return ret;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001472:	4618      	mov	r0, r3
 8001474:	3730      	adds	r7, #48	@ 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	58024400 	.word	0x58024400
 8001480:	080091b4 	.word	0x080091b4
 8001484:	2400000c 	.word	0x2400000c

08001488 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <BSP_PB_Init+0xcc>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <BSP_PB_Init+0xcc>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <BSP_PB_Init+0xcc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80014b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80014bc:	2302      	movs	r3, #2
 80014be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <BSP_PB_Init+0xd0>)
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	f107 020c 	add.w	r2, r7, #12
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fe85 	bl	80041ec <HAL_GPIO_Init>
 80014e2:	e031      	b.n	8001548 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80014e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <BSP_PB_Init+0xd0>)
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 fe77 	bl	80041ec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4a16      	ldr	r2, [pc, #88]	@ (800155c <BSP_PB_Init+0xd4>)
 8001504:	441a      	add	r2, r3
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4915      	ldr	r1, [pc, #84]	@ (8001560 <BSP_PB_Init+0xd8>)
 800150a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150e:	4619      	mov	r1, r3
 8001510:	4610      	mov	r0, r2
 8001512:	f002 fe26 	bl	8004162 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4a10      	ldr	r2, [pc, #64]	@ (800155c <BSP_PB_Init+0xd4>)
 800151c:	1898      	adds	r0, r3, r2
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <BSP_PB_Init+0xdc>)
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	461a      	mov	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	f002 fdfb 	bl	8004124 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800152e:	2028      	movs	r0, #40	@ 0x28
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <BSP_PB_Init+0xe0>)
 8001534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	f000 fa93 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001540:	2328      	movs	r3, #40	@ 0x28
 8001542:	4618      	mov	r0, r3
 8001544:	f000 faa9 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	58024400 	.word	0x58024400
 8001558:	24000018 	.word	0x24000018
 800155c:	2400015c 	.word	0x2400015c
 8001560:	080091bc 	.word	0x080091bc
 8001564:	2400001c 	.word	0x2400001c
 8001568:	24000020 	.word	0x24000020

0800156c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4a04      	ldr	r2, [pc, #16]	@ (800158c <BSP_PB_IRQHandler+0x20>)
 800157c:	4413      	add	r3, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fe04 	bl	800418c <HAL_EXTI_IRQHandler>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2400015c 	.word	0x2400015c

08001590 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015be:	f06f 0301 	mvn.w	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e018      	b.n	80015f8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2294      	movs	r2, #148	@ 0x94
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <BSP_COM_Init+0x5c>)
 80015d0:	4413      	add	r3, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f852 	bl	800167c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2294      	movs	r2, #148	@ 0x94
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <BSP_COM_Init+0x5c>)
 80015e2:	4413      	add	r3, r2
 80015e4:	6839      	ldr	r1, [r7, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f80e 	bl	8001608 <MX_USART3_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015f2:	f06f 0303 	mvn.w	r3, #3
 80015f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24000164 	.word	0x24000164

08001608 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_USART3_Init+0x60>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	220c      	movs	r2, #12
 8001626:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	895b      	ldrh	r3, [r3, #10]
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	891b      	ldrh	r3, [r3, #8]
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	899b      	ldrh	r3, [r3, #12]
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001654:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f006 fd89 	bl	800816e <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000008 	.word	0x24000008

0800166c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ff8d 	bl	8001590 <BSP_PB_Callback>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <COM1_MspInit+0xa8>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168a:	4a26      	ldr	r2, [pc, #152]	@ (8001724 <COM1_MspInit+0xa8>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <COM1_MspInit+0xa8>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <COM1_MspInit+0xa8>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <COM1_MspInit+0xa8>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <COM1_MspInit+0xa8>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <COM1_MspInit+0xa8>)
 80016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <COM1_MspInit+0xa8>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <COM1_MspInit+0xa8>)
 80016d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80016de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016f0:	2307      	movs	r3, #7
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	480b      	ldr	r0, [pc, #44]	@ (8001728 <COM1_MspInit+0xac>)
 80016fc:	f002 fd76 	bl	80041ec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001704:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4804      	ldr	r0, [pc, #16]	@ (8001728 <COM1_MspInit+0xac>)
 8001716:	f002 fd69 	bl	80041ec <HAL_GPIO_Init>
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	58024400 	.word	0x58024400
 8001728:	58020c00 	.word	0x58020c00

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f98c 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001738:	f003 fd6c 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_Init+0x68>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4913      	ldr	r1, [pc, #76]	@ (8001798 <HAL_Init+0x6c>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_Init+0x68>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_Init+0x6c>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <HAL_Init+0x70>)
 800176e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_Init+0x74>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f814 	bl	80017a4 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e002      	b.n	800178c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001786:	f7ff fbed 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58024400 	.word	0x58024400
 8001798:	080091a4 	.word	0x080091a4
 800179c:	24000004 	.word	0x24000004
 80017a0:	24000000 	.word	0x24000000

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_InitTick+0x60>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e021      	b.n	80017fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_InitTick+0x64>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_InitTick+0x60>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f971 	bl	8001ab6 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f93b 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x68>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000028 	.word	0x24000028
 8001808:	24000000 	.word	0x24000000
 800180c:	24000024 	.word	0x24000024

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	24000028 	.word	0x24000028
 8001834:	240001f8 	.word	0x240001f8

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	240001f8 	.word	0x240001f8

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	24000028 	.word	0x24000028

08001898 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetREVID+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0c1b      	lsrs	r3, r3, #16
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	5c001000 	.word	0x5c001000

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x40>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x40>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00
 80018f4:	05fa0000 	.word	0x05fa0000

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	@ (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff40 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff90 	bl	80019a4 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5f 	bl	8001950 <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff33 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa4 	bl	8001a0c <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff feae 	bl	8001838 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e316      	b.n	8002116 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a66      	ldr	r2, [pc, #408]	@ (8001c88 <HAL_DMA_Init+0x1b8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d04a      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a65      	ldr	r2, [pc, #404]	@ (8001c8c <HAL_DMA_Init+0x1bc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d045      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a63      	ldr	r2, [pc, #396]	@ (8001c90 <HAL_DMA_Init+0x1c0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d040      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a62      	ldr	r2, [pc, #392]	@ (8001c94 <HAL_DMA_Init+0x1c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d03b      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a60      	ldr	r2, [pc, #384]	@ (8001c98 <HAL_DMA_Init+0x1c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d036      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8001c9c <HAL_DMA_Init+0x1cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d031      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca0 <HAL_DMA_Init+0x1d0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02c      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca4 <HAL_DMA_Init+0x1d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d027      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HAL_DMA_Init+0x1d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <HAL_DMA_Init+0x1dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d01d      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a57      	ldr	r2, [pc, #348]	@ (8001cb0 <HAL_DMA_Init+0x1e0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d018      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a56      	ldr	r2, [pc, #344]	@ (8001cb4 <HAL_DMA_Init+0x1e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a54      	ldr	r2, [pc, #336]	@ (8001cb8 <HAL_DMA_Init+0x1e8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a53      	ldr	r2, [pc, #332]	@ (8001cbc <HAL_DMA_Init+0x1ec>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d009      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a51      	ldr	r2, [pc, #324]	@ (8001cc0 <HAL_DMA_Init+0x1f0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_Init+0xb8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a50      	ldr	r2, [pc, #320]	@ (8001cc4 <HAL_DMA_Init+0x1f4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_DMA_Init+0xbc>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_DMA_Init+0xbe>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 813b 	beq.w	8001e0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a37      	ldr	r2, [pc, #220]	@ (8001c88 <HAL_DMA_Init+0x1b8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d04a      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a36      	ldr	r2, [pc, #216]	@ (8001c8c <HAL_DMA_Init+0x1bc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d045      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a34      	ldr	r2, [pc, #208]	@ (8001c90 <HAL_DMA_Init+0x1c0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d040      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a33      	ldr	r2, [pc, #204]	@ (8001c94 <HAL_DMA_Init+0x1c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d03b      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a31      	ldr	r2, [pc, #196]	@ (8001c98 <HAL_DMA_Init+0x1c8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d036      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <HAL_DMA_Init+0x1cc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d031      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca0 <HAL_DMA_Init+0x1d0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02c      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca4 <HAL_DMA_Init+0x1d4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d027      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca8 <HAL_DMA_Init+0x1d8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d022      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2a      	ldr	r2, [pc, #168]	@ (8001cac <HAL_DMA_Init+0x1dc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d01d      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	@ (8001cb0 <HAL_DMA_Init+0x1e0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d018      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a27      	ldr	r2, [pc, #156]	@ (8001cb4 <HAL_DMA_Init+0x1e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_DMA_Init+0x1e8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00e      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a24      	ldr	r2, [pc, #144]	@ (8001cbc <HAL_DMA_Init+0x1ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a22      	ldr	r2, [pc, #136]	@ (8001cc0 <HAL_DMA_Init+0x1f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_DMA_Init+0x174>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	@ (8001cc4 <HAL_DMA_Init+0x1f4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d108      	bne.n	8001c56 <HAL_DMA_Init+0x186>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e007      	b.n	8001c66 <HAL_DMA_Init+0x196>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c66:	e02f      	b.n	8001cc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c68:	f7ff fde6 	bl	8001838 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d928      	bls.n	8001cc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e246      	b.n	8002116 <HAL_DMA_Init+0x646>
 8001c88:	40020010 	.word	0x40020010
 8001c8c:	40020028 	.word	0x40020028
 8001c90:	40020040 	.word	0x40020040
 8001c94:	40020058 	.word	0x40020058
 8001c98:	40020070 	.word	0x40020070
 8001c9c:	40020088 	.word	0x40020088
 8001ca0:	400200a0 	.word	0x400200a0
 8001ca4:	400200b8 	.word	0x400200b8
 8001ca8:	40020410 	.word	0x40020410
 8001cac:	40020428 	.word	0x40020428
 8001cb0:	40020440 	.word	0x40020440
 8001cb4:	40020458 	.word	0x40020458
 8001cb8:	40020470 	.word	0x40020470
 8001cbc:	40020488 	.word	0x40020488
 8001cc0:	400204a0 	.word	0x400204a0
 8001cc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1c8      	bne.n	8001c68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4b83      	ldr	r3, [pc, #524]	@ (8001ef0 <HAL_DMA_Init+0x420>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4313      	orrs	r3, r2
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d2c:	4b71      	ldr	r3, [pc, #452]	@ (8001ef4 <HAL_DMA_Init+0x424>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b71      	ldr	r3, [pc, #452]	@ (8001ef8 <HAL_DMA_Init+0x428>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d38:	d328      	bcc.n	8001d8c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b28      	cmp	r3, #40	@ 0x28
 8001d40:	d903      	bls.n	8001d4a <HAL_DMA_Init+0x27a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d48:	d917      	bls.n	8001d7a <HAL_DMA_Init+0x2aa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d50:	d903      	bls.n	8001d5a <HAL_DMA_Init+0x28a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b42      	cmp	r3, #66	@ 0x42
 8001d58:	d90f      	bls.n	8001d7a <HAL_DMA_Init+0x2aa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b46      	cmp	r3, #70	@ 0x46
 8001d60:	d903      	bls.n	8001d6a <HAL_DMA_Init+0x29a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b48      	cmp	r3, #72	@ 0x48
 8001d68:	d907      	bls.n	8001d7a <HAL_DMA_Init+0x2aa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d70:	d905      	bls.n	8001d7e <HAL_DMA_Init+0x2ae>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b52      	cmp	r3, #82	@ 0x52
 8001d78:	d801      	bhi.n	8001d7e <HAL_DMA_Init+0x2ae>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_Init+0x2b0>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0307 	bic.w	r3, r3, #7
 8001da2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d117      	bne.n	8001de6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f002 f821 	bl	8003e10 <DMA_CheckFifoParam>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e197      	b.n	8002116 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f001 ff5c 	bl	8003cac <DMA_CalcBaseAndBitshift>
 8001df4:	4603      	mov	r3, r0
 8001df6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	223f      	movs	r2, #63	@ 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e0cd      	b.n	8001fa6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8001efc <HAL_DMA_Init+0x42c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a39      	ldr	r2, [pc, #228]	@ (8001f00 <HAL_DMA_Init+0x430>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a38      	ldr	r2, [pc, #224]	@ (8001f04 <HAL_DMA_Init+0x434>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_DMA_Init+0x438>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a35      	ldr	r2, [pc, #212]	@ (8001f0c <HAL_DMA_Init+0x43c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a33      	ldr	r2, [pc, #204]	@ (8001f10 <HAL_DMA_Init+0x440>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a32      	ldr	r2, [pc, #200]	@ (8001f14 <HAL_DMA_Init+0x444>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Init+0x38a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <HAL_DMA_Init+0x448>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Init+0x38e>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_DMA_Init+0x390>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8097 	beq.w	8001f94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <HAL_DMA_Init+0x42c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d021      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <HAL_DMA_Init+0x430>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01c      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_DMA_Init+0x434>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d017      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_DMA_Init+0x438>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d012      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_DMA_Init+0x43c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00d      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <HAL_DMA_Init+0x440>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d008      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_DMA_Init+0x444>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <HAL_DMA_Init+0x3e4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <HAL_DMA_Init+0x448>)
 8001eb2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_DMA_Init+0x44c>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b40      	cmp	r3, #64	@ 0x40
 8001eda:	d021      	beq.n	8001f20 <HAL_DMA_Init+0x450>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b80      	cmp	r3, #128	@ 0x80
 8001ee2:	d102      	bne.n	8001eea <HAL_DMA_Init+0x41a>
 8001ee4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ee8:	e01b      	b.n	8001f22 <HAL_DMA_Init+0x452>
 8001eea:	2300      	movs	r3, #0
 8001eec:	e019      	b.n	8001f22 <HAL_DMA_Init+0x452>
 8001eee:	bf00      	nop
 8001ef0:	fe10803f 	.word	0xfe10803f
 8001ef4:	5c001000 	.word	0x5c001000
 8001ef8:	ffff0000 	.word	0xffff0000
 8001efc:	58025408 	.word	0x58025408
 8001f00:	5802541c 	.word	0x5802541c
 8001f04:	58025430 	.word	0x58025430
 8001f08:	58025444 	.word	0x58025444
 8001f0c:	58025458 	.word	0x58025458
 8001f10:	5802546c 	.word	0x5802546c
 8001f14:	58025480 	.word	0x58025480
 8001f18:	58025494 	.word	0x58025494
 8001f1c:	fffe000f 	.word	0xfffe000f
 8001f20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b6e      	ldr	r3, [pc, #440]	@ (8002120 <HAL_DMA_Init+0x650>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_DMA_Init+0x654>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f001 fe97 	bl	8003cac <DMA_CalcBaseAndBitshift>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e008      	b.n	8001fa6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2240      	movs	r2, #64	@ 0x40
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0b7      	b.n	8002116 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5f      	ldr	r2, [pc, #380]	@ (8002128 <HAL_DMA_Init+0x658>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d072      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_DMA_Init+0x65c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d06d      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8002130 <HAL_DMA_Init+0x660>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d068      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_DMA_Init+0x664>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d063      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a59      	ldr	r2, [pc, #356]	@ (8002138 <HAL_DMA_Init+0x668>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d05e      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	@ (800213c <HAL_DMA_Init+0x66c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d059      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a56      	ldr	r2, [pc, #344]	@ (8002140 <HAL_DMA_Init+0x670>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d054      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a54      	ldr	r2, [pc, #336]	@ (8002144 <HAL_DMA_Init+0x674>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04f      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a53      	ldr	r2, [pc, #332]	@ (8002148 <HAL_DMA_Init+0x678>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04a      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a51      	ldr	r2, [pc, #324]	@ (800214c <HAL_DMA_Init+0x67c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d045      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a50      	ldr	r2, [pc, #320]	@ (8002150 <HAL_DMA_Init+0x680>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4e      	ldr	r2, [pc, #312]	@ (8002154 <HAL_DMA_Init+0x684>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d03b      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4d      	ldr	r2, [pc, #308]	@ (8002158 <HAL_DMA_Init+0x688>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d036      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4b      	ldr	r2, [pc, #300]	@ (800215c <HAL_DMA_Init+0x68c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4a      	ldr	r2, [pc, #296]	@ (8002160 <HAL_DMA_Init+0x690>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d02c      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a48      	ldr	r2, [pc, #288]	@ (8002164 <HAL_DMA_Init+0x694>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d027      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a47      	ldr	r2, [pc, #284]	@ (8002168 <HAL_DMA_Init+0x698>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a45      	ldr	r2, [pc, #276]	@ (800216c <HAL_DMA_Init+0x69c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a44      	ldr	r2, [pc, #272]	@ (8002170 <HAL_DMA_Init+0x6a0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d018      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a42      	ldr	r2, [pc, #264]	@ (8002174 <HAL_DMA_Init+0x6a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a41      	ldr	r2, [pc, #260]	@ (8002178 <HAL_DMA_Init+0x6a8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3f      	ldr	r2, [pc, #252]	@ (800217c <HAL_DMA_Init+0x6ac>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3e      	ldr	r2, [pc, #248]	@ (8002180 <HAL_DMA_Init+0x6b0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_Init+0x5c6>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3c      	ldr	r2, [pc, #240]	@ (8002184 <HAL_DMA_Init+0x6b4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_DMA_Init+0x5ca>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_DMA_Init+0x5cc>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d032      	beq.n	8002106 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f001 ff31 	bl	8003f08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b80      	cmp	r3, #128	@ 0x80
 80020ac:	d102      	bne.n	80020b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_DMA_Init+0x624>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d80c      	bhi.n	80020f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f001 ffae 	bl	800403c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	e008      	b.n	8002106 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	a7fdabf8 	.word	0xa7fdabf8
 8002124:	cccccccd 	.word	0xcccccccd
 8002128:	40020010 	.word	0x40020010
 800212c:	40020028 	.word	0x40020028
 8002130:	40020040 	.word	0x40020040
 8002134:	40020058 	.word	0x40020058
 8002138:	40020070 	.word	0x40020070
 800213c:	40020088 	.word	0x40020088
 8002140:	400200a0 	.word	0x400200a0
 8002144:	400200b8 	.word	0x400200b8
 8002148:	40020410 	.word	0x40020410
 800214c:	40020428 	.word	0x40020428
 8002150:	40020440 	.word	0x40020440
 8002154:	40020458 	.word	0x40020458
 8002158:	40020470 	.word	0x40020470
 800215c:	40020488 	.word	0x40020488
 8002160:	400204a0 	.word	0x400204a0
 8002164:	400204b8 	.word	0x400204b8
 8002168:	58025408 	.word	0x58025408
 800216c:	5802541c 	.word	0x5802541c
 8002170:	58025430 	.word	0x58025430
 8002174:	58025444 	.word	0x58025444
 8002178:	58025458 	.word	0x58025458
 800217c:	5802546c 	.word	0x5802546c
 8002180:	58025480 	.word	0x58025480
 8002184:	58025494 	.word	0x58025494

08002188 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e226      	b.n	80025f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Start_IT+0x2a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e21f      	b.n	80025f2 <HAL_DMA_Start_IT+0x46a>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 820a 	bne.w	80025dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a68      	ldr	r2, [pc, #416]	@ (800237c <HAL_DMA_Start_IT+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a66      	ldr	r2, [pc, #408]	@ (8002380 <HAL_DMA_Start_IT+0x1f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a65      	ldr	r2, [pc, #404]	@ (8002384 <HAL_DMA_Start_IT+0x1fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a63      	ldr	r2, [pc, #396]	@ (8002388 <HAL_DMA_Start_IT+0x200>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a62      	ldr	r2, [pc, #392]	@ (800238c <HAL_DMA_Start_IT+0x204>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a60      	ldr	r2, [pc, #384]	@ (8002390 <HAL_DMA_Start_IT+0x208>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5f      	ldr	r2, [pc, #380]	@ (8002394 <HAL_DMA_Start_IT+0x20c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5d      	ldr	r2, [pc, #372]	@ (8002398 <HAL_DMA_Start_IT+0x210>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5c      	ldr	r2, [pc, #368]	@ (800239c <HAL_DMA_Start_IT+0x214>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5a      	ldr	r2, [pc, #360]	@ (80023a0 <HAL_DMA_Start_IT+0x218>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a59      	ldr	r2, [pc, #356]	@ (80023a4 <HAL_DMA_Start_IT+0x21c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a57      	ldr	r2, [pc, #348]	@ (80023a8 <HAL_DMA_Start_IT+0x220>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a56      	ldr	r2, [pc, #344]	@ (80023ac <HAL_DMA_Start_IT+0x224>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a54      	ldr	r2, [pc, #336]	@ (80023b0 <HAL_DMA_Start_IT+0x228>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a53      	ldr	r2, [pc, #332]	@ (80023b4 <HAL_DMA_Start_IT+0x22c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a51      	ldr	r2, [pc, #324]	@ (80023b8 <HAL_DMA_Start_IT+0x230>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <HAL_DMA_Start_IT+0x100>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <HAL_DMA_Start_IT+0x110>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f001 fb58 	bl	8003954 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a34      	ldr	r2, [pc, #208]	@ (800237c <HAL_DMA_Start_IT+0x1f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a33      	ldr	r2, [pc, #204]	@ (8002380 <HAL_DMA_Start_IT+0x1f8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	@ (8002384 <HAL_DMA_Start_IT+0x1fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a30      	ldr	r2, [pc, #192]	@ (8002388 <HAL_DMA_Start_IT+0x200>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	@ (800238c <HAL_DMA_Start_IT+0x204>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2d      	ldr	r2, [pc, #180]	@ (8002390 <HAL_DMA_Start_IT+0x208>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <HAL_DMA_Start_IT+0x20c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <HAL_DMA_Start_IT+0x210>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	@ (800239c <HAL_DMA_Start_IT+0x214>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	@ (80023a0 <HAL_DMA_Start_IT+0x218>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <HAL_DMA_Start_IT+0x21c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <HAL_DMA_Start_IT+0x220>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <HAL_DMA_Start_IT+0x224>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <HAL_DMA_Start_IT+0x228>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	@ (80023b4 <HAL_DMA_Start_IT+0x22c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1e      	ldr	r2, [pc, #120]	@ (80023b8 <HAL_DMA_Start_IT+0x230>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Start_IT+0x1c0>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_DMA_Start_IT+0x1c2>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d036      	beq.n	80023bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 021e 	bic.w	r2, r3, #30
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0216 	orr.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03e      	beq.n	80023e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0208 	orr.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e035      	b.n	80023e8 <HAL_DMA_Start_IT+0x260>
 800237c:	40020010 	.word	0x40020010
 8002380:	40020028 	.word	0x40020028
 8002384:	40020040 	.word	0x40020040
 8002388:	40020058 	.word	0x40020058
 800238c:	40020070 	.word	0x40020070
 8002390:	40020088 	.word	0x40020088
 8002394:	400200a0 	.word	0x400200a0
 8002398:	400200b8 	.word	0x400200b8
 800239c:	40020410 	.word	0x40020410
 80023a0:	40020428 	.word	0x40020428
 80023a4:	40020440 	.word	0x40020440
 80023a8:	40020458 	.word	0x40020458
 80023ac:	40020470 	.word	0x40020470
 80023b0:	40020488 	.word	0x40020488
 80023b4:	400204a0 	.word	0x400204a0
 80023b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 020e 	bic.w	r2, r3, #14
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 020a 	orr.w	r2, r2, #10
 80023ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0204 	orr.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a83      	ldr	r2, [pc, #524]	@ (80025fc <HAL_DMA_Start_IT+0x474>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d072      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a82      	ldr	r2, [pc, #520]	@ (8002600 <HAL_DMA_Start_IT+0x478>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d06d      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a80      	ldr	r2, [pc, #512]	@ (8002604 <HAL_DMA_Start_IT+0x47c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d068      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7f      	ldr	r2, [pc, #508]	@ (8002608 <HAL_DMA_Start_IT+0x480>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d063      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7d      	ldr	r2, [pc, #500]	@ (800260c <HAL_DMA_Start_IT+0x484>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d05e      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7c      	ldr	r2, [pc, #496]	@ (8002610 <HAL_DMA_Start_IT+0x488>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d059      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7a      	ldr	r2, [pc, #488]	@ (8002614 <HAL_DMA_Start_IT+0x48c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d054      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a79      	ldr	r2, [pc, #484]	@ (8002618 <HAL_DMA_Start_IT+0x490>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04f      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a77      	ldr	r2, [pc, #476]	@ (800261c <HAL_DMA_Start_IT+0x494>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d04a      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a76      	ldr	r2, [pc, #472]	@ (8002620 <HAL_DMA_Start_IT+0x498>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d045      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a74      	ldr	r2, [pc, #464]	@ (8002624 <HAL_DMA_Start_IT+0x49c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d040      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a73      	ldr	r2, [pc, #460]	@ (8002628 <HAL_DMA_Start_IT+0x4a0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d03b      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a71      	ldr	r2, [pc, #452]	@ (800262c <HAL_DMA_Start_IT+0x4a4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d036      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a70      	ldr	r2, [pc, #448]	@ (8002630 <HAL_DMA_Start_IT+0x4a8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_DMA_Start_IT+0x4ac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02c      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6d      	ldr	r2, [pc, #436]	@ (8002638 <HAL_DMA_Start_IT+0x4b0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d027      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6b      	ldr	r2, [pc, #428]	@ (800263c <HAL_DMA_Start_IT+0x4b4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6a      	ldr	r2, [pc, #424]	@ (8002640 <HAL_DMA_Start_IT+0x4b8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d01d      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a68      	ldr	r2, [pc, #416]	@ (8002644 <HAL_DMA_Start_IT+0x4bc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_DMA_Start_IT+0x4c0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a65      	ldr	r2, [pc, #404]	@ (800264c <HAL_DMA_Start_IT+0x4c4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a64      	ldr	r2, [pc, #400]	@ (8002650 <HAL_DMA_Start_IT+0x4c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a62      	ldr	r2, [pc, #392]	@ (8002654 <HAL_DMA_Start_IT+0x4cc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a61      	ldr	r2, [pc, #388]	@ (8002658 <HAL_DMA_Start_IT+0x4d0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_DMA_Start_IT+0x354>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_DMA_Start_IT+0x356>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01a      	beq.n	8002518 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002516:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a37      	ldr	r2, [pc, #220]	@ (80025fc <HAL_DMA_Start_IT+0x474>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d04a      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a36      	ldr	r2, [pc, #216]	@ (8002600 <HAL_DMA_Start_IT+0x478>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d045      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <HAL_DMA_Start_IT+0x47c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d040      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a33      	ldr	r2, [pc, #204]	@ (8002608 <HAL_DMA_Start_IT+0x480>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d03b      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a31      	ldr	r2, [pc, #196]	@ (800260c <HAL_DMA_Start_IT+0x484>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <HAL_DMA_Start_IT+0x488>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a2e      	ldr	r2, [pc, #184]	@ (8002614 <HAL_DMA_Start_IT+0x48c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02c      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2d      	ldr	r2, [pc, #180]	@ (8002618 <HAL_DMA_Start_IT+0x490>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d027      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2b      	ldr	r2, [pc, #172]	@ (800261c <HAL_DMA_Start_IT+0x494>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2a      	ldr	r2, [pc, #168]	@ (8002620 <HAL_DMA_Start_IT+0x498>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01d      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a28      	ldr	r2, [pc, #160]	@ (8002624 <HAL_DMA_Start_IT+0x49c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a27      	ldr	r2, [pc, #156]	@ (8002628 <HAL_DMA_Start_IT+0x4a0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a25      	ldr	r2, [pc, #148]	@ (800262c <HAL_DMA_Start_IT+0x4a4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a24      	ldr	r2, [pc, #144]	@ (8002630 <HAL_DMA_Start_IT+0x4a8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a22      	ldr	r2, [pc, #136]	@ (8002634 <HAL_DMA_Start_IT+0x4ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a21      	ldr	r2, [pc, #132]	@ (8002638 <HAL_DMA_Start_IT+0x4b0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d108      	bne.n	80025ca <HAL_DMA_Start_IT+0x442>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e012      	b.n	80025f0 <HAL_DMA_Start_IT+0x468>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e009      	b.n	80025f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020010 	.word	0x40020010
 8002600:	40020028 	.word	0x40020028
 8002604:	40020040 	.word	0x40020040
 8002608:	40020058 	.word	0x40020058
 800260c:	40020070 	.word	0x40020070
 8002610:	40020088 	.word	0x40020088
 8002614:	400200a0 	.word	0x400200a0
 8002618:	400200b8 	.word	0x400200b8
 800261c:	40020410 	.word	0x40020410
 8002620:	40020428 	.word	0x40020428
 8002624:	40020440 	.word	0x40020440
 8002628:	40020458 	.word	0x40020458
 800262c:	40020470 	.word	0x40020470
 8002630:	40020488 	.word	0x40020488
 8002634:	400204a0 	.word	0x400204a0
 8002638:	400204b8 	.word	0x400204b8
 800263c:	58025408 	.word	0x58025408
 8002640:	5802541c 	.word	0x5802541c
 8002644:	58025430 	.word	0x58025430
 8002648:	58025444 	.word	0x58025444
 800264c:	58025458 	.word	0x58025458
 8002650:	5802546c 	.word	0x5802546c
 8002654:	58025480 	.word	0x58025480
 8002658:	58025494 	.word	0x58025494

0800265c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e237      	b.n	8002ade <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d004      	beq.n	8002684 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2280      	movs	r2, #128	@ 0x80
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e22c      	b.n	8002ade <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5c      	ldr	r2, [pc, #368]	@ (80027fc <HAL_DMA_Abort_IT+0x1a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d04a      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5b      	ldr	r2, [pc, #364]	@ (8002800 <HAL_DMA_Abort_IT+0x1a4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d045      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a59      	ldr	r2, [pc, #356]	@ (8002804 <HAL_DMA_Abort_IT+0x1a8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d040      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a58      	ldr	r2, [pc, #352]	@ (8002808 <HAL_DMA_Abort_IT+0x1ac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d03b      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a56      	ldr	r2, [pc, #344]	@ (800280c <HAL_DMA_Abort_IT+0x1b0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d036      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <HAL_DMA_Abort_IT+0x1b4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d031      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <HAL_DMA_Abort_IT+0x1b8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02c      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <HAL_DMA_Abort_IT+0x1bc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d027      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a50      	ldr	r2, [pc, #320]	@ (800281c <HAL_DMA_Abort_IT+0x1c0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d022      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <HAL_DMA_Abort_IT+0x1c4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01d      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002824 <HAL_DMA_Abort_IT+0x1c8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002828 <HAL_DMA_Abort_IT+0x1cc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a4a      	ldr	r2, [pc, #296]	@ (800282c <HAL_DMA_Abort_IT+0x1d0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00e      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a49      	ldr	r2, [pc, #292]	@ (8002830 <HAL_DMA_Abort_IT+0x1d4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a47      	ldr	r2, [pc, #284]	@ (8002834 <HAL_DMA_Abort_IT+0x1d8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a46      	ldr	r2, [pc, #280]	@ (8002838 <HAL_DMA_Abort_IT+0x1dc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Abort_IT+0xcc>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_DMA_Abort_IT+0xce>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8086 	beq.w	800283c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2204      	movs	r2, #4
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_DMA_Abort_IT+0x1a0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d04a      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Abort_IT+0x1a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d045      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2c      	ldr	r2, [pc, #176]	@ (8002804 <HAL_DMA_Abort_IT+0x1a8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d040      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2b      	ldr	r2, [pc, #172]	@ (8002808 <HAL_DMA_Abort_IT+0x1ac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d03b      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a29      	ldr	r2, [pc, #164]	@ (800280c <HAL_DMA_Abort_IT+0x1b0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d036      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a28      	ldr	r2, [pc, #160]	@ (8002810 <HAL_DMA_Abort_IT+0x1b4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d031      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <HAL_DMA_Abort_IT+0x1b8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02c      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a25      	ldr	r2, [pc, #148]	@ (8002818 <HAL_DMA_Abort_IT+0x1bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d027      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <HAL_DMA_Abort_IT+0x1c0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <HAL_DMA_Abort_IT+0x1c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d01d      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a20      	ldr	r2, [pc, #128]	@ (8002824 <HAL_DMA_Abort_IT+0x1c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d018      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_DMA_Abort_IT+0x1cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d013      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_DMA_Abort_IT+0x1d0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_DMA_Abort_IT+0x1d4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002834 <HAL_DMA_Abort_IT+0x1d8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x17c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_DMA_Abort_IT+0x1dc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d108      	bne.n	80027ea <HAL_DMA_Abort_IT+0x18e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e178      	b.n	8002adc <HAL_DMA_Abort_IT+0x480>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e16f      	b.n	8002adc <HAL_DMA_Abort_IT+0x480>
 80027fc:	40020010 	.word	0x40020010
 8002800:	40020028 	.word	0x40020028
 8002804:	40020040 	.word	0x40020040
 8002808:	40020058 	.word	0x40020058
 800280c:	40020070 	.word	0x40020070
 8002810:	40020088 	.word	0x40020088
 8002814:	400200a0 	.word	0x400200a0
 8002818:	400200b8 	.word	0x400200b8
 800281c:	40020410 	.word	0x40020410
 8002820:	40020428 	.word	0x40020428
 8002824:	40020440 	.word	0x40020440
 8002828:	40020458 	.word	0x40020458
 800282c:	40020470 	.word	0x40020470
 8002830:	40020488 	.word	0x40020488
 8002834:	400204a0 	.word	0x400204a0
 8002838:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 020e 	bic.w	r2, r2, #14
 800284a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6c      	ldr	r2, [pc, #432]	@ (8002a04 <HAL_DMA_Abort_IT+0x3a8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04a      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_DMA_Abort_IT+0x3ac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d045      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a69      	ldr	r2, [pc, #420]	@ (8002a0c <HAL_DMA_Abort_IT+0x3b0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d040      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a68      	ldr	r2, [pc, #416]	@ (8002a10 <HAL_DMA_Abort_IT+0x3b4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d03b      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a66      	ldr	r2, [pc, #408]	@ (8002a14 <HAL_DMA_Abort_IT+0x3b8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d036      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a65      	ldr	r2, [pc, #404]	@ (8002a18 <HAL_DMA_Abort_IT+0x3bc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d031      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a63      	ldr	r2, [pc, #396]	@ (8002a1c <HAL_DMA_Abort_IT+0x3c0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02c      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	@ (8002a20 <HAL_DMA_Abort_IT+0x3c4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d027      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a60      	ldr	r2, [pc, #384]	@ (8002a24 <HAL_DMA_Abort_IT+0x3c8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002a28 <HAL_DMA_Abort_IT+0x3cc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01d      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a2c <HAL_DMA_Abort_IT+0x3d0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d018      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5c      	ldr	r2, [pc, #368]	@ (8002a30 <HAL_DMA_Abort_IT+0x3d4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002a34 <HAL_DMA_Abort_IT+0x3d8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a59      	ldr	r2, [pc, #356]	@ (8002a38 <HAL_DMA_Abort_IT+0x3dc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a57      	ldr	r2, [pc, #348]	@ (8002a3c <HAL_DMA_Abort_IT+0x3e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_DMA_Abort_IT+0x290>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a56      	ldr	r2, [pc, #344]	@ (8002a40 <HAL_DMA_Abort_IT+0x3e4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <HAL_DMA_Abort_IT+0x2a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e007      	b.n	800290e <HAL_DMA_Abort_IT+0x2b2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a3c      	ldr	r2, [pc, #240]	@ (8002a04 <HAL_DMA_Abort_IT+0x3a8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d072      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_DMA_Abort_IT+0x3ac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d06d      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a39      	ldr	r2, [pc, #228]	@ (8002a0c <HAL_DMA_Abort_IT+0x3b0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d068      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <HAL_DMA_Abort_IT+0x3b4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d063      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a36      	ldr	r2, [pc, #216]	@ (8002a14 <HAL_DMA_Abort_IT+0x3b8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d05e      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <HAL_DMA_Abort_IT+0x3bc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d059      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a33      	ldr	r2, [pc, #204]	@ (8002a1c <HAL_DMA_Abort_IT+0x3c0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d054      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a31      	ldr	r2, [pc, #196]	@ (8002a20 <HAL_DMA_Abort_IT+0x3c4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d04f      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a30      	ldr	r2, [pc, #192]	@ (8002a24 <HAL_DMA_Abort_IT+0x3c8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d04a      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_DMA_Abort_IT+0x3cc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d045      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	@ (8002a2c <HAL_DMA_Abort_IT+0x3d0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d040      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2b      	ldr	r2, [pc, #172]	@ (8002a30 <HAL_DMA_Abort_IT+0x3d4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d03b      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a34 <HAL_DMA_Abort_IT+0x3d8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d036      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <HAL_DMA_Abort_IT+0x3dc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <HAL_DMA_Abort_IT+0x3e0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d02c      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a25      	ldr	r2, [pc, #148]	@ (8002a40 <HAL_DMA_Abort_IT+0x3e4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d027      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a24      	ldr	r2, [pc, #144]	@ (8002a44 <HAL_DMA_Abort_IT+0x3e8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_DMA_Abort_IT+0x3ec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01d      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <HAL_DMA_Abort_IT+0x3f0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_DMA_Abort_IT+0x3f4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1e      	ldr	r2, [pc, #120]	@ (8002a54 <HAL_DMA_Abort_IT+0x3f8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_DMA_Abort_IT+0x3fc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <HAL_DMA_Abort_IT+0x400>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_DMA_Abort_IT+0x3a2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_DMA_Abort_IT+0x404>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d132      	bne.n	8002a64 <HAL_DMA_Abort_IT+0x408>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e031      	b.n	8002a66 <HAL_DMA_Abort_IT+0x40a>
 8002a02:	bf00      	nop
 8002a04:	40020010 	.word	0x40020010
 8002a08:	40020028 	.word	0x40020028
 8002a0c:	40020040 	.word	0x40020040
 8002a10:	40020058 	.word	0x40020058
 8002a14:	40020070 	.word	0x40020070
 8002a18:	40020088 	.word	0x40020088
 8002a1c:	400200a0 	.word	0x400200a0
 8002a20:	400200b8 	.word	0x400200b8
 8002a24:	40020410 	.word	0x40020410
 8002a28:	40020428 	.word	0x40020428
 8002a2c:	40020440 	.word	0x40020440
 8002a30:	40020458 	.word	0x40020458
 8002a34:	40020470 	.word	0x40020470
 8002a38:	40020488 	.word	0x40020488
 8002a3c:	400204a0 	.word	0x400204a0
 8002a40:	400204b8 	.word	0x400204b8
 8002a44:	58025408 	.word	0x58025408
 8002a48:	5802541c 	.word	0x5802541c
 8002a4c:	58025430 	.word	0x58025430
 8002a50:	58025444 	.word	0x58025444
 8002a54:	58025458 	.word	0x58025458
 8002a58:	5802546c 	.word	0x5802546c
 8002a5c:	58025480 	.word	0x58025480
 8002a60:	58025494 	.word	0x58025494
 8002a64:	2300      	movs	r3, #0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d028      	beq.n	8002abc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2201      	movs	r2, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002aba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop

08002ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002af4:	4b67      	ldr	r3, [pc, #412]	@ (8002c94 <HAL_DMA_IRQHandler+0x1ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	@ (8002c98 <HAL_DMA_IRQHandler+0x1b0>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_DMA_IRQHandler+0x1b4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04a      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d045      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d040      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d03b      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a59      	ldr	r2, [pc, #356]	@ (8002cac <HAL_DMA_IRQHandler+0x1c4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d036      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d031      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a56      	ldr	r2, [pc, #344]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d02c      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d027      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a53      	ldr	r2, [pc, #332]	@ (8002cbc <HAL_DMA_IRQHandler+0x1d4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a51      	ldr	r2, [pc, #324]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a50      	ldr	r2, [pc, #320]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4d      	ldr	r2, [pc, #308]	@ (8002ccc <HAL_DMA_IRQHandler+0x1e4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_IRQHandler+0xd2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a48      	ldr	r2, [pc, #288]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_IRQHandler+0xd6>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_DMA_IRQHandler+0xd8>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 842b 	beq.w	800341c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2208      	movs	r2, #8
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80a2 	beq.w	8002d20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <HAL_DMA_IRQHandler+0x1b4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d04a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d045      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d040      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d03b      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_DMA_IRQHandler+0x1c4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d036      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d031      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02c      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a24      	ldr	r2, [pc, #144]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d027      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_DMA_IRQHandler+0x1d4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d01d      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d018      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <HAL_DMA_IRQHandler+0x1e4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00e      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d009      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x194>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d12f      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x1f4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	e02e      	b.n	8002cf0 <HAL_DMA_IRQHandler+0x208>
 8002c92:	bf00      	nop
 8002c94:	24000000 	.word	0x24000000
 8002c98:	1b4e81b5 	.word	0x1b4e81b5
 8002c9c:	40020010 	.word	0x40020010
 8002ca0:	40020028 	.word	0x40020028
 8002ca4:	40020040 	.word	0x40020040
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	40020070 	.word	0x40020070
 8002cb0:	40020088 	.word	0x40020088
 8002cb4:	400200a0 	.word	0x400200a0
 8002cb8:	400200b8 	.word	0x400200b8
 8002cbc:	40020410 	.word	0x40020410
 8002cc0:	40020428 	.word	0x40020428
 8002cc4:	40020440 	.word	0x40020440
 8002cc8:	40020458 	.word	0x40020458
 8002ccc:	40020470 	.word	0x40020470
 8002cd0:	40020488 	.word	0x40020488
 8002cd4:	400204a0 	.word	0x400204a0
 8002cd8:	400204b8 	.word	0x400204b8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0204 	bic.w	r2, r2, #4
 8002d02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d06e      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d045      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_DMA_IRQHandler+0x400>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a64      	ldr	r2, [pc, #400]	@ (8002eec <HAL_DMA_IRQHandler+0x404>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a63      	ldr	r2, [pc, #396]	@ (8002ef0 <HAL_DMA_IRQHandler+0x408>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d036      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_DMA_IRQHandler+0x40c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a60      	ldr	r2, [pc, #384]	@ (8002ef8 <HAL_DMA_IRQHandler+0x410>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5e      	ldr	r2, [pc, #376]	@ (8002efc <HAL_DMA_IRQHandler+0x414>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d027      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f00 <HAL_DMA_IRQHandler+0x418>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5b      	ldr	r2, [pc, #364]	@ (8002f04 <HAL_DMA_IRQHandler+0x41c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_DMA_IRQHandler+0x420>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a58      	ldr	r2, [pc, #352]	@ (8002f0c <HAL_DMA_IRQHandler+0x424>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a57      	ldr	r2, [pc, #348]	@ (8002f10 <HAL_DMA_IRQHandler+0x428>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a55      	ldr	r2, [pc, #340]	@ (8002f14 <HAL_DMA_IRQHandler+0x42c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a54      	ldr	r2, [pc, #336]	@ (8002f18 <HAL_DMA_IRQHandler+0x430>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x2ee>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	@ (8002f1c <HAL_DMA_IRQHandler+0x434>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10a      	bne.n	8002dec <HAL_DMA_IRQHandler+0x304>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e003      	b.n	8002df4 <HAL_DMA_IRQHandler+0x30c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2201      	movs	r2, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0202 	orr.w	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 808f 	beq.w	8002f48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a29      	ldr	r2, [pc, #164]	@ (8002ee8 <HAL_DMA_IRQHandler+0x400>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	@ (8002eec <HAL_DMA_IRQHandler+0x404>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <HAL_DMA_IRQHandler+0x408>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <HAL_DMA_IRQHandler+0x40c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a23      	ldr	r2, [pc, #140]	@ (8002ef8 <HAL_DMA_IRQHandler+0x410>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <HAL_DMA_IRQHandler+0x414>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a20      	ldr	r2, [pc, #128]	@ (8002f00 <HAL_DMA_IRQHandler+0x418>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1e      	ldr	r2, [pc, #120]	@ (8002f04 <HAL_DMA_IRQHandler+0x41c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1d      	ldr	r2, [pc, #116]	@ (8002f08 <HAL_DMA_IRQHandler+0x420>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_DMA_IRQHandler+0x424>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <HAL_DMA_IRQHandler+0x428>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <HAL_DMA_IRQHandler+0x42c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <HAL_DMA_IRQHandler+0x430>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_IRQHandler+0x3e2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <HAL_DMA_IRQHandler+0x434>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12a      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x438>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e023      	b.n	8002f28 <HAL_DMA_IRQHandler+0x440>
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2204      	movs	r2, #4
 8002f36:	409a      	lsls	r2, r3
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2210      	movs	r2, #16
 8002f52:	409a      	lsls	r2, r3
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a6 	beq.w	80030aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a85      	ldr	r2, [pc, #532]	@ (8003178 <HAL_DMA_IRQHandler+0x690>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d04a      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a83      	ldr	r2, [pc, #524]	@ (800317c <HAL_DMA_IRQHandler+0x694>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d045      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a82      	ldr	r2, [pc, #520]	@ (8003180 <HAL_DMA_IRQHandler+0x698>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d040      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a80      	ldr	r2, [pc, #512]	@ (8003184 <HAL_DMA_IRQHandler+0x69c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d03b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003188 <HAL_DMA_IRQHandler+0x6a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d036      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a7d      	ldr	r2, [pc, #500]	@ (800318c <HAL_DMA_IRQHandler+0x6a4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d031      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003190 <HAL_DMA_IRQHandler+0x6a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d02c      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7a      	ldr	r2, [pc, #488]	@ (8003194 <HAL_DMA_IRQHandler+0x6ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d027      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a79      	ldr	r2, [pc, #484]	@ (8003198 <HAL_DMA_IRQHandler+0x6b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d022      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a77      	ldr	r2, [pc, #476]	@ (800319c <HAL_DMA_IRQHandler+0x6b4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a76      	ldr	r2, [pc, #472]	@ (80031a0 <HAL_DMA_IRQHandler+0x6b8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a74      	ldr	r2, [pc, #464]	@ (80031a4 <HAL_DMA_IRQHandler+0x6bc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a73      	ldr	r2, [pc, #460]	@ (80031a8 <HAL_DMA_IRQHandler+0x6c0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a71      	ldr	r2, [pc, #452]	@ (80031ac <HAL_DMA_IRQHandler+0x6c4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a70      	ldr	r2, [pc, #448]	@ (80031b0 <HAL_DMA_IRQHandler+0x6c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x516>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80031b4 <HAL_DMA_IRQHandler+0x6cc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10a      	bne.n	8003014 <HAL_DMA_IRQHandler+0x52c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e009      	b.n	8003028 <HAL_DMA_IRQHandler+0x540>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d03e      	beq.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2210      	movs	r2, #16
 8003036:	409a      	lsls	r2, r3
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d024      	beq.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
 8003068:	e01f      	b.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01b      	beq.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e016      	b.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2220      	movs	r2, #32
 80030b4:	409a      	lsls	r2, r3
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8110 	beq.w	80032e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003178 <HAL_DMA_IRQHandler+0x690>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2b      	ldr	r2, [pc, #172]	@ (800317c <HAL_DMA_IRQHandler+0x694>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a29      	ldr	r2, [pc, #164]	@ (8003180 <HAL_DMA_IRQHandler+0x698>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <HAL_DMA_IRQHandler+0x69c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a26      	ldr	r2, [pc, #152]	@ (8003188 <HAL_DMA_IRQHandler+0x6a0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a25      	ldr	r2, [pc, #148]	@ (800318c <HAL_DMA_IRQHandler+0x6a4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a23      	ldr	r2, [pc, #140]	@ (8003190 <HAL_DMA_IRQHandler+0x6a8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_DMA_IRQHandler+0x6ac>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a20      	ldr	r2, [pc, #128]	@ (8003198 <HAL_DMA_IRQHandler+0x6b0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_DMA_IRQHandler+0x6b4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <HAL_DMA_IRQHandler+0x6b8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_DMA_IRQHandler+0x6bc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_DMA_IRQHandler+0x6c0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_DMA_IRQHandler+0x6c4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <HAL_DMA_IRQHandler+0x6c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMA_IRQHandler+0x678>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a16      	ldr	r2, [pc, #88]	@ (80031b4 <HAL_DMA_IRQHandler+0x6cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d12b      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x6d0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e02a      	b.n	80031cc <HAL_DMA_IRQHandler+0x6e4>
 8003176:	bf00      	nop
 8003178:	40020010 	.word	0x40020010
 800317c:	40020028 	.word	0x40020028
 8003180:	40020040 	.word	0x40020040
 8003184:	40020058 	.word	0x40020058
 8003188:	40020070 	.word	0x40020070
 800318c:	40020088 	.word	0x40020088
 8003190:	400200a0 	.word	0x400200a0
 8003194:	400200b8 	.word	0x400200b8
 8003198:	40020410 	.word	0x40020410
 800319c:	40020428 	.word	0x40020428
 80031a0:	40020440 	.word	0x40020440
 80031a4:	40020458 	.word	0x40020458
 80031a8:	40020470 	.word	0x40020470
 80031ac:	40020488 	.word	0x40020488
 80031b0:	400204a0 	.word	0x400204a0
 80031b4:	400204b8 	.word	0x400204b8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8087 	beq.w	80032e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2220      	movs	r2, #32
 80031dc:	409a      	lsls	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d139      	bne.n	8003262 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0216 	bic.w	r2, r2, #22
 80031fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800320c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_DMA_IRQHandler+0x736>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0208 	bic.w	r2, r2, #8
 800322c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	223f      	movs	r2, #63	@ 0x3f
 8003238:	409a      	lsls	r2, r3
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 834a 	beq.w	80038ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
          }
          return;
 8003260:	e344      	b.n	80038ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02c      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
 800328e:	e027      	b.n	80032e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d023      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e01e      	b.n	80032e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10f      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0210 	bic.w	r2, r2, #16
 80032be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8306 	beq.w	80038f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8088 	beq.w	8003408 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a7a      	ldr	r2, [pc, #488]	@ (80034f0 <HAL_DMA_IRQHandler+0xa08>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a79      	ldr	r2, [pc, #484]	@ (80034f4 <HAL_DMA_IRQHandler+0xa0c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a77      	ldr	r2, [pc, #476]	@ (80034f8 <HAL_DMA_IRQHandler+0xa10>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a76      	ldr	r2, [pc, #472]	@ (80034fc <HAL_DMA_IRQHandler+0xa14>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a74      	ldr	r2, [pc, #464]	@ (8003500 <HAL_DMA_IRQHandler+0xa18>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a73      	ldr	r2, [pc, #460]	@ (8003504 <HAL_DMA_IRQHandler+0xa1c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a71      	ldr	r2, [pc, #452]	@ (8003508 <HAL_DMA_IRQHandler+0xa20>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a70      	ldr	r2, [pc, #448]	@ (800350c <HAL_DMA_IRQHandler+0xa24>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6e      	ldr	r2, [pc, #440]	@ (8003510 <HAL_DMA_IRQHandler+0xa28>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6d      	ldr	r2, [pc, #436]	@ (8003514 <HAL_DMA_IRQHandler+0xa2c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6b      	ldr	r2, [pc, #428]	@ (8003518 <HAL_DMA_IRQHandler+0xa30>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6a      	ldr	r2, [pc, #424]	@ (800351c <HAL_DMA_IRQHandler+0xa34>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a68      	ldr	r2, [pc, #416]	@ (8003520 <HAL_DMA_IRQHandler+0xa38>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a67      	ldr	r2, [pc, #412]	@ (8003524 <HAL_DMA_IRQHandler+0xa3c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a65      	ldr	r2, [pc, #404]	@ (8003528 <HAL_DMA_IRQHandler+0xa40>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x8b8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a64      	ldr	r2, [pc, #400]	@ (800352c <HAL_DMA_IRQHandler+0xa44>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x8ca>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <HAL_DMA_IRQHandler+0x8da>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d307      	bcc.n	80033de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f2      	bne.n	80033c2 <HAL_DMA_IRQHandler+0x8da>
 80033dc:	e000      	b.n	80033e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80033f6:	e003      	b.n	8003400 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8272 	beq.w	80038f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e26c      	b.n	80038f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a43      	ldr	r2, [pc, #268]	@ (8003530 <HAL_DMA_IRQHandler+0xa48>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a42      	ldr	r2, [pc, #264]	@ (8003534 <HAL_DMA_IRQHandler+0xa4c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a40      	ldr	r2, [pc, #256]	@ (8003538 <HAL_DMA_IRQHandler+0xa50>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3f      	ldr	r2, [pc, #252]	@ (800353c <HAL_DMA_IRQHandler+0xa54>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3d      	ldr	r2, [pc, #244]	@ (8003540 <HAL_DMA_IRQHandler+0xa58>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3c      	ldr	r2, [pc, #240]	@ (8003544 <HAL_DMA_IRQHandler+0xa5c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3a      	ldr	r2, [pc, #232]	@ (8003548 <HAL_DMA_IRQHandler+0xa60>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_IRQHandler+0x984>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a39      	ldr	r2, [pc, #228]	@ (800354c <HAL_DMA_IRQHandler+0xa64>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_DMA_IRQHandler+0x988>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_DMA_IRQHandler+0x98a>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 823f 	beq.w	80038f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2204      	movs	r2, #4
 800348a:	409a      	lsls	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80cd 	beq.w	8003630 <HAL_DMA_IRQHandler+0xb48>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80c7 	beq.w	8003630 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2204      	movs	r2, #4
 80034ac:	409a      	lsls	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d049      	beq.n	8003550 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8210 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d8:	e20a      	b.n	80038f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8206 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ec:	e200      	b.n	80038f0 <HAL_DMA_IRQHandler+0xe08>
 80034ee:	bf00      	nop
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8
 8003530:	58025408 	.word	0x58025408
 8003534:	5802541c 	.word	0x5802541c
 8003538:	58025430 	.word	0x58025430
 800353c:	58025444 	.word	0x58025444
 8003540:	58025458 	.word	0x58025458
 8003544:	5802546c 	.word	0x5802546c
 8003548:	58025480 	.word	0x58025480
 800354c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d160      	bne.n	800361c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7f      	ldr	r2, [pc, #508]	@ (800375c <HAL_DMA_IRQHandler+0xc74>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d04a      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7d      	ldr	r2, [pc, #500]	@ (8003760 <HAL_DMA_IRQHandler+0xc78>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d045      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7c      	ldr	r2, [pc, #496]	@ (8003764 <HAL_DMA_IRQHandler+0xc7c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d040      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7a      	ldr	r2, [pc, #488]	@ (8003768 <HAL_DMA_IRQHandler+0xc80>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d03b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a79      	ldr	r2, [pc, #484]	@ (800376c <HAL_DMA_IRQHandler+0xc84>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d036      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a77      	ldr	r2, [pc, #476]	@ (8003770 <HAL_DMA_IRQHandler+0xc88>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a76      	ldr	r2, [pc, #472]	@ (8003774 <HAL_DMA_IRQHandler+0xc8c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d02c      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a74      	ldr	r2, [pc, #464]	@ (8003778 <HAL_DMA_IRQHandler+0xc90>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d027      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	@ (800377c <HAL_DMA_IRQHandler+0xc94>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a71      	ldr	r2, [pc, #452]	@ (8003780 <HAL_DMA_IRQHandler+0xc98>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01d      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a70      	ldr	r2, [pc, #448]	@ (8003784 <HAL_DMA_IRQHandler+0xc9c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_DMA_IRQHandler+0xca0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6d      	ldr	r2, [pc, #436]	@ (800378c <HAL_DMA_IRQHandler+0xca4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003790 <HAL_DMA_IRQHandler+0xca8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003794 <HAL_DMA_IRQHandler+0xcac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_DMA_IRQHandler+0xb12>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a68      	ldr	r2, [pc, #416]	@ (8003798 <HAL_DMA_IRQHandler+0xcb0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <HAL_DMA_IRQHandler+0xb24>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0208 	bic.w	r2, r2, #8
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e007      	b.n	800361c <HAL_DMA_IRQHandler+0xb34>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0204 	bic.w	r2, r2, #4
 800361a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8165 	beq.w	80038f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800362e:	e15f      	b.n	80038f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2202      	movs	r2, #2
 800363a:	409a      	lsls	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80c5 	beq.w	80037d0 <HAL_DMA_IRQHandler+0xce8>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80bf 	beq.w	80037d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2202      	movs	r2, #2
 800365c:	409a      	lsls	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d018      	beq.n	800369e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 813a 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003688:	e134      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8130 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369c:	e12a      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 8089 	bne.w	80037bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2b      	ldr	r2, [pc, #172]	@ (800375c <HAL_DMA_IRQHandler+0xc74>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_DMA_IRQHandler+0xc78>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_DMA_IRQHandler+0xc7c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_DMA_IRQHandler+0xc80>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a25      	ldr	r2, [pc, #148]	@ (800376c <HAL_DMA_IRQHandler+0xc84>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <HAL_DMA_IRQHandler+0xc88>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a22      	ldr	r2, [pc, #136]	@ (8003774 <HAL_DMA_IRQHandler+0xc8c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a20      	ldr	r2, [pc, #128]	@ (8003778 <HAL_DMA_IRQHandler+0xc90>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	@ (800377c <HAL_DMA_IRQHandler+0xc94>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <HAL_DMA_IRQHandler+0xc98>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_DMA_IRQHandler+0xc9c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <HAL_DMA_IRQHandler+0xca0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a19      	ldr	r2, [pc, #100]	@ (800378c <HAL_DMA_IRQHandler+0xca4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <HAL_DMA_IRQHandler+0xca8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_DMA_IRQHandler+0xcac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_IRQHandler+0xc62>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <HAL_DMA_IRQHandler+0xcb0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d128      	bne.n	800379c <HAL_DMA_IRQHandler+0xcb4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0214 	bic.w	r2, r2, #20
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e027      	b.n	80037ac <HAL_DMA_IRQHandler+0xcc4>
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 020a 	bic.w	r2, r2, #10
 80037aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8097 	beq.w	80038f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ce:	e091      	b.n	80038f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2208      	movs	r2, #8
 80037da:	409a      	lsls	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8088 	beq.w	80038f6 <HAL_DMA_IRQHandler+0xe0e>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8082 	beq.w	80038f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a41      	ldr	r2, [pc, #260]	@ (80038fc <HAL_DMA_IRQHandler+0xe14>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3f      	ldr	r2, [pc, #252]	@ (8003900 <HAL_DMA_IRQHandler+0xe18>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3e      	ldr	r2, [pc, #248]	@ (8003904 <HAL_DMA_IRQHandler+0xe1c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3c      	ldr	r2, [pc, #240]	@ (8003908 <HAL_DMA_IRQHandler+0xe20>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_DMA_IRQHandler+0xe24>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a39      	ldr	r2, [pc, #228]	@ (8003910 <HAL_DMA_IRQHandler+0xe28>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a38      	ldr	r2, [pc, #224]	@ (8003914 <HAL_DMA_IRQHandler+0xe2c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a36      	ldr	r2, [pc, #216]	@ (8003918 <HAL_DMA_IRQHandler+0xe30>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a35      	ldr	r2, [pc, #212]	@ (800391c <HAL_DMA_IRQHandler+0xe34>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a33      	ldr	r2, [pc, #204]	@ (8003920 <HAL_DMA_IRQHandler+0xe38>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_DMA_IRQHandler+0xe3c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a30      	ldr	r2, [pc, #192]	@ (8003928 <HAL_DMA_IRQHandler+0xe40>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <HAL_DMA_IRQHandler+0xe44>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2d      	ldr	r2, [pc, #180]	@ (8003930 <HAL_DMA_IRQHandler+0xe48>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2c      	ldr	r2, [pc, #176]	@ (8003934 <HAL_DMA_IRQHandler+0xe4c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_IRQHandler+0xdaa>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2a      	ldr	r2, [pc, #168]	@ (8003938 <HAL_DMA_IRQHandler+0xe50>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <HAL_DMA_IRQHandler+0xdbc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 021c 	bic.w	r2, r2, #28
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e007      	b.n	80038b4 <HAL_DMA_IRQHandler+0xdcc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020e 	bic.w	r2, r2, #14
 80038b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e004      	b.n	80038f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80038ec:	bf00      	nop
 80038ee:	e002      	b.n	80038f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038f6:	3728      	adds	r7, #40	@ 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40020010 	.word	0x40020010
 8003900:	40020028 	.word	0x40020028
 8003904:	40020040 	.word	0x40020040
 8003908:	40020058 	.word	0x40020058
 800390c:	40020070 	.word	0x40020070
 8003910:	40020088 	.word	0x40020088
 8003914:	400200a0 	.word	0x400200a0
 8003918:	400200b8 	.word	0x400200b8
 800391c:	40020410 	.word	0x40020410
 8003920:	40020428 	.word	0x40020428
 8003924:	40020440 	.word	0x40020440
 8003928:	40020458 	.word	0x40020458
 800392c:	40020470 	.word	0x40020470
 8003930:	40020488 	.word	0x40020488
 8003934:	400204a0 	.word	0x400204a0
 8003938:	400204b8 	.word	0x400204b8

0800393c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7f      	ldr	r2, [pc, #508]	@ (8003b70 <DMA_SetConfig+0x21c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d072      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b74 <DMA_SetConfig+0x220>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d06d      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7c      	ldr	r2, [pc, #496]	@ (8003b78 <DMA_SetConfig+0x224>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d068      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7a      	ldr	r2, [pc, #488]	@ (8003b7c <DMA_SetConfig+0x228>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d063      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a79      	ldr	r2, [pc, #484]	@ (8003b80 <DMA_SetConfig+0x22c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d05e      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a77      	ldr	r2, [pc, #476]	@ (8003b84 <DMA_SetConfig+0x230>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d059      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a76      	ldr	r2, [pc, #472]	@ (8003b88 <DMA_SetConfig+0x234>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d054      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a74      	ldr	r2, [pc, #464]	@ (8003b8c <DMA_SetConfig+0x238>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d04f      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a73      	ldr	r2, [pc, #460]	@ (8003b90 <DMA_SetConfig+0x23c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a71      	ldr	r2, [pc, #452]	@ (8003b94 <DMA_SetConfig+0x240>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a70      	ldr	r2, [pc, #448]	@ (8003b98 <DMA_SetConfig+0x244>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <DMA_SetConfig+0x248>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6d      	ldr	r2, [pc, #436]	@ (8003ba0 <DMA_SetConfig+0x24c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba4 <DMA_SetConfig+0x250>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba8 <DMA_SetConfig+0x254>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <DMA_SetConfig+0x258>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a67      	ldr	r2, [pc, #412]	@ (8003bb0 <DMA_SetConfig+0x25c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <DMA_SetConfig+0x260>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a64      	ldr	r2, [pc, #400]	@ (8003bb8 <DMA_SetConfig+0x264>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a62      	ldr	r2, [pc, #392]	@ (8003bbc <DMA_SetConfig+0x268>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a61      	ldr	r2, [pc, #388]	@ (8003bc0 <DMA_SetConfig+0x26c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc4 <DMA_SetConfig+0x270>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <DMA_SetConfig+0x274>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <DMA_SetConfig+0x10a>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5c      	ldr	r2, [pc, #368]	@ (8003bcc <DMA_SetConfig+0x278>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <DMA_SetConfig+0x10e>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <DMA_SetConfig+0x110>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a39      	ldr	r2, [pc, #228]	@ (8003b70 <DMA_SetConfig+0x21c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04a      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a38      	ldr	r2, [pc, #224]	@ (8003b74 <DMA_SetConfig+0x220>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d045      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a36      	ldr	r2, [pc, #216]	@ (8003b78 <DMA_SetConfig+0x224>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d040      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a35      	ldr	r2, [pc, #212]	@ (8003b7c <DMA_SetConfig+0x228>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d03b      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	@ (8003b80 <DMA_SetConfig+0x22c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d036      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <DMA_SetConfig+0x230>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d031      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <DMA_SetConfig+0x234>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02c      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <DMA_SetConfig+0x238>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d027      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <DMA_SetConfig+0x23c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <DMA_SetConfig+0x240>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01d      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <DMA_SetConfig+0x244>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a29      	ldr	r2, [pc, #164]	@ (8003b9c <DMA_SetConfig+0x248>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <DMA_SetConfig+0x24c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ba4 <DMA_SetConfig+0x250>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a24      	ldr	r2, [pc, #144]	@ (8003ba8 <DMA_SetConfig+0x254>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <DMA_SetConfig+0x1d0>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <DMA_SetConfig+0x258>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <DMA_SetConfig+0x1d4>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <DMA_SetConfig+0x1d6>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d059      	beq.n	8003be2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	223f      	movs	r2, #63	@ 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d138      	bne.n	8003bd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b6e:	e086      	b.n	8003c7e <DMA_SetConfig+0x32a>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
 8003bb0:	58025408 	.word	0x58025408
 8003bb4:	5802541c 	.word	0x5802541c
 8003bb8:	58025430 	.word	0x58025430
 8003bbc:	58025444 	.word	0x58025444
 8003bc0:	58025458 	.word	0x58025458
 8003bc4:	5802546c 	.word	0x5802546c
 8003bc8:	58025480 	.word	0x58025480
 8003bcc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
}
 8003be0:	e04d      	b.n	8003c7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a29      	ldr	r2, [pc, #164]	@ (8003c8c <DMA_SetConfig+0x338>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	@ (8003c90 <DMA_SetConfig+0x33c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	@ (8003c94 <DMA_SetConfig+0x340>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a24      	ldr	r2, [pc, #144]	@ (8003c98 <DMA_SetConfig+0x344>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a23      	ldr	r2, [pc, #140]	@ (8003c9c <DMA_SetConfig+0x348>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <DMA_SetConfig+0x34c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a20      	ldr	r2, [pc, #128]	@ (8003ca4 <DMA_SetConfig+0x350>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <DMA_SetConfig+0x2de>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <DMA_SetConfig+0x354>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <DMA_SetConfig+0x2e2>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <DMA_SetConfig+0x2e4>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d108      	bne.n	8003c6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
}
 8003c6c:	e007      	b.n	8003c7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	58025408 	.word	0x58025408
 8003c90:	5802541c 	.word	0x5802541c
 8003c94:	58025430 	.word	0x58025430
 8003c98:	58025444 	.word	0x58025444
 8003c9c:	58025458 	.word	0x58025458
 8003ca0:	5802546c 	.word	0x5802546c
 8003ca4:	58025480 	.word	0x58025480
 8003ca8:	58025494 	.word	0x58025494

08003cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a42      	ldr	r2, [pc, #264]	@ (8003dc4 <DMA_CalcBaseAndBitshift+0x118>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d04a      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a41      	ldr	r2, [pc, #260]	@ (8003dc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d045      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8003dcc <DMA_CalcBaseAndBitshift+0x120>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d040      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8003dd0 <DMA_CalcBaseAndBitshift+0x124>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d03b      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd4 <DMA_CalcBaseAndBitshift+0x128>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d036      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d031      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a39      	ldr	r2, [pc, #228]	@ (8003ddc <DMA_CalcBaseAndBitshift+0x130>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02c      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	@ (8003de0 <DMA_CalcBaseAndBitshift+0x134>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d027      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a36      	ldr	r2, [pc, #216]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x138>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a35      	ldr	r2, [pc, #212]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d01d      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a33      	ldr	r2, [pc, #204]	@ (8003dec <DMA_CalcBaseAndBitshift+0x140>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a32      	ldr	r2, [pc, #200]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x144>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x148>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	@ (8003dfc <DMA_CalcBaseAndBitshift+0x150>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <DMA_CalcBaseAndBitshift+0x154>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <DMA_CalcBaseAndBitshift+0xac>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <DMA_CalcBaseAndBitshift+0xae>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d024      	beq.n	8003da8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	3b10      	subs	r3, #16
 8003d66:	4a27      	ldr	r2, [pc, #156]	@ (8003e04 <DMA_CalcBaseAndBitshift+0x158>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d78:	5cd3      	ldrb	r3, [r2, r3]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d908      	bls.n	8003d98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <DMA_CalcBaseAndBitshift+0x160>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d96:	e00d      	b.n	8003db4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <DMA_CalcBaseAndBitshift+0x160>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da6:	e005      	b.n	8003db4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40020010 	.word	0x40020010
 8003dc8:	40020028 	.word	0x40020028
 8003dcc:	40020040 	.word	0x40020040
 8003dd0:	40020058 	.word	0x40020058
 8003dd4:	40020070 	.word	0x40020070
 8003dd8:	40020088 	.word	0x40020088
 8003ddc:	400200a0 	.word	0x400200a0
 8003de0:	400200b8 	.word	0x400200b8
 8003de4:	40020410 	.word	0x40020410
 8003de8:	40020428 	.word	0x40020428
 8003dec:	40020440 	.word	0x40020440
 8003df0:	40020458 	.word	0x40020458
 8003df4:	40020470 	.word	0x40020470
 8003df8:	40020488 	.word	0x40020488
 8003dfc:	400204a0 	.word	0x400204a0
 8003e00:	400204b8 	.word	0x400204b8
 8003e04:	aaaaaaab 	.word	0xaaaaaaab
 8003e08:	080091c0 	.word	0x080091c0
 8003e0c:	fffffc00 	.word	0xfffffc00

08003e10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d120      	bne.n	8003e66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d858      	bhi.n	8003ede <DMA_CheckFifoParam+0xce>
 8003e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <DMA_CheckFifoParam+0x24>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e57 	.word	0x08003e57
 8003e3c:	08003e45 	.word	0x08003e45
 8003e40:	08003edf 	.word	0x08003edf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d048      	beq.n	8003ee2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e54:	e045      	b.n	8003ee2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e5e:	d142      	bne.n	8003ee6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e64:	e03f      	b.n	8003ee6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e6e:	d123      	bne.n	8003eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d838      	bhi.n	8003eea <DMA_CheckFifoParam+0xda>
 8003e78:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <DMA_CheckFifoParam+0x70>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e97 	.word	0x08003e97
 8003e88:	08003e91 	.word	0x08003e91
 8003e8c:	08003ea9 	.word	0x08003ea9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
        break;
 8003e94:	e030      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d025      	beq.n	8003eee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ea6:	e022      	b.n	8003eee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003eb0:	d11f      	bne.n	8003ef2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eb6:	e01c      	b.n	8003ef2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d902      	bls.n	8003ec6 <DMA_CheckFifoParam+0xb6>
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d003      	beq.n	8003ecc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ec4:	e018      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e015      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
    break;
 8003edc:	e00b      	b.n	8003ef6 <DMA_CheckFifoParam+0xe6>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e00a      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e008      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e006      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8003eea:	bf00      	nop
 8003eec:	e004      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <DMA_CheckFifoParam+0xe8>
    break;
 8003ef6:	bf00      	nop
    }
  }

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop

08003f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a38      	ldr	r2, [pc, #224]	@ (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a36      	ldr	r2, [pc, #216]	@ (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a35      	ldr	r2, [pc, #212]	@ (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a33      	ldr	r2, [pc, #204]	@ (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a32      	ldr	r2, [pc, #200]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a30      	ldr	r2, [pc, #192]	@ (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2f      	ldr	r2, [pc, #188]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a2d      	ldr	r2, [pc, #180]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01a      	beq.n	8003fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3b08      	subs	r3, #8
 8003f78:	4a28      	ldr	r2, [pc, #160]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4b26      	ldr	r3, [pc, #152]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fa4:	e024      	b.n	8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b10      	subs	r3, #16
 8003fae:	4a1e      	ldr	r2, [pc, #120]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d806      	bhi.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d902      	bls.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fe0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	58025408 	.word	0x58025408
 8004000:	5802541c 	.word	0x5802541c
 8004004:	58025430 	.word	0x58025430
 8004008:	58025444 	.word	0x58025444
 800400c:	58025458 	.word	0x58025458
 8004010:	5802546c 	.word	0x5802546c
 8004014:	58025480 	.word	0x58025480
 8004018:	58025494 	.word	0x58025494
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	16009600 	.word	0x16009600
 8004024:	58025880 	.word	0x58025880
 8004028:	aaaaaaab 	.word	0xaaaaaaab
 800402c:	400204b8 	.word	0x400204b8
 8004030:	4002040f 	.word	0x4002040f
 8004034:	10008200 	.word	0x10008200
 8004038:	40020880 	.word	0x40020880

0800403c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04a      	beq.n	80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d847      	bhi.n	80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a25      	ldr	r2, [pc, #148]	@ (80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a24      	ldr	r2, [pc, #144]	@ (80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d01d      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	@ (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80040c6:	e009      	b.n	80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4b14      	ldr	r3, [pc, #80]	@ (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a11      	ldr	r2, [pc, #68]	@ (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	58025408 	.word	0x58025408
 80040f8:	5802541c 	.word	0x5802541c
 80040fc:	58025430 	.word	0x58025430
 8004100:	58025444 	.word	0x58025444
 8004104:	58025458 	.word	0x58025458
 8004108:	5802546c 	.word	0x5802546c
 800410c:	58025480 	.word	0x58025480
 8004110:	58025494 	.word	0x58025494
 8004114:	1600963f 	.word	0x1600963f
 8004118:	58025940 	.word	0x58025940
 800411c:	1000823f 	.word	0x1000823f
 8004120:	40020940 	.word	0x40020940

08004124 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	460b      	mov	r3, r1
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e00a      	b.n	8004156 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	605a      	str	r2, [r3, #4]
      break;
 800414c:	e002      	b.n	8004154 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
      break;
 8004152:	bf00      	nop
  }

  return status;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e003      	b.n	800417e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2201      	movs	r2, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	011a      	lsls	r2, r3, #4
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_EXTI_IRQHandler+0x5c>)
 80041b6:	4413      	add	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4798      	blx	r3
    }
  }
}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	58000088 	.word	0x58000088

080041ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041fa:	4b89      	ldr	r3, [pc, #548]	@ (8004420 <HAL_GPIO_Init+0x234>)
 80041fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041fe:	e194      	b.n	800452a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2101      	movs	r1, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8186 	beq.w	8004524 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d005      	beq.n	8004230 <HAL_GPIO_Init+0x44>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d130      	bne.n	8004292 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2203      	movs	r2, #3
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004266:	2201      	movs	r2, #1
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0201 	and.w	r2, r3, #1
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b03      	cmp	r3, #3
 800429c:	d017      	beq.n	80042ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	2203      	movs	r2, #3
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4013      	ands	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d123      	bne.n	8004322 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	69b9      	ldr	r1, [r7, #24]
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0203 	and.w	r2, r3, #3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80e0 	beq.w	8004524 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004364:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <HAL_GPIO_Init+0x238>)
 8004366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800436a:	4a2e      	ldr	r2, [pc, #184]	@ (8004424 <HAL_GPIO_Init+0x238>)
 800436c:	f043 0302 	orr.w	r3, r3, #2
 8004370:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_GPIO_Init+0x238>)
 8004376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004382:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <HAL_GPIO_Init+0x23c>)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	3302      	adds	r3, #2
 800438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	220f      	movs	r2, #15
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a20      	ldr	r2, [pc, #128]	@ (800442c <HAL_GPIO_Init+0x240>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d052      	beq.n	8004454 <HAL_GPIO_Init+0x268>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_GPIO_Init+0x244>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d031      	beq.n	800441a <HAL_GPIO_Init+0x22e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004434 <HAL_GPIO_Init+0x248>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02b      	beq.n	8004416 <HAL_GPIO_Init+0x22a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <HAL_GPIO_Init+0x24c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d025      	beq.n	8004412 <HAL_GPIO_Init+0x226>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	@ (800443c <HAL_GPIO_Init+0x250>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01f      	beq.n	800440e <HAL_GPIO_Init+0x222>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004440 <HAL_GPIO_Init+0x254>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d019      	beq.n	800440a <HAL_GPIO_Init+0x21e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004444 <HAL_GPIO_Init+0x258>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_GPIO_Init+0x21a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <HAL_GPIO_Init+0x25c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00d      	beq.n	8004402 <HAL_GPIO_Init+0x216>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a18      	ldr	r2, [pc, #96]	@ (800444c <HAL_GPIO_Init+0x260>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d007      	beq.n	80043fe <HAL_GPIO_Init+0x212>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_GPIO_Init+0x264>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <HAL_GPIO_Init+0x20e>
 80043f6:	2309      	movs	r3, #9
 80043f8:	e02d      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 80043fa:	230a      	movs	r3, #10
 80043fc:	e02b      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 80043fe:	2308      	movs	r3, #8
 8004400:	e029      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 8004402:	2307      	movs	r3, #7
 8004404:	e027      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 8004406:	2306      	movs	r3, #6
 8004408:	e025      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 800440a:	2305      	movs	r3, #5
 800440c:	e023      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 800440e:	2304      	movs	r3, #4
 8004410:	e021      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 8004412:	2303      	movs	r3, #3
 8004414:	e01f      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 8004416:	2302      	movs	r3, #2
 8004418:	e01d      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 800441a:	2301      	movs	r3, #1
 800441c:	e01b      	b.n	8004456 <HAL_GPIO_Init+0x26a>
 800441e:	bf00      	nop
 8004420:	58000080 	.word	0x58000080
 8004424:	58024400 	.word	0x58024400
 8004428:	58000400 	.word	0x58000400
 800442c:	58020000 	.word	0x58020000
 8004430:	58020400 	.word	0x58020400
 8004434:	58020800 	.word	0x58020800
 8004438:	58020c00 	.word	0x58020c00
 800443c:	58021000 	.word	0x58021000
 8004440:	58021400 	.word	0x58021400
 8004444:	58021800 	.word	0x58021800
 8004448:	58021c00 	.word	0x58021c00
 800444c:	58022000 	.word	0x58022000
 8004450:	58022400 	.word	0x58022400
 8004454:	2300      	movs	r3, #0
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	f002 0203 	and.w	r2, r2, #3
 800445c:	0092      	lsls	r2, r2, #2
 800445e:	4093      	lsls	r3, r2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004466:	4938      	ldr	r1, [pc, #224]	@ (8004548 <HAL_GPIO_Init+0x35c>)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800449a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	f47f ae63 	bne.w	8004200 <HAL_GPIO_Init+0x14>
  }
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	3724      	adds	r7, #36	@ 0x24
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	58000400 	.word	0x58000400

0800454c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	807b      	strh	r3, [r7, #2]
 8004558:	4613      	mov	r3, r2
 800455a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800455c:	787b      	ldrb	r3, [r7, #1]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004568:	e003      	b.n	8004572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	041a      	lsls	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	619a      	str	r2, [r3, #24]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <HAL_PWREx_ConfigSupply+0x70>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b04      	cmp	r3, #4
 8004592:	d00a      	beq.n	80045aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <HAL_PWREx_ConfigSupply+0x70>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d001      	beq.n	80045a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01f      	b.n	80045e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e01d      	b.n	80045e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045aa:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_PWREx_ConfigSupply+0x70>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	490f      	ldr	r1, [pc, #60]	@ (80045f0 <HAL_PWREx_ConfigSupply+0x70>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ba:	f7fd f93d 	bl	8001838 <HAL_GetTick>
 80045be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045c2:	f7fd f939 	bl	8001838 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d0:	d901      	bls.n	80045d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e007      	b.n	80045e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_PWREx_ConfigSupply+0x70>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e2:	d1ee      	bne.n	80045c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	58024800 	.word	0x58024800

080045f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	@ 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f000 bc48 	b.w	8004e98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8088 	beq.w	8004726 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b99      	ldr	r3, [pc, #612]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004620:	4b96      	ldr	r3, [pc, #600]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004628:	2b10      	cmp	r3, #16
 800462a:	d007      	beq.n	800463c <HAL_RCC_OscConfig+0x48>
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462e:	2b18      	cmp	r3, #24
 8004630:	d111      	bne.n	8004656 <HAL_RCC_OscConfig+0x62>
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b8f      	ldr	r3, [pc, #572]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d06d      	beq.n	8004724 <HAL_RCC_OscConfig+0x130>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d169      	bne.n	8004724 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f000 bc21 	b.w	8004e98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x7a>
 8004660:	4b86      	ldr	r3, [pc, #536]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a85      	ldr	r2, [pc, #532]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	e02e      	b.n	80046cc <HAL_RCC_OscConfig+0xd8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x9c>
 8004676:	4b81      	ldr	r3, [pc, #516]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a80      	ldr	r2, [pc, #512]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 800467c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b7e      	ldr	r3, [pc, #504]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7d      	ldr	r2, [pc, #500]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004688:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xd8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0xc0>
 800469a:	4b78      	ldr	r3, [pc, #480]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a77      	ldr	r2, [pc, #476]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b75      	ldr	r3, [pc, #468]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a74      	ldr	r2, [pc, #464]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xd8>
 80046b4:	4b71      	ldr	r3, [pc, #452]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a70      	ldr	r2, [pc, #448]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b6e      	ldr	r3, [pc, #440]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6d      	ldr	r2, [pc, #436]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd f8b0 	bl	8001838 <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fd f8ac 	bl	8001838 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e3d4      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ee:	4b63      	ldr	r3, [pc, #396]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xe8>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd f89c 	bl	8001838 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd f898 	bl	8001838 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e3c0      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004716:	4b59      	ldr	r3, [pc, #356]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x110>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80ca 	beq.w	80048c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004734:	4b51      	ldr	r3, [pc, #324]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800473c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800473e:	4b4f      	ldr	r3, [pc, #316]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_RCC_OscConfig+0x166>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	2b18      	cmp	r3, #24
 800474e:	d156      	bne.n	80047fe <HAL_RCC_OscConfig+0x20a>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d151      	bne.n	80047fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800475a:	4b48      	ldr	r3, [pc, #288]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_RCC_OscConfig+0x17e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e392      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004772:	4b42      	ldr	r3, [pc, #264]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 0219 	bic.w	r2, r3, #25
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	493f      	ldr	r1, [pc, #252]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd f858 	bl	8001838 <HAL_GetTick>
 8004788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478c:	f7fd f854 	bl	8001838 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e37c      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800479e:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	f7fd f875 	bl	8001898 <HAL_GetREVID>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d817      	bhi.n	80047e8 <HAL_RCC_OscConfig+0x1f4>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d108      	bne.n	80047d2 <HAL_RCC_OscConfig+0x1de>
 80047c0:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047c8:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d0:	e07a      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b2a      	ldr	r3, [pc, #168]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	031b      	lsls	r3, r3, #12
 80047e0:	4926      	ldr	r1, [pc, #152]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e6:	e06f      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	4921      	ldr	r1, [pc, #132]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047fc:	e064      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d047      	beq.n	8004896 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004806:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 0219 	bic.w	r2, r3, #25
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	491a      	ldr	r1, [pc, #104]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd f80e 	bl	8001838 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004820:	f7fd f80a 	bl	8001838 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e332      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004832:	4b12      	ldr	r3, [pc, #72]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	f7fd f82b 	bl	8001898 <HAL_GetREVID>
 8004842:	4603      	mov	r3, r0
 8004844:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004848:	4293      	cmp	r3, r2
 800484a:	d819      	bhi.n	8004880 <HAL_RCC_OscConfig+0x28c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d108      	bne.n	8004866 <HAL_RCC_OscConfig+0x272>
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800485c:	4a07      	ldr	r2, [pc, #28]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004862:	6053      	str	r3, [r2, #4]
 8004864:	e030      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
 8004866:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	031b      	lsls	r3, r3, #12
 8004874:	4901      	ldr	r1, [pc, #4]	@ (800487c <HAL_RCC_OscConfig+0x288>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
 800487a:	e025      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
 800487c:	58024400 	.word	0x58024400
 8004880:	4b9a      	ldr	r3, [pc, #616]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	4997      	ldr	r1, [pc, #604]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
 8004894:	e018      	b.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004896:	4b95      	ldr	r3, [pc, #596]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a94      	ldr	r2, [pc, #592]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc ffc9 	bl	8001838 <HAL_GetTick>
 80048a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fc ffc5 	bl	8001838 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e2ed      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048bc:	4b8b      	ldr	r3, [pc, #556]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a9 	beq.w	8004a28 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b85      	ldr	r3, [pc, #532]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e0:	4b82      	ldr	r3, [pc, #520]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d007      	beq.n	80048fc <HAL_RCC_OscConfig+0x308>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	d13a      	bne.n	8004968 <HAL_RCC_OscConfig+0x374>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d135      	bne.n	8004968 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048fc:	4b7b      	ldr	r3, [pc, #492]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x320>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b80      	cmp	r3, #128	@ 0x80
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e2c1      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004914:	f7fc ffc0 	bl	8001898 <HAL_GetREVID>
 8004918:	4603      	mov	r3, r0
 800491a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800491e:	4293      	cmp	r3, r2
 8004920:	d817      	bhi.n	8004952 <HAL_RCC_OscConfig+0x35e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d108      	bne.n	800493c <HAL_RCC_OscConfig+0x348>
 800492a:	4b70      	ldr	r3, [pc, #448]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004932:	4a6e      	ldr	r2, [pc, #440]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004938:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800493a:	e075      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800493c:	4b6b      	ldr	r3, [pc, #428]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	069b      	lsls	r3, r3, #26
 800494a:	4968      	ldr	r1, [pc, #416]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 800494c:	4313      	orrs	r3, r2
 800494e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004950:	e06a      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004952:	4b66      	ldr	r3, [pc, #408]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	4962      	ldr	r1, [pc, #392]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004966:	e05f      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d042      	beq.n	80049f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004970:	4b5e      	ldr	r3, [pc, #376]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5d      	ldr	r2, [pc, #372]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fc ff5c 	bl	8001838 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004984:	f7fc ff58 	bl	8001838 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e280      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004996:	4b55      	ldr	r3, [pc, #340]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049a2:	f7fc ff79 	bl	8001898 <HAL_GetREVID>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d817      	bhi.n	80049e0 <HAL_RCC_OscConfig+0x3ec>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d108      	bne.n	80049ca <HAL_RCC_OscConfig+0x3d6>
 80049b8:	4b4c      	ldr	r3, [pc, #304]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049c0:	4a4a      	ldr	r2, [pc, #296]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049c6:	6053      	str	r3, [r2, #4]
 80049c8:	e02e      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
 80049ca:	4b48      	ldr	r3, [pc, #288]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	069b      	lsls	r3, r3, #26
 80049d8:	4944      	ldr	r1, [pc, #272]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
 80049de:	e023      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
 80049e0:	4b42      	ldr	r3, [pc, #264]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	493f      	ldr	r1, [pc, #252]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
 80049f4:	e018      	b.n	8004a28 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049f6:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3c      	ldr	r2, [pc, #240]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 80049fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc ff19 	bl	8001838 <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a0a:	f7fc ff15 	bl	8001838 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e23d      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a1c:	4b33      	ldr	r3, [pc, #204]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d036      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fc fef6 	bl	8001838 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fc fef2 	bl	8001838 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e21a      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x45c>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a70:	4b1e      	ldr	r3, [pc, #120]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fc fedc 	bl	8001838 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fc fed8 	bl	8001838 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e200      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a96:	4b15      	ldr	r3, [pc, #84]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d039      	beq.n	8004b22 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a0c      	ldr	r2, [pc, #48]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ac2:	f7fc feb9 	bl	8001838 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aca:	f7fc feb5 	bl	8001838 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1dd      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <HAL_RCC_OscConfig+0x4f8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x4d6>
 8004ae8:	e01b      	b.n	8004b22 <HAL_RCC_OscConfig+0x52e>
 8004aea:	bf00      	nop
 8004aec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004af0:	4b9b      	ldr	r3, [pc, #620]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a9a      	ldr	r2, [pc, #616]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004af6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004afa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004afc:	f7fc fe9c 	bl	8001838 <HAL_GetTick>
 8004b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b04:	f7fc fe98 	bl	8001838 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1c0      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b16:	4b92      	ldr	r3, [pc, #584]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8081 	beq.w	8004c32 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b30:	4b8c      	ldr	r3, [pc, #560]	@ (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a8b      	ldr	r2, [pc, #556]	@ (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b3c:	f7fc fe7c 	bl	8001838 <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b44:	f7fc fe78 	bl	8001838 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	@ 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e1a0      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b56:	4b83      	ldr	r3, [pc, #524]	@ (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x584>
 8004b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b76:	e02d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5e0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <HAL_RCC_OscConfig+0x5a6>
 8004b80:	4b77      	ldr	r3, [pc, #476]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	4a76      	ldr	r2, [pc, #472]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8c:	4b74      	ldr	r3, [pc, #464]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a73      	ldr	r2, [pc, #460]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004b92:	f023 0304 	bic.w	r3, r3, #4
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5e0>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c8>
 8004ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bae:	4b6c      	ldr	r3, [pc, #432]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5e0>
 8004bbc:	4b68      	ldr	r3, [pc, #416]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	4a67      	ldr	r2, [pc, #412]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc8:	4b65      	ldr	r3, [pc, #404]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a64      	ldr	r2, [pc, #400]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bce:	f023 0304 	bic.w	r3, r3, #4
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fc fe2c 	bl	8001838 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fc fe28 	bl	8001838 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e14e      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bfa:	4b59      	ldr	r3, [pc, #356]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ee      	beq.n	8004be4 <HAL_RCC_OscConfig+0x5f0>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fc fe16 	bl	8001838 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fc fe12 	bl	8001838 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e138      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c26:	4b4e      	ldr	r3, [pc, #312]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ee      	bne.n	8004c10 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 812d 	beq.w	8004e96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c3c:	4b48      	ldr	r3, [pc, #288]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c44:	2b18      	cmp	r3, #24
 8004c46:	f000 80bd 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	f040 809e 	bne.w	8004d90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c54:	4b42      	ldr	r3, [pc, #264]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a41      	ldr	r2, [pc, #260]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fc fdea 	bl	8001838 <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fde6 	bl	8001838 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e10e      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c7a:	4b39      	ldr	r3, [pc, #228]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c86:	4b36      	ldr	r3, [pc, #216]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c8a:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <HAL_RCC_OscConfig+0x774>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	4931      	ldr	r1, [pc, #196]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cd0:	4923      	ldr	r1, [pc, #140]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cd6:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a21      	ldr	r2, [pc, #132]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce6:	4b21      	ldr	r3, [pc, #132]	@ (8004d6c <HAL_RCC_OscConfig+0x778>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cee:	00d2      	lsls	r2, r2, #3
 8004cf0:	491b      	ldr	r1, [pc, #108]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	f023 020c 	bic.w	r2, r3, #12
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4917      	ldr	r1, [pc, #92]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d08:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	f023 0202 	bic.w	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d14:	4912      	ldr	r1, [pc, #72]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d3e:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	4a07      	ldr	r2, [pc, #28]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4a:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_RCC_OscConfig+0x76c>)
 8004d50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fc fd6f 	bl	8001838 <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5c:	e011      	b.n	8004d82 <HAL_RCC_OscConfig+0x78e>
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400
 8004d64:	58024800 	.word	0x58024800
 8004d68:	fffffc0c 	.word	0xfffffc0c
 8004d6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fc fd62 	bl	8001838 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e08a      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d82:	4b47      	ldr	r3, [pc, #284]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x77c>
 8004d8e:	e082      	b.n	8004e96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d90:	4b43      	ldr	r3, [pc, #268]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a42      	ldr	r2, [pc, #264]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fd4c 	bl	8001838 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fd48 	bl	8001838 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e070      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x7b0>
 8004dc2:	e068      	b.n	8004e96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dc4:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dca:	4b35      	ldr	r3, [pc, #212]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d031      	beq.n	8004e3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f003 0203 	and.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d12a      	bne.n	8004e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d122      	bne.n	8004e3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11a      	bne.n	8004e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	0a5b      	lsrs	r3, r3, #9
 8004e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d111      	bne.n	8004e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d108      	bne.n	8004e3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	0e1b      	lsrs	r3, r3, #24
 8004e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e02b      	b.n	8004e98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e40:	4b17      	ldr	r3, [pc, #92]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d01f      	beq.n	8004e96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e56:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e62:	f7fc fce9 	bl	8001838 <HAL_GetTick>
 8004e66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e68:	bf00      	nop
 8004e6a:	f7fc fce5 	bl	8001838 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d0f9      	beq.n	8004e6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_OscConfig+0x8b0>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e82:	00d2      	lsls	r2, r2, #3
 8004e84:	4906      	ldr	r1, [pc, #24]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <HAL_RCC_OscConfig+0x8ac>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3730      	adds	r7, #48	@ 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	ffff0007 	.word	0xffff0007

08004ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e19c      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d910      	bls.n	8004eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b87      	ldr	r3, [pc, #540]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	4985      	ldr	r1, [pc, #532]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b83      	ldr	r3, [pc, #524]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e184      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d010      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	4b7b      	ldr	r3, [pc, #492]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d908      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f08:	4b78      	ldr	r3, [pc, #480]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4975      	ldr	r1, [pc, #468]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d908      	bls.n	8004f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f36:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	496a      	ldr	r1, [pc, #424]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	4b64      	ldr	r3, [pc, #400]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d908      	bls.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f64:	4b61      	ldr	r3, [pc, #388]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	495e      	ldr	r1, [pc, #376]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	4b59      	ldr	r3, [pc, #356]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d908      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f92:	4b56      	ldr	r3, [pc, #344]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4953      	ldr	r1, [pc, #332]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d010      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d908      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f023 020f 	bic.w	r2, r3, #15
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4947      	ldr	r1, [pc, #284]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d055      	beq.n	800508a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4940      	ldr	r1, [pc, #256]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d121      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f6      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d107      	bne.n	8005020 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005010:	4b36      	ldr	r3, [pc, #216]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d115      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0ea      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005028:	4b30      	ldr	r3, [pc, #192]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0de      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005038:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d6      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f023 0207 	bic.w	r2, r3, #7
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4925      	ldr	r1, [pc, #148]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505a:	f7fc fbed 	bl	8001838 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005060:	e00a      	b.n	8005078 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005062:	f7fc fbe9 	bl	8001838 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e0be      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005078:	4b1c      	ldr	r3, [pc, #112]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	429a      	cmp	r2, r3
 8005088:	d1eb      	bne.n	8005062 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d208      	bcs.n	80050b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a6:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f023 020f 	bic.w	r2, r3, #15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	490e      	ldr	r1, [pc, #56]	@ (80050ec <HAL_RCC_ClockConfig+0x244>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050b8:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d214      	bcs.n	80050f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b08      	ldr	r3, [pc, #32]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 020f 	bic.w	r2, r3, #15
 80050ce:	4906      	ldr	r1, [pc, #24]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <HAL_RCC_ClockConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e086      	b.n	80051f6 <HAL_RCC_ClockConfig+0x34e>
 80050e8:	52002000 	.word	0x52002000
 80050ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	4b3f      	ldr	r3, [pc, #252]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005108:	429a      	cmp	r2, r3
 800510a:	d208      	bcs.n	800511e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800510c:	4b3c      	ldr	r3, [pc, #240]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	4939      	ldr	r1, [pc, #228]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800511a:	4313      	orrs	r3, r2
 800511c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d010      	beq.n	800514c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	4b34      	ldr	r3, [pc, #208]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005136:	429a      	cmp	r2, r3
 8005138:	d208      	bcs.n	800514c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800513a:	4b31      	ldr	r3, [pc, #196]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	492e      	ldr	r1, [pc, #184]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 8005148:	4313      	orrs	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	4b28      	ldr	r3, [pc, #160]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005164:	429a      	cmp	r2, r3
 8005166:	d208      	bcs.n	800517a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	4922      	ldr	r1, [pc, #136]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 8005176:	4313      	orrs	r3, r2
 8005178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	4b1d      	ldr	r3, [pc, #116]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005192:	429a      	cmp	r2, r3
 8005194:	d208      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005196:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4917      	ldr	r1, [pc, #92]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051a8:	f000 f834 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	4912      	ldr	r1, [pc, #72]	@ (8005204 <HAL_RCC_ClockConfig+0x35c>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <HAL_RCC_ClockConfig+0x358>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <HAL_RCC_ClockConfig+0x35c>)
 80051d0:	5cd3      	ldrb	r3, [r2, r3]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <HAL_RCC_ClockConfig+0x360>)
 80051de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051e0:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <HAL_RCC_ClockConfig+0x364>)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_RCC_ClockConfig+0x368>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc fada 	bl	80017a4 <HAL_InitTick>
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	080091a4 	.word	0x080091a4
 8005208:	24000004 	.word	0x24000004
 800520c:	24000000 	.word	0x24000000
 8005210:	24000024 	.word	0x24000024

08005214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b089      	sub	sp, #36	@ 0x24
 8005218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800521a:	4bb3      	ldr	r3, [pc, #716]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005222:	2b18      	cmp	r3, #24
 8005224:	f200 8155 	bhi.w	80054d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005228:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005295 	.word	0x08005295
 8005234:	080054d3 	.word	0x080054d3
 8005238:	080054d3 	.word	0x080054d3
 800523c:	080054d3 	.word	0x080054d3
 8005240:	080054d3 	.word	0x080054d3
 8005244:	080054d3 	.word	0x080054d3
 8005248:	080054d3 	.word	0x080054d3
 800524c:	080054d3 	.word	0x080054d3
 8005250:	080052bb 	.word	0x080052bb
 8005254:	080054d3 	.word	0x080054d3
 8005258:	080054d3 	.word	0x080054d3
 800525c:	080054d3 	.word	0x080054d3
 8005260:	080054d3 	.word	0x080054d3
 8005264:	080054d3 	.word	0x080054d3
 8005268:	080054d3 	.word	0x080054d3
 800526c:	080054d3 	.word	0x080054d3
 8005270:	080052c1 	.word	0x080052c1
 8005274:	080054d3 	.word	0x080054d3
 8005278:	080054d3 	.word	0x080054d3
 800527c:	080054d3 	.word	0x080054d3
 8005280:	080054d3 	.word	0x080054d3
 8005284:	080054d3 	.word	0x080054d3
 8005288:	080054d3 	.word	0x080054d3
 800528c:	080054d3 	.word	0x080054d3
 8005290:	080052c7 	.word	0x080052c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005294:	4b94      	ldr	r3, [pc, #592]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052a0:	4b91      	ldr	r3, [pc, #580]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	4a90      	ldr	r2, [pc, #576]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052b2:	e111      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052b4:	4b8d      	ldr	r3, [pc, #564]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052b6:	61bb      	str	r3, [r7, #24]
      break;
 80052b8:	e10e      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052ba:	4b8d      	ldr	r3, [pc, #564]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052bc:	61bb      	str	r3, [r7, #24]
      break;
 80052be:	e10b      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052c0:	4b8c      	ldr	r3, [pc, #560]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052c2:	61bb      	str	r3, [r7, #24]
      break;
 80052c4:	e108      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c6:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052d0:	4b85      	ldr	r3, [pc, #532]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052dc:	4b82      	ldr	r3, [pc, #520]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052e6:	4b80      	ldr	r3, [pc, #512]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80e1 	beq.w	80054cc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b02      	cmp	r3, #2
 800530e:	f000 8083 	beq.w	8005418 <HAL_RCC_GetSysClockFreq+0x204>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b02      	cmp	r3, #2
 8005316:	f200 80a1 	bhi.w	800545c <HAL_RCC_GetSysClockFreq+0x248>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x114>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d056      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005326:	e099      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005328:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02d      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005334:	4b6c      	ldr	r3, [pc, #432]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	08db      	lsrs	r3, r3, #3
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	4a6b      	ldr	r2, [pc, #428]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535e:	4b62      	ldr	r3, [pc, #392]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005372:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800538e:	e087      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80054fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800539e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a2:	4b51      	ldr	r3, [pc, #324]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053d2:	e065      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e6:	4b40      	ldr	r3, [pc, #256]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800540a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005416:	e043      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005422:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542a:	4b2f      	ldr	r3, [pc, #188]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	ed97 6a02 	vldr	s12, [r7, #8]
 800543e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800544e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800545a:	e021      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005482:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800549e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	0a5b      	lsrs	r3, r3, #9
 80054a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054aa:	3301      	adds	r3, #1
 80054ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c4:	ee17 3a90 	vmov	r3, s15
 80054c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054ca:	e005      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
      break;
 80054d0:	e002      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054d4:	61bb      	str	r3, [r7, #24]
      break;
 80054d6:	bf00      	nop
  }

  return sysclockfreq;
 80054d8:	69bb      	ldr	r3, [r7, #24]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	@ 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
 80054ec:	03d09000 	.word	0x03d09000
 80054f0:	003d0900 	.word	0x003d0900
 80054f4:	007a1200 	.word	0x007a1200
 80054f8:	46000000 	.word	0x46000000
 80054fc:	4c742400 	.word	0x4c742400
 8005500:	4a742400 	.word	0x4a742400
 8005504:	4af42400 	.word	0x4af42400

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800550e:	f7ff fe81 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b10      	ldr	r3, [pc, #64]	@ (8005558 <HAL_RCC_GetHCLKFreq+0x50>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490f      	ldr	r1, [pc, #60]	@ (800555c <HAL_RCC_GetHCLKFreq+0x54>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <HAL_RCC_GetHCLKFreq+0x50>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	4a09      	ldr	r2, [pc, #36]	@ (800555c <HAL_RCC_GetHCLKFreq+0x54>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	fa22 f303 	lsr.w	r3, r2, r3
 8005542:	4a07      	ldr	r2, [pc, #28]	@ (8005560 <HAL_RCC_GetHCLKFreq+0x58>)
 8005544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005546:	4a07      	ldr	r2, [pc, #28]	@ (8005564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <HAL_RCC_GetHCLKFreq+0x58>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	58024400 	.word	0x58024400
 800555c:	080091a4 	.word	0x080091a4
 8005560:	24000004 	.word	0x24000004
 8005564:	24000000 	.word	0x24000000

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800556c:	f7ff ffcc 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	@ (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4904      	ldr	r1, [pc, #16]	@ (8005590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	58024400 	.word	0x58024400
 8005590:	080091a4 	.word	0x080091a4

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005598:	f7ff ffb6 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	@ (80055bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	58024400 	.word	0x58024400
 80055bc:	080091a4 	.word	0x080091a4

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b0ca      	sub	sp, #296	@ 0x128
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055e4:	2500      	movs	r5, #0
 80055e6:	ea54 0305 	orrs.w	r3, r4, r5
 80055ea:	d049      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f6:	d02f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055fc:	d828      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005602:	d01a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005604:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005608:	d822      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005612:	d007      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005614:	e01c      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005616:	4bb8      	ldr	r3, [pc, #736]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	4ab7      	ldr	r2, [pc, #732]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005622:	e01a      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005628:	3308      	adds	r3, #8
 800562a:	2102      	movs	r1, #2
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fc8f 	bl	8006f50 <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	3328      	adds	r3, #40	@ 0x28
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fd36 	bl	80070b4 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005662:	4ba5      	ldr	r3, [pc, #660]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005666:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005670:	4aa1      	ldr	r2, [pc, #644]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6513      	str	r3, [r2, #80]	@ 0x50
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800568c:	f04f 0900 	mov.w	r9, #0
 8005690:	ea58 0309 	orrs.w	r3, r8, r9
 8005694:	d047      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569c:	2b04      	cmp	r3, #4
 800569e:	d82a      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056bd 	.word	0x080056bd
 80056ac:	080056cb 	.word	0x080056cb
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	080056ff 	.word	0x080056ff
 80056b8:	080056ff 	.word	0x080056ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b8e      	ldr	r3, [pc, #568]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	4a8d      	ldr	r2, [pc, #564]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c8:	e01a      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	3308      	adds	r3, #8
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fc3c 	bl	8006f50 <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056de:	e00f      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	3328      	adds	r3, #40	@ 0x28
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fce3 	bl	80070b4 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005708:	4b7b      	ldr	r3, [pc, #492]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800570a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570c:	f023 0107 	bic.w	r1, r3, #7
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	4a78      	ldr	r2, [pc, #480]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005718:	430b      	orrs	r3, r1
 800571a:	6513      	str	r3, [r2, #80]	@ 0x50
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005732:	f04f 0b00 	mov.w	fp, #0
 8005736:	ea5a 030b 	orrs.w	r3, sl, fp
 800573a:	d04c      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	d030      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574c:	d829      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800574e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005750:	d02d      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005752:	2bc0      	cmp	r3, #192	@ 0xc0
 8005754:	d825      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005756:	2b80      	cmp	r3, #128	@ 0x80
 8005758:	d018      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d821      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d007      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005766:	e01c      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b63      	ldr	r3, [pc, #396]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	4a62      	ldr	r2, [pc, #392]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005774:	e01c      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3308      	adds	r3, #8
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fbe6 	bl	8006f50 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800578a:	e011      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	3328      	adds	r3, #40	@ 0x28
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fc8d 	bl	80070b4 <RCCEx_PLL3_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057b8:	4b4f      	ldr	r3, [pc, #316]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c6:	4a4c      	ldr	r2, [pc, #304]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d053      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005802:	d035      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005804:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005808:	d82e      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800580a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800580e:	d031      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005810:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005814:	d828      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800581a:	d01a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005820:	d822      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800582a:	d007      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800582c:	e01c      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582e:	4b32      	ldr	r3, [pc, #200]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	4a31      	ldr	r2, [pc, #196]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583a:	e01c      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	3308      	adds	r3, #8
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fb83 	bl	8006f50 <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005850:	e011      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	3328      	adds	r3, #40	@ 0x28
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fc2a 	bl	80070b4 <RCCEx_PLL3_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800587e:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800588e:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005890:	430b      	orrs	r3, r1
 8005892:	6593      	str	r3, [r2, #88]	@ 0x58
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d056      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ca:	d038      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058d0:	d831      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d6:	d034      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058dc:	d82b      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e2:	d01d      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e8:	d825      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058f4:	e01f      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4aa1      	ldr	r2, [pc, #644]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005908:	e01c      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	3308      	adds	r3, #8
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fb1c 	bl	8006f50 <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800591e:	e011      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	3328      	adds	r3, #40	@ 0x28
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fbc3 	bl	80070b4 <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800594c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005950:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800595c:	4a8a      	ldr	r2, [pc, #552]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595e:	430b      	orrs	r3, r1
 8005960:	6593      	str	r3, [r2, #88]	@ 0x58
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005982:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d03a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005992:	2b30      	cmp	r3, #48	@ 0x30
 8005994:	d01f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005996:	2b30      	cmp	r3, #48	@ 0x30
 8005998:	d819      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d00c      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d815      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d019      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d111      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4b77      	ldr	r3, [pc, #476]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	4a76      	ldr	r2, [pc, #472]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059b6:	e011      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	3308      	adds	r3, #8
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fac5 	bl	8006f50 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d4:	e002      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059e4:	4b68      	ldr	r3, [pc, #416]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	4a65      	ldr	r2, [pc, #404]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d051      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a2c:	d035      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a32:	d82e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a38:	d031      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a3e:	d828      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a44:	d01a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4a:	d822      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a56:	e01c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fa6e 	bl	8006f50 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e011      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fb15 	bl	80070b4 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005aa8:	4b37      	ldr	r3, [pc, #220]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab6:	4a34      	ldr	r2, [pc, #208]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005adc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d056      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af0:	d033      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af6:	d82c      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005afc:	d02f      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b02:	d826      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b08:	d02b      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b0e:	d820      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b14:	d012      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b1a:	d81a      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d022      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d115      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fa0e 	bl	8006f50 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e015      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fab5 	bl	80070b4 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00a      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e004      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b7e:	4a02      	ldr	r2, [pc, #8]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b84:	e006      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b86:	bf00      	nop
 8005b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005baa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	d055      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc0:	d033      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc6:	d82c      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d02f      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d826      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd8:	d02b      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bde:	d820      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d012      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bea:	d81a      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d022      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf4:	d115      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f9a6 	bl	8006f50 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e015      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	3328      	adds	r3, #40	@ 0x28
 8005c12:	2101      	movs	r1, #1
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fa4d 	bl	80070b4 <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c20:	e00a      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c28:	e006      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c40:	4ba3      	ldr	r3, [pc, #652]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c50:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d037      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d00e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c90:	d816      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9a:	d111      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a8b      	ldr	r2, [pc, #556]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f94c 	bl	8006f50 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a7b      	ldr	r2, [pc, #492]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d039      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d81c      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005d3f 	.word	0x08005d3f
 8005d2c:	08005d5d 	.word	0x08005d5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4b67      	ldr	r3, [pc, #412]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a66      	ldr	r2, [pc, #408]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	3308      	adds	r3, #8
 8005d44:	2102      	movs	r1, #2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f902 	bl	8006f50 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d66:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6a:	f023 0103 	bic.w	r1, r3, #3
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d74:	4a56      	ldr	r2, [pc, #344]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f000 809f 	beq.w	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005da6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db2:	f7fb fd41 	bl	8001838 <HAL_GetTick>
 8005db6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbc:	f7fb fd3c 	bl	8001838 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b64      	cmp	r3, #100	@ 0x64
 8005dca:	d903      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ed      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d179      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005de8:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005df4:	4053      	eors	r3, r2
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfe:	4b34      	ldr	r3, [pc, #208]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e22:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e36:	d118      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fb fcfe 	bl	8001838 <HAL_GetTick>
 8005e3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e40:	e00d      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fb fcf9 	bl	8001838 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0eb      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d129      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e82:	d10e      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e84:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e94:	091a      	lsrs	r2, r3, #4
 8005e96:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6113      	str	r3, [r2, #16]
 8005ea0:	e005      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005ece:	e009      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	58024800 	.word	0x58024800
 8005ed8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f002 0301 	and.w	r3, r2, #1
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005efa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f000 8089 	beq.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f0c:	2b28      	cmp	r3, #40	@ 0x28
 8005f0e:	d86b      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005ff1 	.word	0x08005ff1
 8005f1c:	08005fe9 	.word	0x08005fe9
 8005f20:	08005fe9 	.word	0x08005fe9
 8005f24:	08005fe9 	.word	0x08005fe9
 8005f28:	08005fe9 	.word	0x08005fe9
 8005f2c:	08005fe9 	.word	0x08005fe9
 8005f30:	08005fe9 	.word	0x08005fe9
 8005f34:	08005fe9 	.word	0x08005fe9
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08005fe9 	.word	0x08005fe9
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08005fe9 	.word	0x08005fe9
 8005f50:	08005fe9 	.word	0x08005fe9
 8005f54:	08005fe9 	.word	0x08005fe9
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08005fe9 	.word	0x08005fe9
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005ff1 	.word	0x08005ff1
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fe9 	.word	0x08005fe9
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08005fe9 	.word	0x08005fe9
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	08005ff1 	.word	0x08005ff1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ffc3 	bl	8006f50 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00f      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f86a 	bl	80070b4 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffa:	4bbf      	ldr	r3, [pc, #764]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006008:	4abb      	ldr	r2, [pc, #748]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6553      	str	r3, [r2, #84]	@ 0x54
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 0302 	and.w	r3, r2, #2
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800602e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d041      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800603e:	2b05      	cmp	r3, #5
 8006040:	d824      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006095 	.word	0x08006095
 800604c:	08006061 	.word	0x08006061
 8006050:	08006077 	.word	0x08006077
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	3308      	adds	r3, #8
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ff71 	bl	8006f50 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	3328      	adds	r3, #40	@ 0x28
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f818 	bl	80070b4 <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800609e:	4b96      	ldr	r3, [pc, #600]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f023 0107 	bic.w	r1, r3, #7
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ac:	4a92      	ldr	r2, [pc, #584]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f002 0304 	and.w	r3, r2, #4
 80060c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4313      	orrs	r3, r2
 80060da:	d044      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d825      	bhi.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800611f 	.word	0x0800611f
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	0800613d 	.word	0x0800613d
 8006104:	0800613d 	.word	0x0800613d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	3308      	adds	r3, #8
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 ff1d 	bl	8006f50 <RCCEx_PLL2_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800611c:	e00f      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	3328      	adds	r3, #40	@ 0x28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ffc4 	bl	80070b4 <RCCEx_PLL3_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800613c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006146:	4b6c      	ldr	r3, [pc, #432]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	f023 0107 	bic.w	r1, r3, #7
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006156:	4a68      	ldr	r2, [pc, #416]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006158:	430b      	orrs	r3, r1
 800615a:	6593      	str	r3, [r2, #88]	@ 0x58
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f002 0320 	and.w	r3, r2, #32
 8006172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800617c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d055      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006192:	d033      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006198:	d82c      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d02f      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a4:	d826      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061aa:	d02b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061b0:	d820      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061bc:	d81a      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d022      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c6:	d115      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	3308      	adds	r3, #8
 80061ce:	2100      	movs	r1, #0
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 febd 	bl	8006f50 <RCCEx_PLL2_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061dc:	e015      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	3328      	adds	r3, #40	@ 0x28
 80061e4:	2102      	movs	r1, #2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff64 	bl	80070b4 <RCCEx_PLL3_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061f2:	e00a      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fa:	e006      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061fc:	bf00      	nop
 80061fe:	e004      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	4a35      	ldr	r2, [pc, #212]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6553      	str	r3, [r2, #84]	@ 0x54
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006248:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d058      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800625a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800625e:	d033      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006260:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006264:	d82c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d826      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006272:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006276:	d02b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800627c:	d820      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006282:	d012      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	d81a      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d022      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	d115      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	3308      	adds	r3, #8
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fe57 	bl	8006f50 <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fefe 	bl	80070b4 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062be:	e00a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062c8:	bf00      	nop
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10e      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ee:	4a02      	ldr	r2, [pc, #8]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800631a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d055      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800632c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006330:	d033      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006332:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006336:	d82c      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800633c:	d02f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006342:	d826      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006344:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006348:	d02b      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800634a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800634e:	d820      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006354:	d012      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635a:	d81a      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d022      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006364:	d115      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	3308      	adds	r3, #8
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fdee 	bl	8006f50 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800637a:	e015      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fe95 	bl	80070b4 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006390:	e00a      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063c0:	4a9d      	ldr	r2, [pc, #628]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 0308 	and.w	r3, r2, #8
 80063dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063ea:	460b      	mov	r3, r1
 80063ec:	4313      	orrs	r3, r2
 80063ee:	d01e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	3328      	adds	r3, #40	@ 0x28
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fe54 	bl	80070b4 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006418:	4b87      	ldr	r3, [pc, #540]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006428:	4a83      	ldr	r2, [pc, #524]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f002 0310 	and.w	r3, r2, #16
 800643a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006444:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d01e      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645a:	d10c      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	3328      	adds	r3, #40	@ 0x28
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe25 	bl	80070b4 <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006476:	4b70      	ldr	r3, [pc, #448]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006486:	4a6c      	ldr	r2, [pc, #432]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800649c:	2300      	movs	r3, #0
 800649e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d03e      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b8:	d022      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064be:	d81b      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d00b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064ca:	e015      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	3308      	adds	r3, #8
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd3b 	bl	8006f50 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fde2 	bl	80070b4 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800650a:	4b4b      	ldr	r3, [pc, #300]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800651a:	4a47      	ldr	r2, [pc, #284]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006520:	e003      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006536:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006538:	2300      	movs	r3, #0
 800653a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800653c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006540:	460b      	mov	r3, r1
 8006542:	4313      	orrs	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006552:	d01f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006554:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006558:	d818      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006564:	d007      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006568:	4b33      	ldr	r3, [pc, #204]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006574:	e00f      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fd98 	bl	80070b4 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ae:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80065cc:	2300      	movs	r3, #0
 80065ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80065d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d034      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d007      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065ea:	e011      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065f8:	e00e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3308      	adds	r3, #8
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fca4 	bl	8006f50 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662e:	4a02      	ldr	r2, [pc, #8]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006630:	430b      	orrs	r3, r1
 8006632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006636:	bf00      	nop
 8006638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006652:	2300      	movs	r3, #0
 8006654:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006656:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d00c      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	3328      	adds	r3, #40	@ 0x28
 8006666:	2102      	movs	r1, #2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fd23 	bl	80070b4 <RCCEx_PLL3_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006686:	663b      	str	r3, [r7, #96]	@ 0x60
 8006688:	2300      	movs	r3, #0
 800668a:	667b      	str	r3, [r7, #100]	@ 0x64
 800668c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d038      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a2:	d018      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a8:	d811      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ae:	d014      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b4:	d80b      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c0:	4bc3      	ldr	r3, [pc, #780]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	4ac2      	ldr	r2, [pc, #776]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066cc:	e008      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e8:	4bb9      	ldr	r3, [pc, #740]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f8:	4ab5      	ldr	r2, [pc, #724]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006714:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006716:	2300      	movs	r3, #0
 8006718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006724:	4baa      	ldr	r3, [pc, #680]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006732:	4aa7      	ldr	r2, [pc, #668]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006744:	653b      	str	r3, [r7, #80]	@ 0x50
 8006746:	2300      	movs	r3, #0
 8006748:	657b      	str	r3, [r7, #84]	@ 0x54
 800674a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006754:	4b9e      	ldr	r3, [pc, #632]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006764:	4a9a      	ldr	r2, [pc, #616]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006766:	430b      	orrs	r3, r1
 8006768:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006778:	2300      	movs	r3, #0
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006786:	4b92      	ldr	r3, [pc, #584]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006794:	4a8e      	ldr	r2, [pc, #568]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006796:	430b      	orrs	r3, r1
 8006798:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067b6:	4b86      	ldr	r3, [pc, #536]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4a85      	ldr	r2, [pc, #532]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067c0:	6113      	str	r3, [r2, #16]
 80067c2:	4b83      	ldr	r3, [pc, #524]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c4:	6919      	ldr	r1, [r3, #16]
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067ce:	4a80      	ldr	r2, [pc, #512]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067f0:	4b77      	ldr	r3, [pc, #476]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	4a74      	ldr	r2, [pc, #464]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006800:	430b      	orrs	r3, r1
 8006802:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
 8006816:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006820:	4b6b      	ldr	r3, [pc, #428]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006824:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006830:	4a67      	ldr	r2, [pc, #412]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	2100      	movs	r1, #0
 8006840:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006848:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d011      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	3308      	adds	r3, #8
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb78 	bl	8006f50 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	2100      	movs	r1, #0
 8006880:	6239      	str	r1, [r7, #32]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
 8006888:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d011      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3308      	adds	r3, #8
 8006898:	2101      	movs	r1, #1
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb58 	bl	8006f50 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	2100      	movs	r1, #0
 80068c0:	61b9      	str	r1, [r7, #24]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d011      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	3308      	adds	r3, #8
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb38 	bl	8006f50 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	2100      	movs	r1, #0
 8006900:	6139      	str	r1, [r7, #16]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d011      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3328      	adds	r3, #40	@ 0x28
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fbca 	bl	80070b4 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	2100      	movs	r1, #0
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d011      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	3328      	adds	r3, #40	@ 0x28
 8006958:	2101      	movs	r1, #1
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fbaa 	bl	80070b4 <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	2100      	movs	r1, #0
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	e9d7 1200 	ldrd	r1, r2, [r7]
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d011      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fb8a 	bl	80070b4 <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d0:	58024400 	.word	0x58024400

080069d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069d8:	f7fe fd96 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4904      	ldr	r1, [pc, #16]	@ (80069fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	58024400 	.word	0x58024400
 80069fc:	080091a4 	.word	0x080091a4

08006a00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b089      	sub	sp, #36	@ 0x24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a08:	4ba1      	ldr	r3, [pc, #644]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a12:	4b9f      	ldr	r3, [pc, #636]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	0b1b      	lsrs	r3, r3, #12
 8006a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a2a:	4b99      	ldr	r3, [pc, #612]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2e:	08db      	lsrs	r3, r3, #3
 8006a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8111 	beq.w	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f000 8083 	beq.w	8006b5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f200 80a1 	bhi.w	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d056      	beq.n	8006b18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a6a:	e099      	b.n	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a6c:	4b88      	ldr	r3, [pc, #544]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02d      	beq.n	8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a78:	4b85      	ldr	r3, [pc, #532]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	08db      	lsrs	r3, r3, #3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	4a84      	ldr	r2, [pc, #528]	@ (8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ace:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ad2:	e087      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b16:	e065      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2a:	4b59      	ldr	r3, [pc, #356]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5a:	e043      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b48      	ldr	r3, [pc, #288]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9e:	e021      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006be4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0a:	ee17 2a90 	vmov	r2, s15
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c12:	4b1f      	ldr	r3, [pc, #124]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c38:	ee17 2a90 	vmov	r2, s15
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c40:	4b13      	ldr	r3, [pc, #76]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	0e1b      	lsrs	r3, r3, #24
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c66:	ee17 2a90 	vmov	r2, s15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c6e:	e008      	b.n	8006c82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	bf00      	nop
 8006c84:	3724      	adds	r7, #36	@ 0x24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
 8006c94:	03d09000 	.word	0x03d09000
 8006c98:	46000000 	.word	0x46000000
 8006c9c:	4c742400 	.word	0x4c742400
 8006ca0:	4a742400 	.word	0x4a742400
 8006ca4:	4af42400 	.word	0x4af42400

08006ca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	@ 0x24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb0:	4ba1      	ldr	r3, [pc, #644]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cba:	4b9f      	ldr	r3, [pc, #636]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	0d1b      	lsrs	r3, r3, #20
 8006cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cd2:	4b99      	ldr	r3, [pc, #612]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8111 	beq.w	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	f000 8083 	beq.w	8006e04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f200 80a1 	bhi.w	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d056      	beq.n	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d12:	e099      	b.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d14:	4b88      	ldr	r3, [pc, #544]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02d      	beq.n	8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d20:	4b85      	ldr	r3, [pc, #532]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a84      	ldr	r2, [pc, #528]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d7a:	e087      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dbe:	e065      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd2:	4b59      	ldr	r3, [pc, #356]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e02:	e043      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b48      	ldr	r3, [pc, #288]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e46:	e021      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b37      	ldr	r3, [pc, #220]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	0a5b      	lsrs	r3, r3, #9
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb2:	ee17 2a90 	vmov	r2, s15
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006eba:	4b1f      	ldr	r3, [pc, #124]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee0:	ee17 2a90 	vmov	r2, s15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	0e1b      	lsrs	r3, r3, #24
 8006eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	ee17 2a90 	vmov	r2, s15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f16:	e008      	b.n	8006f2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	609a      	str	r2, [r3, #8]
}
 8006f2a:	bf00      	nop
 8006f2c:	3724      	adds	r7, #36	@ 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	58024400 	.word	0x58024400
 8006f3c:	03d09000 	.word	0x03d09000
 8006f40:	46000000 	.word	0x46000000
 8006f44:	4c742400 	.word	0x4c742400
 8006f48:	4a742400 	.word	0x4a742400
 8006f4c:	4af42400 	.word	0x4af42400

08006f50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d101      	bne.n	8006f6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e099      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4e      	ldr	r2, [pc, #312]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7a:	f7fa fc5d 	bl	8001838 <HAL_GetTick>
 8006f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f82:	f7fa fc59 	bl	8001838 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e086      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f94:	4b45      	ldr	r3, [pc, #276]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fa0:	4b42      	ldr	r3, [pc, #264]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	493f      	ldr	r1, [pc, #252]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	025b      	lsls	r3, r3, #9
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fe4:	4931      	ldr	r1, [pc, #196]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fea:	4b30      	ldr	r3, [pc, #192]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	492d      	ldr	r1, [pc, #180]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f023 0220 	bic.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4928      	ldr	r1, [pc, #160]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	4a26      	ldr	r2, [pc, #152]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800701a:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800701c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800701e:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <RCCEx_PLL2_Config+0x160>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	69d2      	ldr	r2, [r2, #28]
 8007026:	00d2      	lsls	r2, r2, #3
 8007028:	4920      	ldr	r1, [pc, #128]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800702a:	4313      	orrs	r3, r2
 800702c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800702e:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	4a1e      	ldr	r2, [pc, #120]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007034:	f043 0310 	orr.w	r3, r3, #16
 8007038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007040:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4a19      	ldr	r2, [pc, #100]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007046:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800704a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800704c:	e00f      	b.n	800706e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007054:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800705a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007060:	e005      	b.n	800706e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007062:	4b12      	ldr	r3, [pc, #72]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800706c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800706e:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a0e      	ldr	r2, [pc, #56]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007074:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707a:	f7fa fbdd 	bl	8001838 <HAL_GetTick>
 800707e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007080:	e008      	b.n	8007094 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007082:	f7fa fbd9 	bl	8001838 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	ffff0007 	.word	0xffff0007

080070b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070c2:	4b53      	ldr	r3, [pc, #332]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d101      	bne.n	80070d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e099      	b.n	8007206 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070de:	f7fa fbab 	bl	8001838 <HAL_GetTick>
 80070e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070e4:	e008      	b.n	80070f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070e6:	f7fa fba7 	bl	8001838 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e086      	b.n	8007206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070f8:	4b45      	ldr	r3, [pc, #276]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f0      	bne.n	80070e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007104:	4b42      	ldr	r3, [pc, #264]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	051b      	lsls	r3, r3, #20
 8007112:	493f      	ldr	r1, [pc, #252]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	628b      	str	r3, [r1, #40]	@ 0x28
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	3b01      	subs	r3, #1
 800711e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	025b      	lsls	r3, r3, #9
 800712a:	b29b      	uxth	r3, r3
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	3b01      	subs	r3, #1
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	061b      	lsls	r3, r3, #24
 8007144:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007148:	4931      	ldr	r1, [pc, #196]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800714e:	4b30      	ldr	r3, [pc, #192]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	492d      	ldr	r1, [pc, #180]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800715c:	4313      	orrs	r3, r2
 800715e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007160:	4b2b      	ldr	r3, [pc, #172]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	4928      	ldr	r1, [pc, #160]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007172:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a26      	ldr	r2, [pc, #152]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800717c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800717e:	4b24      	ldr	r3, [pc, #144]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007182:	4b24      	ldr	r3, [pc, #144]	@ (8007214 <RCCEx_PLL3_Config+0x160>)
 8007184:	4013      	ands	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	69d2      	ldr	r2, [r2, #28]
 800718a:	00d2      	lsls	r2, r2, #3
 800718c:	4920      	ldr	r1, [pc, #128]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800718e:	4313      	orrs	r3, r2
 8007190:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007192:	4b1f      	ldr	r3, [pc, #124]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	4a1e      	ldr	r2, [pc, #120]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800719c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	4a19      	ldr	r2, [pc, #100]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071b0:	e00f      	b.n	80071d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d106      	bne.n	80071c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071b8:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	4a14      	ldr	r2, [pc, #80]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071c4:	e005      	b.n	80071d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071c6:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	4a11      	ldr	r2, [pc, #68]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071de:	f7fa fb2b 	bl	8001838 <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071e4:	e008      	b.n	80071f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071e6:	f7fa fb27 	bl	8001838 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e006      	b.n	8007206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071f8:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
 8007214:	ffff0007 	.word	0xffff0007

08007218 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e10f      	b.n	800744a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a87      	ldr	r2, [pc, #540]	@ (8007454 <HAL_SPI_Init+0x23c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00f      	beq.n	800725a <HAL_SPI_Init+0x42>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a86      	ldr	r2, [pc, #536]	@ (8007458 <HAL_SPI_Init+0x240>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00a      	beq.n	800725a <HAL_SPI_Init+0x42>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a84      	ldr	r2, [pc, #528]	@ (800745c <HAL_SPI_Init+0x244>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d005      	beq.n	800725a <HAL_SPI_Init+0x42>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b0f      	cmp	r3, #15
 8007254:	d901      	bls.n	800725a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0f7      	b.n	800744a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 ff6c 	bl	8008138 <SPI_GetPacketSize>
 8007260:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7b      	ldr	r2, [pc, #492]	@ (8007454 <HAL_SPI_Init+0x23c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00c      	beq.n	8007286 <HAL_SPI_Init+0x6e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a79      	ldr	r2, [pc, #484]	@ (8007458 <HAL_SPI_Init+0x240>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d007      	beq.n	8007286 <HAL_SPI_Init+0x6e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a78      	ldr	r2, [pc, #480]	@ (800745c <HAL_SPI_Init+0x244>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d002      	beq.n	8007286 <HAL_SPI_Init+0x6e>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b08      	cmp	r3, #8
 8007284:	d811      	bhi.n	80072aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800728a:	4a72      	ldr	r2, [pc, #456]	@ (8007454 <HAL_SPI_Init+0x23c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a70      	ldr	r2, [pc, #448]	@ (8007458 <HAL_SPI_Init+0x240>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_SPI_Init+0x8c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a6f      	ldr	r2, [pc, #444]	@ (800745c <HAL_SPI_Init+0x244>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d104      	bne.n	80072ae <HAL_SPI_Init+0x96>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b10      	cmp	r3, #16
 80072a8:	d901      	bls.n	80072ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e0cd      	b.n	800744a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7f9 fe68 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072f4:	d119      	bne.n	800732a <HAL_SPI_Init+0x112>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072fe:	d103      	bne.n	8007308 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10c      	bne.n	800732a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007318:	d107      	bne.n	800732a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007328:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00f      	beq.n	8007356 <HAL_SPI_Init+0x13e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b06      	cmp	r3, #6
 800733c:	d90b      	bls.n	8007356 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e007      	b.n	8007366 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	431a      	orrs	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	ea42 0103 	orr.w	r1, r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073c6:	ea42 0103 	orr.w	r1, r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d113      	bne.n	8007406 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007404:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40013000 	.word	0x40013000
 8007458:	40003800 	.word	0x40003800
 800745c:	40003c00 	.word	0x40003c00

08007460 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3320      	adds	r3, #32
 8007476:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007478:	f7fa f9de 	bl	8001838 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d001      	beq.n	800748e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
 800748c:	e1d1      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_Transmit+0x3a>
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e1c9      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_SPI_Transmit+0x4c>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e1c2      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2203      	movs	r2, #3
 80074b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007504:	d108      	bne.n	8007518 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e009      	b.n	800752c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800752a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	4b96      	ldr	r3, [pc, #600]	@ (800778c <HAL_SPI_Transmit+0x32c>)
 8007534:	4013      	ands	r3, r2
 8007536:	88f9      	ldrh	r1, [r7, #6]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	430b      	orrs	r3, r1
 800753e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007558:	d107      	bne.n	800756a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007568:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b0f      	cmp	r3, #15
 8007570:	d947      	bls.n	8007602 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007572:	e03f      	b.n	80075f4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d114      	bne.n	80075ac <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075aa:	e023      	b.n	80075f4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ac:	f7fa f944 	bl	8001838 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d803      	bhi.n	80075c4 <HAL_SPI_Transmit+0x164>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d102      	bne.n	80075ca <HAL_SPI_Transmit+0x16a>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d114      	bne.n	80075f4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fce6 	bl	8007f9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e11e      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1b9      	bne.n	8007574 <HAL_SPI_Transmit+0x114>
 8007600:	e0f1      	b.n	80077e6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b07      	cmp	r3, #7
 8007608:	f240 80e6 	bls.w	80077d8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800760c:	e05d      	b.n	80076ca <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d132      	bne.n	8007682 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d918      	bls.n	800765a <HAL_SPI_Transmit+0x1fa>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d014      	beq.n	800765a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b02      	subs	r3, #2
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007658:	e037      	b.n	80076ca <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007668:	1c9a      	adds	r2, r3, #2
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007680:	e023      	b.n	80076ca <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007682:	f7fa f8d9 	bl	8001838 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d803      	bhi.n	800769a <HAL_SPI_Transmit+0x23a>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Transmit+0x240>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d114      	bne.n	80076ca <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fc7b 	bl	8007f9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e0b3      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d19b      	bne.n	800760e <HAL_SPI_Transmit+0x1ae>
 80076d6:	e086      	b.n	80077e6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d154      	bne.n	8007790 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d918      	bls.n	8007724 <HAL_SPI_Transmit+0x2c4>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f6:	2b40      	cmp	r3, #64	@ 0x40
 80076f8:	d914      	bls.n	8007724 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b04      	subs	r3, #4
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007722:	e059      	b.n	80077d8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d917      	bls.n	8007760 <HAL_SPI_Transmit+0x300>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d013      	beq.n	8007760 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007746:	1c9a      	adds	r2, r3, #2
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b02      	subs	r3, #2
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800775e:	e03b      	b.n	80077d8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3320      	adds	r3, #32
 800776a:	7812      	ldrb	r2, [r2, #0]
 800776c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800778a:	e025      	b.n	80077d8 <HAL_SPI_Transmit+0x378>
 800778c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007790:	f7fa f852 	bl	8001838 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d803      	bhi.n	80077a8 <HAL_SPI_Transmit+0x348>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d102      	bne.n	80077ae <HAL_SPI_Transmit+0x34e>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d114      	bne.n	80077d8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fbf4 	bl	8007f9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e02c      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f47f af79 	bne.w	80076d8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2108      	movs	r1, #8
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fc73 	bl	80080dc <SPI_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007802:	f043 0220 	orr.w	r2, r3, #32
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 fbc5 	bl	8007f9c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007830:	2300      	movs	r3, #0
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop

0800783c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b01      	cmp	r3, #1
 8007854:	d001      	beq.n	800785a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
 8007858:	e126      	b.n	8007aa8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_Transmit_DMA+0x2a>
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e11e      	b.n	8007aa8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_SPI_Transmit_DMA+0x3c>
 8007874:	2302      	movs	r3, #2
 8007876:	e117      	b.n	8007aa8 <HAL_SPI_Transmit_DMA+0x26c>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2203      	movs	r2, #3
 8007884:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078d0:	d108      	bne.n	80078e4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e009      	b.n	80078f8 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80078f6:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b0f      	cmp	r3, #15
 80078fe:	d905      	bls.n	800790c <HAL_SPI_Transmit_DMA+0xd0>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800790a:	d10f      	bne.n	800792c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007910:	2b07      	cmp	r3, #7
 8007912:	d911      	bls.n	8007938 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800791e:	d00b      	beq.n	8007938 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007924:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792a:	d005      	beq.n	8007938 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0b7      	b.n	8007aa8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b07      	cmp	r3, #7
 800793e:	d820      	bhi.n	8007982 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800794a:	d109      	bne.n	8007960 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007952:	b29b      	uxth	r3, r3
 8007954:	3301      	adds	r3, #1
 8007956:	105b      	asrs	r3, r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800796a:	d11e      	bne.n	80079aa <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007972:	b29b      	uxth	r3, r3
 8007974:	3303      	adds	r3, #3
 8007976:	109b      	asrs	r3, r3, #2
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007980:	e013      	b.n	80079aa <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d80f      	bhi.n	80079aa <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007994:	d109      	bne.n	80079aa <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800799c:	b29b      	uxth	r3, r3
 800799e:	3301      	adds	r3, #1
 80079a0:	105b      	asrs	r3, r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ae:	4a40      	ldr	r2, [pc, #256]	@ (8007ab0 <HAL_SPI_Transmit_DMA+0x274>)
 80079b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079b6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ab4 <HAL_SPI_Transmit_DMA+0x278>)
 80079b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079be:	4a3e      	ldr	r2, [pc, #248]	@ (8007ab8 <HAL_SPI_Transmit_DMA+0x27c>)
 80079c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079c6:	2200      	movs	r2, #0
 80079c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079d8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e2:	4619      	mov	r1, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3320      	adds	r3, #32
 80079ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80079f4:	f7fa fbc8 	bl	8002188 <HAL_DMA_Start_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d011      	beq.n	8007a22 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a04:	f043 0210 	orr.w	r2, r3, #16
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e042      	b.n	8007aa8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a2c:	d108      	bne.n	8007a40 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4b20      	ldr	r3, [pc, #128]	@ (8007abc <HAL_SPI_Transmit_DMA+0x280>)
 8007a3a:	400b      	ands	r3, r1
 8007a3c:	6053      	str	r3, [r2, #4]
 8007a3e:	e009      	b.n	8007a54 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b1d      	ldr	r3, [pc, #116]	@ (8007abc <HAL_SPI_Transmit_DMA+0x280>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	88f9      	ldrh	r1, [r7, #6]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a62:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8007a72:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a8c:	d107      	bne.n	8007a9e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a9c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	08007f07 	.word	0x08007f07
 8007ab4:	08007ec1 	.word	0x08007ec1
 8007ab8:	08007f23 	.word	0x08007f23
 8007abc:	ffff0000 	.word	0xffff0000

08007ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	@ 0x28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007af2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3330      	adds	r3, #48	@ 0x30
 8007afa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d010      	beq.n	8007b28 <HAL_SPI_IRQHandler+0x68>
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9c3 	bl	8007eac <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007b26:	e192      	b.n	8007e4e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d113      	bne.n	8007b5a <HAL_SPI_IRQHandler+0x9a>
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10e      	bne.n	8007b5a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
    handled = 1UL;
 8007b56:	2301      	movs	r3, #1
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10f      	bne.n	8007b84 <HAL_SPI_IRQHandler+0xc4>
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
    handled = 1UL;
 8007b80:	2301      	movs	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10f      	bne.n	8007bae <HAL_SPI_IRQHandler+0xee>
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
    handled = 1UL;
 8007baa:	2301      	movs	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8147 	bne.w	8007e44 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 808b 	beq.w	8007cd8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0208 	orr.w	r2, r2, #8
 8007bd0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0210 	orr.w	r2, r2, #16
 8007be0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699a      	ldr	r2, [r3, #24]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bf0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0208 	bic.w	r2, r2, #8
 8007c00:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d13d      	bne.n	8007c8c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007c10:	e036      	b.n	8007c80 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b0f      	cmp	r3, #15
 8007c18:	d90b      	bls.n	8007c32 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c2a:	1d1a      	adds	r2, r3, #4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007c30:	e01d      	b.n	8007c6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	d90b      	bls.n	8007c52 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	8812      	ldrh	r2, [r2, #0]
 8007c42:	b292      	uxth	r2, r2
 8007c44:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4a:	1c9a      	adds	r2, r3, #2
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	665a      	str	r2, [r3, #100]	@ 0x64
 8007c50:	e00d      	b.n	8007c6e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	b2d2      	uxtb	r2, r2
 8007c62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1c2      	bne.n	8007c12 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f985 	bl	8007f9c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f8f7 	bl	8007e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007caa:	e0d0      	b.n	8007e4e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007cac:	7cfb      	ldrb	r3, [r7, #19]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d103      	bne.n	8007cba <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8dc 	bl	8007e70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007cb8:	e0c6      	b.n	8007e48 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007cba:	7cfb      	ldrb	r3, [r7, #19]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d103      	bne.n	8007cc8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8cb 	bl	8007e5c <HAL_SPI_RxCpltCallback>
    return;
 8007cc6:	e0bf      	b.n	8007e48 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007cc8:	7cfb      	ldrb	r3, [r7, #19]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	f040 80bc 	bne.w	8007e48 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7f8 ff11 	bl	8000af8 <HAL_SPI_TxCpltCallback>
    return;
 8007cd6:	e0b7      	b.n	8007e48 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 80b5 	beq.w	8007e4e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00f      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf4:	f043 0204 	orr.w	r2, r3, #4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d0c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00f      	beq.n	8007d38 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d36:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00f      	beq.n	8007d62 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d48:	f043 0208 	orr.w	r2, r3, #8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d60:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00f      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0220 	orr.w	r2, r2, #32
 8007d8a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d05a      	beq.n	8007e4c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6919      	ldr	r1, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b28      	ldr	r3, [pc, #160]	@ (8007e54 <HAL_SPI_IRQHandler+0x394>)
 8007db2:	400b      	ands	r3, r1
 8007db4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007dbc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007dc0:	d138      	bne.n	8007e34 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007dd0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d013      	beq.n	8007e02 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dde:	4a1e      	ldr	r2, [pc, #120]	@ (8007e58 <HAL_SPI_IRQHandler+0x398>)
 8007de0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fa fc38 	bl	800265c <HAL_DMA_Abort_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d020      	beq.n	8007e4c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e0e:	4a12      	ldr	r2, [pc, #72]	@ (8007e58 <HAL_SPI_IRQHandler+0x398>)
 8007e10:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fa fc20 	bl	800265c <HAL_DMA_Abort_IT>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d014      	beq.n	8007e4c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e32:	e00b      	b.n	8007e4c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f82b 	bl	8007e98 <HAL_SPI_ErrorCallback>
    return;
 8007e42:	e003      	b.n	8007e4c <HAL_SPI_IRQHandler+0x38c>
    return;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <HAL_SPI_IRQHandler+0x38e>
    return;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <HAL_SPI_IRQHandler+0x38e>
    return;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	3728      	adds	r7, #40	@ 0x28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	fffffc94 	.word	0xfffffc94
 8007e58:	08007f69 	.word	0x08007f69

08007e5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ecc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b07      	cmp	r3, #7
 8007ed8:	d011      	beq.n	8007efe <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee4:	d103      	bne.n	8007eee <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7f8 fe06 	bl	8000af8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007eec:	e007      	b.n	8007efe <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	611a      	str	r2, [r3, #16]
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f12:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff ffb5 	bl	8007e84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7fb fd03 	bl	800393c <HAL_DMA_GetError>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d011      	beq.n	8007f60 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f82d 	bl	8007f9c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f48:	f043 0210 	orr.w	r2, r3, #16
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff9c 	bl	8007e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff ff82 	bl	8007e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0208 	orr.w	r2, r2, #8
 8007fba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0210 	orr.w	r2, r2, #16
 8007fca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6919      	ldr	r1, [r3, #16]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80080d8 <SPI_CloseTransfer+0x13c>)
 8007fe8:	400b      	ands	r3, r1
 8007fea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b04      	cmp	r3, #4
 8008006:	d014      	beq.n	8008032 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008018:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0220 	orr.w	r2, r2, #32
 8008030:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b03      	cmp	r3, #3
 800803c:	d014      	beq.n	8008068 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00f      	beq.n	8008068 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008066:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008078:	f043 0201 	orr.w	r2, r3, #1
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008090:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00f      	beq.n	80080bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a2:	f043 0208 	orr.w	r2, r3, #8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	fffffc90 	.word	0xfffffc90

080080dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080ec:	e010      	b.n	8008110 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ee:	f7f9 fba3 	bl	8001838 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d803      	bhi.n	8008106 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d102      	bne.n	800810c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e00f      	b.n	8008130 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4013      	ands	r3, r2
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	bf0c      	ite	eq
 8008120:	2301      	moveq	r3, #1
 8008122:	2300      	movne	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	429a      	cmp	r2, r3
 800812c:	d0df      	beq.n	80080ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	3301      	adds	r3, #1
 8008150:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	3307      	adds	r3, #7
 8008156:	08db      	lsrs	r3, r3, #3
 8008158:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e042      	b.n	8008206 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f83b 	bl	800820e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2224      	movs	r2, #36	@ 0x24
 800819c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0201 	bic.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fd9b 	bl	8008cf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f830 	bl	8008224 <UART_SetConfig>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e01b      	b.n	8008206 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0201 	orr.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fe1a 	bl	8008e38 <UART_CheckIdleState>
 8008204:	4603      	mov	r3, r0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008228:	b092      	sub	sp, #72	@ 0x48
 800822a:	af00      	add	r7, sp, #0
 800822c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	431a      	orrs	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	431a      	orrs	r2, r3
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4bbe      	ldr	r3, [pc, #760]	@ (800854c <UART_SetConfig+0x328>)
 8008254:	4013      	ands	r3, r2
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800825c:	430b      	orrs	r3, r1
 800825e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4ab3      	ldr	r2, [pc, #716]	@ (8008550 <UART_SetConfig+0x32c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800828c:	4313      	orrs	r3, r2
 800828e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	4baf      	ldr	r3, [pc, #700]	@ (8008554 <UART_SetConfig+0x330>)
 8008298:	4013      	ands	r3, r2
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	f023 010f 	bic.w	r1, r3, #15
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4aa6      	ldr	r2, [pc, #664]	@ (8008558 <UART_SetConfig+0x334>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d177      	bne.n	80083b4 <UART_SetConfig+0x190>
 80082c4:	4ba5      	ldr	r3, [pc, #660]	@ (800855c <UART_SetConfig+0x338>)
 80082c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082cc:	2b28      	cmp	r3, #40	@ 0x28
 80082ce:	d86d      	bhi.n	80083ac <UART_SetConfig+0x188>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <UART_SetConfig+0xb4>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	0800837d 	.word	0x0800837d
 80082dc:	080083ad 	.word	0x080083ad
 80082e0:	080083ad 	.word	0x080083ad
 80082e4:	080083ad 	.word	0x080083ad
 80082e8:	080083ad 	.word	0x080083ad
 80082ec:	080083ad 	.word	0x080083ad
 80082f0:	080083ad 	.word	0x080083ad
 80082f4:	080083ad 	.word	0x080083ad
 80082f8:	08008385 	.word	0x08008385
 80082fc:	080083ad 	.word	0x080083ad
 8008300:	080083ad 	.word	0x080083ad
 8008304:	080083ad 	.word	0x080083ad
 8008308:	080083ad 	.word	0x080083ad
 800830c:	080083ad 	.word	0x080083ad
 8008310:	080083ad 	.word	0x080083ad
 8008314:	080083ad 	.word	0x080083ad
 8008318:	0800838d 	.word	0x0800838d
 800831c:	080083ad 	.word	0x080083ad
 8008320:	080083ad 	.word	0x080083ad
 8008324:	080083ad 	.word	0x080083ad
 8008328:	080083ad 	.word	0x080083ad
 800832c:	080083ad 	.word	0x080083ad
 8008330:	080083ad 	.word	0x080083ad
 8008334:	080083ad 	.word	0x080083ad
 8008338:	08008395 	.word	0x08008395
 800833c:	080083ad 	.word	0x080083ad
 8008340:	080083ad 	.word	0x080083ad
 8008344:	080083ad 	.word	0x080083ad
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080083ad 	.word	0x080083ad
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083ad 	.word	0x080083ad
 8008358:	0800839d 	.word	0x0800839d
 800835c:	080083ad 	.word	0x080083ad
 8008360:	080083ad 	.word	0x080083ad
 8008364:	080083ad 	.word	0x080083ad
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083ad 	.word	0x080083ad
 8008370:	080083ad 	.word	0x080083ad
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083a5 	.word	0x080083a5
 800837c:	2301      	movs	r3, #1
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e222      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e21e      	b.n	80087ca <UART_SetConfig+0x5a6>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e21a      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e216      	b.n	80087ca <UART_SetConfig+0x5a6>
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e212      	b.n	80087ca <UART_SetConfig+0x5a6>
 80083a4:	2340      	movs	r3, #64	@ 0x40
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e20e      	b.n	80087ca <UART_SetConfig+0x5a6>
 80083ac:	2380      	movs	r3, #128	@ 0x80
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e20a      	b.n	80087ca <UART_SetConfig+0x5a6>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a69      	ldr	r2, [pc, #420]	@ (8008560 <UART_SetConfig+0x33c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d130      	bne.n	8008420 <UART_SetConfig+0x1fc>
 80083be:	4b67      	ldr	r3, [pc, #412]	@ (800855c <UART_SetConfig+0x338>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d826      	bhi.n	8008418 <UART_SetConfig+0x1f4>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <UART_SetConfig+0x1ac>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008411 	.word	0x08008411
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e1ec      	b.n	80087ca <UART_SetConfig+0x5a6>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e1e8      	b.n	80087ca <UART_SetConfig+0x5a6>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e1e4      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e1e0      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008408:	2320      	movs	r3, #32
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e1dc      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008410:	2340      	movs	r3, #64	@ 0x40
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e1d8      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008418:	2380      	movs	r3, #128	@ 0x80
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e1d4      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a4f      	ldr	r2, [pc, #316]	@ (8008564 <UART_SetConfig+0x340>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d130      	bne.n	800848c <UART_SetConfig+0x268>
 800842a:	4b4c      	ldr	r3, [pc, #304]	@ (800855c <UART_SetConfig+0x338>)
 800842c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b05      	cmp	r3, #5
 8008434:	d826      	bhi.n	8008484 <UART_SetConfig+0x260>
 8008436:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <UART_SetConfig+0x218>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008455 	.word	0x08008455
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008465 	.word	0x08008465
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845a:	e1b6      	b.n	80087ca <UART_SetConfig+0x5a6>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e1b2      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e1ae      	b.n	80087ca <UART_SetConfig+0x5a6>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e1aa      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008474:	2320      	movs	r3, #32
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e1a6      	b.n	80087ca <UART_SetConfig+0x5a6>
 800847c:	2340      	movs	r3, #64	@ 0x40
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e1a2      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e19e      	b.n	80087ca <UART_SetConfig+0x5a6>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a35      	ldr	r2, [pc, #212]	@ (8008568 <UART_SetConfig+0x344>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d130      	bne.n	80084f8 <UART_SetConfig+0x2d4>
 8008496:	4b31      	ldr	r3, [pc, #196]	@ (800855c <UART_SetConfig+0x338>)
 8008498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d826      	bhi.n	80084f0 <UART_SetConfig+0x2cc>
 80084a2:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <UART_SetConfig+0x284>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084d1 	.word	0x080084d1
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084e9 	.word	0x080084e9
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e180      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084c8:	2304      	movs	r3, #4
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e17c      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084d0:	2308      	movs	r3, #8
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e178      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084d8:	2310      	movs	r3, #16
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e174      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084e0:	2320      	movs	r3, #32
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e170      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084e8:	2340      	movs	r3, #64	@ 0x40
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e16c      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084f0:	2380      	movs	r3, #128	@ 0x80
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e168      	b.n	80087ca <UART_SetConfig+0x5a6>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1b      	ldr	r2, [pc, #108]	@ (800856c <UART_SetConfig+0x348>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d142      	bne.n	8008588 <UART_SetConfig+0x364>
 8008502:	4b16      	ldr	r3, [pc, #88]	@ (800855c <UART_SetConfig+0x338>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b05      	cmp	r3, #5
 800850c:	d838      	bhi.n	8008580 <UART_SetConfig+0x35c>
 800850e:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <UART_SetConfig+0x2f0>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	0800852d 	.word	0x0800852d
 8008518:	08008535 	.word	0x08008535
 800851c:	0800853d 	.word	0x0800853d
 8008520:	08008545 	.word	0x08008545
 8008524:	08008571 	.word	0x08008571
 8008528:	08008579 	.word	0x08008579
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e14a      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008534:	2304      	movs	r3, #4
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e146      	b.n	80087ca <UART_SetConfig+0x5a6>
 800853c:	2308      	movs	r3, #8
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e142      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008544:	2310      	movs	r3, #16
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e13e      	b.n	80087ca <UART_SetConfig+0x5a6>
 800854c:	cfff69f3 	.word	0xcfff69f3
 8008550:	58000c00 	.word	0x58000c00
 8008554:	11fff4ff 	.word	0x11fff4ff
 8008558:	40011000 	.word	0x40011000
 800855c:	58024400 	.word	0x58024400
 8008560:	40004400 	.word	0x40004400
 8008564:	40004800 	.word	0x40004800
 8008568:	40004c00 	.word	0x40004c00
 800856c:	40005000 	.word	0x40005000
 8008570:	2320      	movs	r3, #32
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e128      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008578:	2340      	movs	r3, #64	@ 0x40
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e124      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e120      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4acb      	ldr	r2, [pc, #812]	@ (80088bc <UART_SetConfig+0x698>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d176      	bne.n	8008680 <UART_SetConfig+0x45c>
 8008592:	4bcb      	ldr	r3, [pc, #812]	@ (80088c0 <UART_SetConfig+0x69c>)
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800859a:	2b28      	cmp	r3, #40	@ 0x28
 800859c:	d86c      	bhi.n	8008678 <UART_SetConfig+0x454>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <UART_SetConfig+0x380>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	08008649 	.word	0x08008649
 80085a8:	08008679 	.word	0x08008679
 80085ac:	08008679 	.word	0x08008679
 80085b0:	08008679 	.word	0x08008679
 80085b4:	08008679 	.word	0x08008679
 80085b8:	08008679 	.word	0x08008679
 80085bc:	08008679 	.word	0x08008679
 80085c0:	08008679 	.word	0x08008679
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008679 	.word	0x08008679
 80085cc:	08008679 	.word	0x08008679
 80085d0:	08008679 	.word	0x08008679
 80085d4:	08008679 	.word	0x08008679
 80085d8:	08008679 	.word	0x08008679
 80085dc:	08008679 	.word	0x08008679
 80085e0:	08008679 	.word	0x08008679
 80085e4:	08008659 	.word	0x08008659
 80085e8:	08008679 	.word	0x08008679
 80085ec:	08008679 	.word	0x08008679
 80085f0:	08008679 	.word	0x08008679
 80085f4:	08008679 	.word	0x08008679
 80085f8:	08008679 	.word	0x08008679
 80085fc:	08008679 	.word	0x08008679
 8008600:	08008679 	.word	0x08008679
 8008604:	08008661 	.word	0x08008661
 8008608:	08008679 	.word	0x08008679
 800860c:	08008679 	.word	0x08008679
 8008610:	08008679 	.word	0x08008679
 8008614:	08008679 	.word	0x08008679
 8008618:	08008679 	.word	0x08008679
 800861c:	08008679 	.word	0x08008679
 8008620:	08008679 	.word	0x08008679
 8008624:	08008669 	.word	0x08008669
 8008628:	08008679 	.word	0x08008679
 800862c:	08008679 	.word	0x08008679
 8008630:	08008679 	.word	0x08008679
 8008634:	08008679 	.word	0x08008679
 8008638:	08008679 	.word	0x08008679
 800863c:	08008679 	.word	0x08008679
 8008640:	08008679 	.word	0x08008679
 8008644:	08008671 	.word	0x08008671
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e0bc      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e0b8      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e0b4      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e0b0      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008668:	2320      	movs	r3, #32
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e0ac      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008670:	2340      	movs	r3, #64	@ 0x40
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e0a8      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008678:	2380      	movs	r3, #128	@ 0x80
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e0a4      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a8f      	ldr	r2, [pc, #572]	@ (80088c4 <UART_SetConfig+0x6a0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d130      	bne.n	80086ec <UART_SetConfig+0x4c8>
 800868a:	4b8d      	ldr	r3, [pc, #564]	@ (80088c0 <UART_SetConfig+0x69c>)
 800868c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b05      	cmp	r3, #5
 8008694:	d826      	bhi.n	80086e4 <UART_SetConfig+0x4c0>
 8008696:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <UART_SetConfig+0x478>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	080086c5 	.word	0x080086c5
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086d5 	.word	0x080086d5
 80086b0:	080086dd 	.word	0x080086dd
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e086      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086bc:	2304      	movs	r3, #4
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e082      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086c4:	2308      	movs	r3, #8
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e07e      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086cc:	2310      	movs	r3, #16
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e07a      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e076      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086dc:	2340      	movs	r3, #64	@ 0x40
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e072      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086e4:	2380      	movs	r3, #128	@ 0x80
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e06e      	b.n	80087ca <UART_SetConfig+0x5a6>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a75      	ldr	r2, [pc, #468]	@ (80088c8 <UART_SetConfig+0x6a4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d130      	bne.n	8008758 <UART_SetConfig+0x534>
 80086f6:	4b72      	ldr	r3, [pc, #456]	@ (80088c0 <UART_SetConfig+0x69c>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d826      	bhi.n	8008750 <UART_SetConfig+0x52c>
 8008702:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <UART_SetConfig+0x4e4>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008721 	.word	0x08008721
 800870c:	08008729 	.word	0x08008729
 8008710:	08008731 	.word	0x08008731
 8008714:	08008739 	.word	0x08008739
 8008718:	08008741 	.word	0x08008741
 800871c:	08008749 	.word	0x08008749
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e050      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e04c      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e048      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e044      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008740:	2320      	movs	r3, #32
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e040      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008748:	2340      	movs	r3, #64	@ 0x40
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e03c      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008750:	2380      	movs	r3, #128	@ 0x80
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e038      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a5b      	ldr	r2, [pc, #364]	@ (80088cc <UART_SetConfig+0x6a8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d130      	bne.n	80087c4 <UART_SetConfig+0x5a0>
 8008762:	4b57      	ldr	r3, [pc, #348]	@ (80088c0 <UART_SetConfig+0x69c>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b05      	cmp	r3, #5
 800876c:	d826      	bhi.n	80087bc <UART_SetConfig+0x598>
 800876e:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <UART_SetConfig+0x550>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	0800878d 	.word	0x0800878d
 8008778:	08008795 	.word	0x08008795
 800877c:	0800879d 	.word	0x0800879d
 8008780:	080087a5 	.word	0x080087a5
 8008784:	080087ad 	.word	0x080087ad
 8008788:	080087b5 	.word	0x080087b5
 800878c:	2302      	movs	r3, #2
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e01a      	b.n	80087ca <UART_SetConfig+0x5a6>
 8008794:	2304      	movs	r3, #4
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e016      	b.n	80087ca <UART_SetConfig+0x5a6>
 800879c:	2308      	movs	r3, #8
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e012      	b.n	80087ca <UART_SetConfig+0x5a6>
 80087a4:	2310      	movs	r3, #16
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e00e      	b.n	80087ca <UART_SetConfig+0x5a6>
 80087ac:	2320      	movs	r3, #32
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e00a      	b.n	80087ca <UART_SetConfig+0x5a6>
 80087b4:	2340      	movs	r3, #64	@ 0x40
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e006      	b.n	80087ca <UART_SetConfig+0x5a6>
 80087bc:	2380      	movs	r3, #128	@ 0x80
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e002      	b.n	80087ca <UART_SetConfig+0x5a6>
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a3f      	ldr	r2, [pc, #252]	@ (80088cc <UART_SetConfig+0x6a8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	f040 80f8 	bne.w	80089c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087da:	2b20      	cmp	r3, #32
 80087dc:	dc46      	bgt.n	800886c <UART_SetConfig+0x648>
 80087de:	2b02      	cmp	r3, #2
 80087e0:	f2c0 8082 	blt.w	80088e8 <UART_SetConfig+0x6c4>
 80087e4:	3b02      	subs	r3, #2
 80087e6:	2b1e      	cmp	r3, #30
 80087e8:	d87e      	bhi.n	80088e8 <UART_SetConfig+0x6c4>
 80087ea:	a201      	add	r2, pc, #4	@ (adr r2, 80087f0 <UART_SetConfig+0x5cc>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008873 	.word	0x08008873
 80087f4:	080088e9 	.word	0x080088e9
 80087f8:	0800887b 	.word	0x0800887b
 80087fc:	080088e9 	.word	0x080088e9
 8008800:	080088e9 	.word	0x080088e9
 8008804:	080088e9 	.word	0x080088e9
 8008808:	0800888b 	.word	0x0800888b
 800880c:	080088e9 	.word	0x080088e9
 8008810:	080088e9 	.word	0x080088e9
 8008814:	080088e9 	.word	0x080088e9
 8008818:	080088e9 	.word	0x080088e9
 800881c:	080088e9 	.word	0x080088e9
 8008820:	080088e9 	.word	0x080088e9
 8008824:	080088e9 	.word	0x080088e9
 8008828:	0800889b 	.word	0x0800889b
 800882c:	080088e9 	.word	0x080088e9
 8008830:	080088e9 	.word	0x080088e9
 8008834:	080088e9 	.word	0x080088e9
 8008838:	080088e9 	.word	0x080088e9
 800883c:	080088e9 	.word	0x080088e9
 8008840:	080088e9 	.word	0x080088e9
 8008844:	080088e9 	.word	0x080088e9
 8008848:	080088e9 	.word	0x080088e9
 800884c:	080088e9 	.word	0x080088e9
 8008850:	080088e9 	.word	0x080088e9
 8008854:	080088e9 	.word	0x080088e9
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088db 	.word	0x080088db
 800886c:	2b40      	cmp	r3, #64	@ 0x40
 800886e:	d037      	beq.n	80088e0 <UART_SetConfig+0x6bc>
 8008870:	e03a      	b.n	80088e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008872:	f7fe f8af 	bl	80069d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008878:	e03c      	b.n	80088f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe f8be 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e034      	b.n	80088f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888a:	f107 0318 	add.w	r3, r7, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fa0a 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008898:	e02c      	b.n	80088f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889a:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <UART_SetConfig+0x69c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088a6:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <UART_SetConfig+0x69c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a07      	ldr	r2, [pc, #28]	@ (80088d0 <UART_SetConfig+0x6ac>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b8:	e01c      	b.n	80088f4 <UART_SetConfig+0x6d0>
 80088ba:	bf00      	nop
 80088bc:	40011400 	.word	0x40011400
 80088c0:	58024400 	.word	0x58024400
 80088c4:	40007800 	.word	0x40007800
 80088c8:	40007c00 	.word	0x40007c00
 80088cc:	58000c00 	.word	0x58000c00
 80088d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80088d4:	4b9d      	ldr	r3, [pc, #628]	@ (8008b4c <UART_SetConfig+0x928>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d8:	e00c      	b.n	80088f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088da:	4b9d      	ldr	r3, [pc, #628]	@ (8008b50 <UART_SetConfig+0x92c>)
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088de:	e009      	b.n	80088f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e6:	e005      	b.n	80088f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 81de 	beq.w	8008cb8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008900:	4a94      	ldr	r2, [pc, #592]	@ (8008b54 <UART_SetConfig+0x930>)
 8008902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008906:	461a      	mov	r2, r3
 8008908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890a:	fbb3 f3f2 	udiv	r3, r3, r2
 800890e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	4413      	add	r3, r2
 800891a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891c:	429a      	cmp	r2, r3
 800891e:	d305      	bcc.n	800892c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008928:	429a      	cmp	r2, r3
 800892a:	d903      	bls.n	8008934 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008932:	e1c1      	b.n	8008cb8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008936:	2200      	movs	r2, #0
 8008938:	60bb      	str	r3, [r7, #8]
 800893a:	60fa      	str	r2, [r7, #12]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	4a84      	ldr	r2, [pc, #528]	@ (8008b54 <UART_SetConfig+0x930>)
 8008942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008946:	b29b      	uxth	r3, r3
 8008948:	2200      	movs	r2, #0
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008956:	f7f7 fcbf 	bl	80002d8 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4610      	mov	r0, r2
 8008960:	4619      	mov	r1, r3
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	020b      	lsls	r3, r1, #8
 800896c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008970:	0202      	lsls	r2, r0, #8
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	6849      	ldr	r1, [r1, #4]
 8008976:	0849      	lsrs	r1, r1, #1
 8008978:	2000      	movs	r0, #0
 800897a:	460c      	mov	r4, r1
 800897c:	4605      	mov	r5, r0
 800897e:	eb12 0804 	adds.w	r8, r2, r4
 8008982:	eb43 0905 	adc.w	r9, r3, r5
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	469a      	mov	sl, r3
 800898e:	4693      	mov	fp, r2
 8008990:	4652      	mov	r2, sl
 8008992:	465b      	mov	r3, fp
 8008994:	4640      	mov	r0, r8
 8008996:	4649      	mov	r1, r9
 8008998:	f7f7 fc9e 	bl	80002d8 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4613      	mov	r3, r2
 80089a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089aa:	d308      	bcc.n	80089be <UART_SetConfig+0x79a>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089b2:	d204      	bcs.n	80089be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ba:	60da      	str	r2, [r3, #12]
 80089bc:	e17c      	b.n	8008cb8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089c4:	e178      	b.n	8008cb8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ce:	f040 80c5 	bne.w	8008b5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80089d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	dc48      	bgt.n	8008a6c <UART_SetConfig+0x848>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	db7b      	blt.n	8008ad6 <UART_SetConfig+0x8b2>
 80089de:	2b20      	cmp	r3, #32
 80089e0:	d879      	bhi.n	8008ad6 <UART_SetConfig+0x8b2>
 80089e2:	a201      	add	r2, pc, #4	@ (adr r2, 80089e8 <UART_SetConfig+0x7c4>)
 80089e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e8:	08008a73 	.word	0x08008a73
 80089ec:	08008a7b 	.word	0x08008a7b
 80089f0:	08008ad7 	.word	0x08008ad7
 80089f4:	08008ad7 	.word	0x08008ad7
 80089f8:	08008a83 	.word	0x08008a83
 80089fc:	08008ad7 	.word	0x08008ad7
 8008a00:	08008ad7 	.word	0x08008ad7
 8008a04:	08008ad7 	.word	0x08008ad7
 8008a08:	08008a93 	.word	0x08008a93
 8008a0c:	08008ad7 	.word	0x08008ad7
 8008a10:	08008ad7 	.word	0x08008ad7
 8008a14:	08008ad7 	.word	0x08008ad7
 8008a18:	08008ad7 	.word	0x08008ad7
 8008a1c:	08008ad7 	.word	0x08008ad7
 8008a20:	08008ad7 	.word	0x08008ad7
 8008a24:	08008ad7 	.word	0x08008ad7
 8008a28:	08008aa3 	.word	0x08008aa3
 8008a2c:	08008ad7 	.word	0x08008ad7
 8008a30:	08008ad7 	.word	0x08008ad7
 8008a34:	08008ad7 	.word	0x08008ad7
 8008a38:	08008ad7 	.word	0x08008ad7
 8008a3c:	08008ad7 	.word	0x08008ad7
 8008a40:	08008ad7 	.word	0x08008ad7
 8008a44:	08008ad7 	.word	0x08008ad7
 8008a48:	08008ad7 	.word	0x08008ad7
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008ad7 	.word	0x08008ad7
 8008a54:	08008ad7 	.word	0x08008ad7
 8008a58:	08008ad7 	.word	0x08008ad7
 8008a5c:	08008ad7 	.word	0x08008ad7
 8008a60:	08008ad7 	.word	0x08008ad7
 8008a64:	08008ad7 	.word	0x08008ad7
 8008a68:	08008ac9 	.word	0x08008ac9
 8008a6c:	2b40      	cmp	r3, #64	@ 0x40
 8008a6e:	d02e      	beq.n	8008ace <UART_SetConfig+0x8aa>
 8008a70:	e031      	b.n	8008ad6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a72:	f7fc fd79 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8008a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a78:	e033      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7a:	f7fc fd8b 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008a7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a80:	e02f      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd ffba 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a90:	e027      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a92:	f107 0318 	add.w	r3, r7, #24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe f906 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa0:	e01f      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b58 <UART_SetConfig+0x934>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aae:	4b2a      	ldr	r3, [pc, #168]	@ (8008b58 <UART_SetConfig+0x934>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	08db      	lsrs	r3, r3, #3
 8008ab4:	f003 0303 	and.w	r3, r3, #3
 8008ab8:	4a24      	ldr	r2, [pc, #144]	@ (8008b4c <UART_SetConfig+0x928>)
 8008aba:	fa22 f303 	lsr.w	r3, r2, r3
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac0:	e00f      	b.n	8008ae2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ac2:	4b22      	ldr	r3, [pc, #136]	@ (8008b4c <UART_SetConfig+0x928>)
 8008ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac6:	e00c      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ac8:	4b21      	ldr	r3, [pc, #132]	@ (8008b50 <UART_SetConfig+0x92c>)
 8008aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008acc:	e009      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad4:	e005      	b.n	8008ae2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 80e7 	beq.w	8008cb8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	4a19      	ldr	r2, [pc, #100]	@ (8008b54 <UART_SetConfig+0x930>)
 8008af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afc:	005a      	lsls	r2, r3, #1
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	085b      	lsrs	r3, r3, #1
 8008b04:	441a      	add	r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	2b0f      	cmp	r3, #15
 8008b14:	d916      	bls.n	8008b44 <UART_SetConfig+0x920>
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b1c:	d212      	bcs.n	8008b44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f023 030f 	bic.w	r3, r3, #15
 8008b26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b36:	4313      	orrs	r3, r2
 8008b38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008b40:	60da      	str	r2, [r3, #12]
 8008b42:	e0b9      	b.n	8008cb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b4a:	e0b5      	b.n	8008cb8 <UART_SetConfig+0xa94>
 8008b4c:	03d09000 	.word	0x03d09000
 8008b50:	003d0900 	.word	0x003d0900
 8008b54:	080091c8 	.word	0x080091c8
 8008b58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b5c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	dc49      	bgt.n	8008bf8 <UART_SetConfig+0x9d4>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	db7c      	blt.n	8008c62 <UART_SetConfig+0xa3e>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d87a      	bhi.n	8008c62 <UART_SetConfig+0xa3e>
 8008b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <UART_SetConfig+0x950>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008bff 	.word	0x08008bff
 8008b78:	08008c07 	.word	0x08008c07
 8008b7c:	08008c63 	.word	0x08008c63
 8008b80:	08008c63 	.word	0x08008c63
 8008b84:	08008c0f 	.word	0x08008c0f
 8008b88:	08008c63 	.word	0x08008c63
 8008b8c:	08008c63 	.word	0x08008c63
 8008b90:	08008c63 	.word	0x08008c63
 8008b94:	08008c1f 	.word	0x08008c1f
 8008b98:	08008c63 	.word	0x08008c63
 8008b9c:	08008c63 	.word	0x08008c63
 8008ba0:	08008c63 	.word	0x08008c63
 8008ba4:	08008c63 	.word	0x08008c63
 8008ba8:	08008c63 	.word	0x08008c63
 8008bac:	08008c63 	.word	0x08008c63
 8008bb0:	08008c63 	.word	0x08008c63
 8008bb4:	08008c2f 	.word	0x08008c2f
 8008bb8:	08008c63 	.word	0x08008c63
 8008bbc:	08008c63 	.word	0x08008c63
 8008bc0:	08008c63 	.word	0x08008c63
 8008bc4:	08008c63 	.word	0x08008c63
 8008bc8:	08008c63 	.word	0x08008c63
 8008bcc:	08008c63 	.word	0x08008c63
 8008bd0:	08008c63 	.word	0x08008c63
 8008bd4:	08008c63 	.word	0x08008c63
 8008bd8:	08008c63 	.word	0x08008c63
 8008bdc:	08008c63 	.word	0x08008c63
 8008be0:	08008c63 	.word	0x08008c63
 8008be4:	08008c63 	.word	0x08008c63
 8008be8:	08008c63 	.word	0x08008c63
 8008bec:	08008c63 	.word	0x08008c63
 8008bf0:	08008c63 	.word	0x08008c63
 8008bf4:	08008c55 	.word	0x08008c55
 8008bf8:	2b40      	cmp	r3, #64	@ 0x40
 8008bfa:	d02e      	beq.n	8008c5a <UART_SetConfig+0xa36>
 8008bfc:	e031      	b.n	8008c62 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bfe:	f7fc fcb3 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8008c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c04:	e033      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c06:	f7fc fcc5 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008c0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e02f      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd fef4 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e027      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f840 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2c:	e01f      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ce4 <UART_SetConfig+0xac0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce4 <UART_SetConfig+0xac0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	08db      	lsrs	r3, r3, #3
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	4a28      	ldr	r2, [pc, #160]	@ (8008ce8 <UART_SetConfig+0xac4>)
 8008c46:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c4c:	e00f      	b.n	8008c6e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ce8 <UART_SetConfig+0xac4>)
 8008c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c52:	e00c      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c54:	4b25      	ldr	r3, [pc, #148]	@ (8008cec <UART_SetConfig+0xac8>)
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c58:	e009      	b.n	8008c6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e005      	b.n	8008c6e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d021      	beq.n	8008cb8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c78:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf0 <UART_SetConfig+0xacc>)
 8008c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c82:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	085b      	lsrs	r3, r3, #1
 8008c8c:	441a      	add	r2, r3
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	2b0f      	cmp	r3, #15
 8008c9c:	d909      	bls.n	8008cb2 <UART_SetConfig+0xa8e>
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca4:	d205      	bcs.n	8008cb2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60da      	str	r2, [r3, #12]
 8008cb0:	e002      	b.n	8008cb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cd4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3748      	adds	r7, #72	@ 0x48
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	03d09000 	.word	0x03d09000
 8008cec:	003d0900 	.word	0x003d0900
 8008cf0:	080091c8 	.word	0x080091c8

08008cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	f003 0310 	and.w	r3, r3, #16
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01a      	beq.n	8008e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008df2:	d10a      	bne.n	8008e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	605a      	str	r2, [r3, #4]
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b098      	sub	sp, #96	@ 0x60
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e48:	f7f8 fcf6 	bl	8001838 <HAL_GetTick>
 8008e4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d12f      	bne.n	8008ebc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e64:	2200      	movs	r2, #0
 8008e66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f88e 	bl	8008f8c <UART_WaitOnFlagUntilTimeout>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d022      	beq.n	8008ebc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e6      	bne.n	8008e76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e063      	b.n	8008f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d149      	bne.n	8008f5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f857 	bl	8008f8c <UART_WaitOnFlagUntilTimeout>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d03c      	beq.n	8008f5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e6      	bne.n	8008ee4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f36:	61fa      	str	r2, [r7, #28]
 8008f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	69b9      	ldr	r1, [r7, #24]
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	617b      	str	r3, [r7, #20]
   return(result);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e012      	b.n	8008f84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3758      	adds	r7, #88	@ 0x58
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9c:	e04f      	b.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d04b      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa6:	f7f8 fc47 	bl	8001838 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d302      	bcc.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e04e      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d037      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b80      	cmp	r3, #128	@ 0x80
 8008fd2:	d034      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b40      	cmp	r3, #64	@ 0x40
 8008fd8:	d031      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b08      	cmp	r3, #8
 8008fe6:	d110      	bne.n	800900a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2208      	movs	r2, #8
 8008fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 f839 	bl	8009068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e029      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009018:	d111      	bne.n	800903e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 f81f 	bl	8009068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e00f      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69da      	ldr	r2, [r3, #28]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4013      	ands	r3, r2
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	bf0c      	ite	eq
 800904e:	2301      	moveq	r3, #1
 8009050:	2300      	movne	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	429a      	cmp	r2, r3
 800905a:	d0a0      	beq.n	8008f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009068:	b480      	push	{r7}
 800906a:	b095      	sub	sp, #84	@ 0x54
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009090:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e6      	bne.n	8009070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3308      	adds	r3, #8
 80090a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009130 <UART_EndRxTransfer+0xc8>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3308      	adds	r3, #8
 80090c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e5      	bne.n	80090a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d118      	bne.n	8009110 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f023 0310 	bic.w	r3, r3, #16
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	461a      	mov	r2, r3
 80090fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6979      	ldr	r1, [r7, #20]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	613b      	str	r3, [r7, #16]
   return(result);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e6      	bne.n	80090de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009124:	bf00      	nop
 8009126:	3754      	adds	r7, #84	@ 0x54
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	effffffe 	.word	0xeffffffe

08009134 <memset>:
 8009134:	4402      	add	r2, r0
 8009136:	4603      	mov	r3, r0
 8009138:	4293      	cmp	r3, r2
 800913a:	d100      	bne.n	800913e <memset+0xa>
 800913c:	4770      	bx	lr
 800913e:	f803 1b01 	strb.w	r1, [r3], #1
 8009142:	e7f9      	b.n	8009138 <memset+0x4>

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4d0d      	ldr	r5, [pc, #52]	@ (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	@ (8009180 <__libc_init_array+0x3c>)
 800914a:	1b64      	subs	r4, r4, r5
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2600      	movs	r6, #0
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4d0b      	ldr	r5, [pc, #44]	@ (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	@ (8009188 <__libc_init_array+0x44>)
 8009158:	f000 f818 	bl	800918c <_init>
 800915c:	1b64      	subs	r4, r4, r5
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2600      	movs	r6, #0
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	080091e8 	.word	0x080091e8
 8009180:	080091e8 	.word	0x080091e8
 8009184:	080091e8 	.word	0x080091e8
 8009188:	080091ec 	.word	0x080091ec

0800918c <_init>:
 800918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918e:	bf00      	nop
 8009190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009192:	bc08      	pop	{r3}
 8009194:	469e      	mov	lr, r3
 8009196:	4770      	bx	lr

08009198 <_fini>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr
